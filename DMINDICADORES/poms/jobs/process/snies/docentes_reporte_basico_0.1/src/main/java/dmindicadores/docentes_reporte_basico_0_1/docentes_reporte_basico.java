// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package dmindicadores.docentes_reporte_basico_0_1;

import routines.DataOperation;
import routines.OpenStreetMap;
import routines.TalendDataGenerator;
import routines.Relational;
import routines.Mathematical;
import routines.SHA;
import routines.GeometryUtility;
import routines.Numeric;
import routines.GeoOperation;
import routines.GeometryOperation;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.TalendDate;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")
/**
 * Job: docentes_reporte_basico Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 7.1.1.20180829_1603-M3
 * @status 
 */
public class docentes_reporte_basico implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "docentes_reporte_basico";
	private final String projectName = "DMINDICADORES";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap
				.put(KEY_DB_DATASOURCES_RAW,
						new java.util.HashMap<String, javax.sql.DataSource>(
								dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent
						+ " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					docentes_reporte_basico.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(docentes_reporte_basico.this,
									new Object[] { e, currentComponent,
											globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tPostgresqlInput_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlOutput_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMysqlInput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMysqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMysqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlInput_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tMysqlInput_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class informacion_basicaStruct implements
			routines.system.IPersistableRow<informacion_basicaStruct> {
		final static byte[] commonByteArrayLock_DMINDICADORES_docentes_reporte_basico = new byte[0];
		static byte[] commonByteArray_DMINDICADORES_docentes_reporte_basico = new byte[0];

		public Integer anio;

		public Integer getAnio() {
			return this.anio;
		}

		public Integer semestre;

		public Integer getSemestre() {
			return this.semestre;
		}

		public String id_tipo_documento;

		public String getId_tipo_documento() {
			return this.id_tipo_documento;
		}

		public String num_documento;

		public String getNum_documento() {
			return this.num_documento;
		}

		public String fecha_nacimiento;

		public String getFecha_nacimiento() {
			return this.fecha_nacimiento;
		}

		public String id_pais_nacimiento;

		public String getId_pais_nacimiento() {
			return this.id_pais_nacimiento;
		}

		public String id_municipio_departamento;

		public String getId_municipio_departamento() {
			return this.id_municipio_departamento;
		}

		public String email_institucional;

		public String getEmail_institucional() {
			return this.email_institucional;
		}

		public Integer id_nivel_max_estudio;

		public Integer getId_nivel_max_estudio() {
			return this.id_nivel_max_estudio;
		}

		public String formacion_titulo;

		public String getFormacion_titulo() {
			return this.formacion_titulo;
		}

		public String fechagrado;

		public String getFechagrado() {
			return this.fechagrado;
		}

		public Integer id_pais_institucion_estudio;

		public Integer getId_pais_institucion_estudio() {
			return this.id_pais_institucion_estudio;
		}

		public String titulo_convalidado;

		public String getTitulo_convalidado() {
			return this.titulo_convalidado;
		}

		public Integer id_ies_estudio;

		public Integer getId_ies_estudio() {
			return this.id_ies_estudio;
		}

		public String nombre_institucion_estudio;

		public String getNombre_institucion_estudio() {
			return this.nombre_institucion_estudio;
		}

		public Integer id_metodologia_programa;

		public Integer getId_metodologia_programa() {
			return this.id_metodologia_programa;
		}

		public String fecha_ingreso;

		public String getFecha_ingreso() {
			return this.fecha_ingreso;
		}

		public String aplica_decreto_1279;

		public String getAplica_decreto_1279() {
			return this.aplica_decreto_1279;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DMINDICADORES_docentes_reporte_basico.length) {
					if (length < 1024
							&& commonByteArray_DMINDICADORES_docentes_reporte_basico.length == 0) {
						commonByteArray_DMINDICADORES_docentes_reporte_basico = new byte[1024];
					} else {
						commonByteArray_DMINDICADORES_docentes_reporte_basico = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_DMINDICADORES_docentes_reporte_basico,
						0, length);
				strReturn = new String(
						commonByteArray_DMINDICADORES_docentes_reporte_basico,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DMINDICADORES_docentes_reporte_basico) {

				try {

					int length = 0;

					this.anio = readInteger(dis);

					this.semestre = readInteger(dis);

					this.id_tipo_documento = readString(dis);

					this.num_documento = readString(dis);

					this.fecha_nacimiento = readString(dis);

					this.id_pais_nacimiento = readString(dis);

					this.id_municipio_departamento = readString(dis);

					this.email_institucional = readString(dis);

					this.id_nivel_max_estudio = readInteger(dis);

					this.formacion_titulo = readString(dis);

					this.fechagrado = readString(dis);

					this.id_pais_institucion_estudio = readInteger(dis);

					this.titulo_convalidado = readString(dis);

					this.id_ies_estudio = readInteger(dis);

					this.nombre_institucion_estudio = readString(dis);

					this.id_metodologia_programa = readInteger(dis);

					this.fecha_ingreso = readString(dis);

					this.aplica_decreto_1279 = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.anio, dos);

				// Integer

				writeInteger(this.semestre, dos);

				// String

				writeString(this.id_tipo_documento, dos);

				// String

				writeString(this.num_documento, dos);

				// String

				writeString(this.fecha_nacimiento, dos);

				// String

				writeString(this.id_pais_nacimiento, dos);

				// String

				writeString(this.id_municipio_departamento, dos);

				// String

				writeString(this.email_institucional, dos);

				// Integer

				writeInteger(this.id_nivel_max_estudio, dos);

				// String

				writeString(this.formacion_titulo, dos);

				// String

				writeString(this.fechagrado, dos);

				// Integer

				writeInteger(this.id_pais_institucion_estudio, dos);

				// String

				writeString(this.titulo_convalidado, dos);

				// Integer

				writeInteger(this.id_ies_estudio, dos);

				// String

				writeString(this.nombre_institucion_estudio, dos);

				// Integer

				writeInteger(this.id_metodologia_programa, dos);

				// String

				writeString(this.fecha_ingreso, dos);

				// String

				writeString(this.aplica_decreto_1279, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("anio=" + String.valueOf(anio));
			sb.append(",semestre=" + String.valueOf(semestre));
			sb.append(",id_tipo_documento=" + id_tipo_documento);
			sb.append(",num_documento=" + num_documento);
			sb.append(",fecha_nacimiento=" + fecha_nacimiento);
			sb.append(",id_pais_nacimiento=" + id_pais_nacimiento);
			sb.append(",id_municipio_departamento=" + id_municipio_departamento);
			sb.append(",email_institucional=" + email_institucional);
			sb.append(",id_nivel_max_estudio="
					+ String.valueOf(id_nivel_max_estudio));
			sb.append(",formacion_titulo=" + formacion_titulo);
			sb.append(",fechagrado=" + fechagrado);
			sb.append(",id_pais_institucion_estudio="
					+ String.valueOf(id_pais_institucion_estudio));
			sb.append(",titulo_convalidado=" + titulo_convalidado);
			sb.append(",id_ies_estudio=" + String.valueOf(id_ies_estudio));
			sb.append(",nombre_institucion_estudio="
					+ nombre_institucion_estudio);
			sb.append(",id_metodologia_programa="
					+ String.valueOf(id_metodologia_programa));
			sb.append(",fecha_ingreso=" + fecha_ingreso);
			sb.append(",aplica_decreto_1279=" + aplica_decreto_1279);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(informacion_basicaStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_DMINDICADORES_docentes_reporte_basico = new byte[0];
		static byte[] commonByteArray_DMINDICADORES_docentes_reporte_basico = new byte[0];

		public Integer anio;

		public Integer getAnio() {
			return this.anio;
		}

		public Integer semestre;

		public Integer getSemestre() {
			return this.semestre;
		}

		public String id_tipo_documento;

		public String getId_tipo_documento() {
			return this.id_tipo_documento;
		}

		public String num_documento;

		public String getNum_documento() {
			return this.num_documento;
		}

		public String fecha_nacimiento;

		public String getFecha_nacimiento() {
			return this.fecha_nacimiento;
		}

		public String id_pais_nacimiento;

		public String getId_pais_nacimiento() {
			return this.id_pais_nacimiento;
		}

		public String id_municipio_departamento;

		public String getId_municipio_departamento() {
			return this.id_municipio_departamento;
		}

		public String email_institucional;

		public String getEmail_institucional() {
			return this.email_institucional;
		}

		public Integer id_nivel_max_estudio;

		public Integer getId_nivel_max_estudio() {
			return this.id_nivel_max_estudio;
		}

		public String formacion_titulo;

		public String getFormacion_titulo() {
			return this.formacion_titulo;
		}

		public String fechagrado;

		public String getFechagrado() {
			return this.fechagrado;
		}

		public Integer id_pais_institucion_estudio;

		public Integer getId_pais_institucion_estudio() {
			return this.id_pais_institucion_estudio;
		}

		public String titulo_convalidado;

		public String getTitulo_convalidado() {
			return this.titulo_convalidado;
		}

		public Integer id_ies_estudio;

		public Integer getId_ies_estudio() {
			return this.id_ies_estudio;
		}

		public String nombre_institucion_estudio;

		public String getNombre_institucion_estudio() {
			return this.nombre_institucion_estudio;
		}

		public Integer id_metodologia_programa;

		public Integer getId_metodologia_programa() {
			return this.id_metodologia_programa;
		}

		public String fecha_ingreso;

		public String getFecha_ingreso() {
			return this.fecha_ingreso;
		}

		public String aplica_decreto_1279;

		public String getAplica_decreto_1279() {
			return this.aplica_decreto_1279;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DMINDICADORES_docentes_reporte_basico.length) {
					if (length < 1024
							&& commonByteArray_DMINDICADORES_docentes_reporte_basico.length == 0) {
						commonByteArray_DMINDICADORES_docentes_reporte_basico = new byte[1024];
					} else {
						commonByteArray_DMINDICADORES_docentes_reporte_basico = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_DMINDICADORES_docentes_reporte_basico,
						0, length);
				strReturn = new String(
						commonByteArray_DMINDICADORES_docentes_reporte_basico,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DMINDICADORES_docentes_reporte_basico) {

				try {

					int length = 0;

					this.anio = readInteger(dis);

					this.semestre = readInteger(dis);

					this.id_tipo_documento = readString(dis);

					this.num_documento = readString(dis);

					this.fecha_nacimiento = readString(dis);

					this.id_pais_nacimiento = readString(dis);

					this.id_municipio_departamento = readString(dis);

					this.email_institucional = readString(dis);

					this.id_nivel_max_estudio = readInteger(dis);

					this.formacion_titulo = readString(dis);

					this.fechagrado = readString(dis);

					this.id_pais_institucion_estudio = readInteger(dis);

					this.titulo_convalidado = readString(dis);

					this.id_ies_estudio = readInteger(dis);

					this.nombre_institucion_estudio = readString(dis);

					this.id_metodologia_programa = readInteger(dis);

					this.fecha_ingreso = readString(dis);

					this.aplica_decreto_1279 = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.anio, dos);

				// Integer

				writeInteger(this.semestre, dos);

				// String

				writeString(this.id_tipo_documento, dos);

				// String

				writeString(this.num_documento, dos);

				// String

				writeString(this.fecha_nacimiento, dos);

				// String

				writeString(this.id_pais_nacimiento, dos);

				// String

				writeString(this.id_municipio_departamento, dos);

				// String

				writeString(this.email_institucional, dos);

				// Integer

				writeInteger(this.id_nivel_max_estudio, dos);

				// String

				writeString(this.formacion_titulo, dos);

				// String

				writeString(this.fechagrado, dos);

				// Integer

				writeInteger(this.id_pais_institucion_estudio, dos);

				// String

				writeString(this.titulo_convalidado, dos);

				// Integer

				writeInteger(this.id_ies_estudio, dos);

				// String

				writeString(this.nombre_institucion_estudio, dos);

				// Integer

				writeInteger(this.id_metodologia_programa, dos);

				// String

				writeString(this.fecha_ingreso, dos);

				// String

				writeString(this.aplica_decreto_1279, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("anio=" + String.valueOf(anio));
			sb.append(",semestre=" + String.valueOf(semestre));
			sb.append(",id_tipo_documento=" + id_tipo_documento);
			sb.append(",num_documento=" + num_documento);
			sb.append(",fecha_nacimiento=" + fecha_nacimiento);
			sb.append(",id_pais_nacimiento=" + id_pais_nacimiento);
			sb.append(",id_municipio_departamento=" + id_municipio_departamento);
			sb.append(",email_institucional=" + email_institucional);
			sb.append(",id_nivel_max_estudio="
					+ String.valueOf(id_nivel_max_estudio));
			sb.append(",formacion_titulo=" + formacion_titulo);
			sb.append(",fechagrado=" + fechagrado);
			sb.append(",id_pais_institucion_estudio="
					+ String.valueOf(id_pais_institucion_estudio));
			sb.append(",titulo_convalidado=" + titulo_convalidado);
			sb.append(",id_ies_estudio=" + String.valueOf(id_ies_estudio));
			sb.append(",nombre_institucion_estudio="
					+ nombre_institucion_estudio);
			sb.append(",id_metodologia_programa="
					+ String.valueOf(id_metodologia_programa));
			sb.append(",fecha_ingreso=" + fecha_ingreso);
			sb.append(",aplica_decreto_1279=" + aplica_decreto_1279);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tPostgresqlInput_1Struct implements
			routines.system.IPersistableRow<after_tPostgresqlInput_1Struct> {
		final static byte[] commonByteArrayLock_DMINDICADORES_docentes_reporte_basico = new byte[0];
		static byte[] commonByteArray_DMINDICADORES_docentes_reporte_basico = new byte[0];

		public Integer anio;

		public Integer getAnio() {
			return this.anio;
		}

		public Integer semestre;

		public Integer getSemestre() {
			return this.semestre;
		}

		public String id_tipo_documento;

		public String getId_tipo_documento() {
			return this.id_tipo_documento;
		}

		public String num_documento;

		public String getNum_documento() {
			return this.num_documento;
		}

		public String fecha_nacimiento;

		public String getFecha_nacimiento() {
			return this.fecha_nacimiento;
		}

		public String id_pais_nacimiento;

		public String getId_pais_nacimiento() {
			return this.id_pais_nacimiento;
		}

		public String id_municipio_departamento;

		public String getId_municipio_departamento() {
			return this.id_municipio_departamento;
		}

		public String email_institucional;

		public String getEmail_institucional() {
			return this.email_institucional;
		}

		public Integer id_nivel_max_estudio;

		public Integer getId_nivel_max_estudio() {
			return this.id_nivel_max_estudio;
		}

		public String formacion_titulo;

		public String getFormacion_titulo() {
			return this.formacion_titulo;
		}

		public String fechagrado;

		public String getFechagrado() {
			return this.fechagrado;
		}

		public Integer id_pais_institucion_estudio;

		public Integer getId_pais_institucion_estudio() {
			return this.id_pais_institucion_estudio;
		}

		public String titulo_convalidado;

		public String getTitulo_convalidado() {
			return this.titulo_convalidado;
		}

		public Integer id_ies_estudio;

		public Integer getId_ies_estudio() {
			return this.id_ies_estudio;
		}

		public String nombre_institucion_estudio;

		public String getNombre_institucion_estudio() {
			return this.nombre_institucion_estudio;
		}

		public Integer id_metodologia_programa;

		public Integer getId_metodologia_programa() {
			return this.id_metodologia_programa;
		}

		public String fecha_ingreso;

		public String getFecha_ingreso() {
			return this.fecha_ingreso;
		}

		public String aplica_decreto_1279;

		public String getAplica_decreto_1279() {
			return this.aplica_decreto_1279;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DMINDICADORES_docentes_reporte_basico.length) {
					if (length < 1024
							&& commonByteArray_DMINDICADORES_docentes_reporte_basico.length == 0) {
						commonByteArray_DMINDICADORES_docentes_reporte_basico = new byte[1024];
					} else {
						commonByteArray_DMINDICADORES_docentes_reporte_basico = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_DMINDICADORES_docentes_reporte_basico,
						0, length);
				strReturn = new String(
						commonByteArray_DMINDICADORES_docentes_reporte_basico,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DMINDICADORES_docentes_reporte_basico) {

				try {

					int length = 0;

					this.anio = readInteger(dis);

					this.semestre = readInteger(dis);

					this.id_tipo_documento = readString(dis);

					this.num_documento = readString(dis);

					this.fecha_nacimiento = readString(dis);

					this.id_pais_nacimiento = readString(dis);

					this.id_municipio_departamento = readString(dis);

					this.email_institucional = readString(dis);

					this.id_nivel_max_estudio = readInteger(dis);

					this.formacion_titulo = readString(dis);

					this.fechagrado = readString(dis);

					this.id_pais_institucion_estudio = readInteger(dis);

					this.titulo_convalidado = readString(dis);

					this.id_ies_estudio = readInteger(dis);

					this.nombre_institucion_estudio = readString(dis);

					this.id_metodologia_programa = readInteger(dis);

					this.fecha_ingreso = readString(dis);

					this.aplica_decreto_1279 = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.anio, dos);

				// Integer

				writeInteger(this.semestre, dos);

				// String

				writeString(this.id_tipo_documento, dos);

				// String

				writeString(this.num_documento, dos);

				// String

				writeString(this.fecha_nacimiento, dos);

				// String

				writeString(this.id_pais_nacimiento, dos);

				// String

				writeString(this.id_municipio_departamento, dos);

				// String

				writeString(this.email_institucional, dos);

				// Integer

				writeInteger(this.id_nivel_max_estudio, dos);

				// String

				writeString(this.formacion_titulo, dos);

				// String

				writeString(this.fechagrado, dos);

				// Integer

				writeInteger(this.id_pais_institucion_estudio, dos);

				// String

				writeString(this.titulo_convalidado, dos);

				// Integer

				writeInteger(this.id_ies_estudio, dos);

				// String

				writeString(this.nombre_institucion_estudio, dos);

				// Integer

				writeInteger(this.id_metodologia_programa, dos);

				// String

				writeString(this.fecha_ingreso, dos);

				// String

				writeString(this.aplica_decreto_1279, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("anio=" + String.valueOf(anio));
			sb.append(",semestre=" + String.valueOf(semestre));
			sb.append(",id_tipo_documento=" + id_tipo_documento);
			sb.append(",num_documento=" + num_documento);
			sb.append(",fecha_nacimiento=" + fecha_nacimiento);
			sb.append(",id_pais_nacimiento=" + id_pais_nacimiento);
			sb.append(",id_municipio_departamento=" + id_municipio_departamento);
			sb.append(",email_institucional=" + email_institucional);
			sb.append(",id_nivel_max_estudio="
					+ String.valueOf(id_nivel_max_estudio));
			sb.append(",formacion_titulo=" + formacion_titulo);
			sb.append(",fechagrado=" + fechagrado);
			sb.append(",id_pais_institucion_estudio="
					+ String.valueOf(id_pais_institucion_estudio));
			sb.append(",titulo_convalidado=" + titulo_convalidado);
			sb.append(",id_ies_estudio=" + String.valueOf(id_ies_estudio));
			sb.append(",nombre_institucion_estudio="
					+ nombre_institucion_estudio);
			sb.append(",id_metodologia_programa="
					+ String.valueOf(id_metodologia_programa));
			sb.append(",fecha_ingreso=" + fecha_ingreso);
			sb.append(",aplica_decreto_1279=" + aplica_decreto_1279);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tPostgresqlInput_1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tPostgresqlInput_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				tMysqlInput_1Process(globalMap);

				row1Struct row1 = new row1Struct();
				informacion_basicaStruct informacion_basica = new informacion_basicaStruct();

				/**
				 * [tPostgresqlOutput_1 begin ] start
				 */

				ok_Hash.put("tPostgresqlOutput_1", false);
				start_Hash.put("tPostgresqlOutput_1",
						System.currentTimeMillis());

				currentComponent = "tPostgresqlOutput_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("informacion_basica"
								+ iterateId, 0, 0);

					}
				}

				int tos_count_tPostgresqlOutput_1 = 0;

				String dbschema_tPostgresqlOutput_1 = null;
				dbschema_tPostgresqlOutput_1 = "public";

				String tableName_tPostgresqlOutput_1 = null;
				if (dbschema_tPostgresqlOutput_1 == null
						|| dbschema_tPostgresqlOutput_1.trim().length() == 0) {
					tableName_tPostgresqlOutput_1 = "snies_docentes_basico";
				} else {
					tableName_tPostgresqlOutput_1 = dbschema_tPostgresqlOutput_1
							+ "\".\"" + "snies_docentes_basico";
				}

				int nb_line_tPostgresqlOutput_1 = 0;
				int nb_line_update_tPostgresqlOutput_1 = 0;
				int nb_line_inserted_tPostgresqlOutput_1 = 0;
				int nb_line_deleted_tPostgresqlOutput_1 = 0;
				int nb_line_rejected_tPostgresqlOutput_1 = 0;

				int deletedCount_tPostgresqlOutput_1 = 0;
				int updatedCount_tPostgresqlOutput_1 = 0;
				int insertedCount_tPostgresqlOutput_1 = 0;
				int rejectedCount_tPostgresqlOutput_1 = 0;

				boolean whetherReject_tPostgresqlOutput_1 = false;

				java.sql.Connection conn_tPostgresqlOutput_1 = null;
				String dbUser_tPostgresqlOutput_1 = null;

				java.lang.Class.forName("org.postgresql.Driver");
				String url_tPostgresqlOutput_1 = "jdbc:postgresql://"
						+ "10.20.0.88" + ":" + "5432" + "/" + "DMINDICADORES";
				dbUser_tPostgresqlOutput_1 = "postgres";

				final String decryptedPassword_tPostgresqlOutput_1 = routines.system.PasswordEncryptUtil
						.decryptPassword("610243e4ca33e325f4f7aba1746784ea");

				String dbPwd_tPostgresqlOutput_1 = decryptedPassword_tPostgresqlOutput_1;

				conn_tPostgresqlOutput_1 = java.sql.DriverManager
						.getConnection(url_tPostgresqlOutput_1,
								dbUser_tPostgresqlOutput_1,
								dbPwd_tPostgresqlOutput_1);

				resourceMap.put("conn_tPostgresqlOutput_1",
						conn_tPostgresqlOutput_1);
				conn_tPostgresqlOutput_1.setAutoCommit(false);
				int commitEvery_tPostgresqlOutput_1 = 10000;
				int commitCounter_tPostgresqlOutput_1 = 0;

				int batchSize_tPostgresqlOutput_1 = 10000;
				int batchSizeCounter_tPostgresqlOutput_1 = 0;

				int count_tPostgresqlOutput_1 = 0;
				java.sql.DatabaseMetaData dbMetaData_tPostgresqlOutput_1 = conn_tPostgresqlOutput_1
						.getMetaData();
				boolean whetherExist_tPostgresqlOutput_1 = false;
				try (java.sql.ResultSet rsTable_tPostgresqlOutput_1 = dbMetaData_tPostgresqlOutput_1
						.getTables(null, null, null, new String[] { "TABLE" })) {
					String defaultSchema_tPostgresqlOutput_1 = "public";
					if (dbschema_tPostgresqlOutput_1 == null
							|| dbschema_tPostgresqlOutput_1.trim().length() == 0) {
						try (java.sql.Statement stmtSchema_tPostgresqlOutput_1 = conn_tPostgresqlOutput_1
								.createStatement();
								java.sql.ResultSet rsSchema_tPostgresqlOutput_1 = stmtSchema_tPostgresqlOutput_1
										.executeQuery("select current_schema() ")) {
							while (rsSchema_tPostgresqlOutput_1.next()) {
								defaultSchema_tPostgresqlOutput_1 = rsSchema_tPostgresqlOutput_1
										.getString("current_schema");
							}
						}
					}
					while (rsTable_tPostgresqlOutput_1.next()) {
						String table_tPostgresqlOutput_1 = rsTable_tPostgresqlOutput_1
								.getString("TABLE_NAME");
						String schema_tPostgresqlOutput_1 = rsTable_tPostgresqlOutput_1
								.getString("TABLE_SCHEM");
						if (table_tPostgresqlOutput_1
								.equals("snies_docentes_basico")
								&& (schema_tPostgresqlOutput_1
										.equals(dbschema_tPostgresqlOutput_1) || ((dbschema_tPostgresqlOutput_1 == null || dbschema_tPostgresqlOutput_1
										.trim().length() == 0) && defaultSchema_tPostgresqlOutput_1
										.equals(schema_tPostgresqlOutput_1)))) {
							whetherExist_tPostgresqlOutput_1 = true;
							break;
						}
					}
				}
				if (!whetherExist_tPostgresqlOutput_1) {
					try (java.sql.Statement stmtCreate_tPostgresqlOutput_1 = conn_tPostgresqlOutput_1
							.createStatement()) {
						stmtCreate_tPostgresqlOutput_1
								.execute("CREATE TABLE \""
										+ tableName_tPostgresqlOutput_1
										+ "\"(\"anio\" INT4 ,\"semestre\" INT4 ,\"id_tipo_documento\" VARCHAR(2)  ,\"num_documento\" VARCHAR(30)  ,\"fecha_nacimiento\" VARCHAR(10)  ,\"id_pais_nacimiento\" VARCHAR(3)  ,\"id_municipio_departamento\" VARCHAR(3)  ,\"email_institucional\" VARCHAR(3)  ,\"id_nivel_max_estudio\" INT4 ,\"formacion_titulo\" VARCHAR(500)  ,\"fechagrado\" VARCHAR(10)  ,\"id_pais_institucion_estudio\" INT4 ,\"titulo_convalidado\" VARCHAR(3)  ,\"id_ies_estudio\" INT4 ,\"nombre_institucion_estudio\" VARCHAR(255)  ,\"id_metodologia_programa\" INT4 ,\"fecha_ingreso\" VARCHAR(10)  ,\"aplica_decreto_1279\" VARCHAR(1)  )");
					}
				}
				String insert_tPostgresqlOutput_1 = "INSERT INTO \""
						+ tableName_tPostgresqlOutput_1
						+ "\" (\"anio\",\"semestre\",\"id_tipo_documento\",\"num_documento\",\"fecha_nacimiento\",\"id_pais_nacimiento\",\"id_municipio_departamento\",\"email_institucional\",\"id_nivel_max_estudio\",\"formacion_titulo\",\"fechagrado\",\"id_pais_institucion_estudio\",\"titulo_convalidado\",\"id_ies_estudio\",\"nombre_institucion_estudio\",\"id_metodologia_programa\",\"fecha_ingreso\",\"aplica_decreto_1279\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tPostgresqlOutput_1 = conn_tPostgresqlOutput_1
						.prepareStatement(insert_tPostgresqlOutput_1);
				resourceMap.put("pstmt_tPostgresqlOutput_1",
						pstmt_tPostgresqlOutput_1);

				/**
				 * [tPostgresqlOutput_1 begin ] stop
				 */

				/**
				 * [tMap_3 begin ] start
				 */

				ok_Hash.put("tMap_3", false);
				start_Hash.put("tMap_3", System.currentTimeMillis());

				currentComponent = "tMap_3";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row1" + iterateId, 0, 0);

					}
				}

				int tos_count_tMap_3 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) globalMap
						.get("tHash_Lookup_row2"));

				row2Struct row2HashKey = new row2Struct();
				row2Struct row2Default = new row2Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_3__Struct {
				}
				Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				informacion_basicaStruct informacion_basica_tmp = new informacion_basicaStruct();
				// ###############################

				/**
				 * [tMap_3 begin ] stop
				 */

				/**
				 * [tPostgresqlInput_1 begin ] start
				 */

				ok_Hash.put("tPostgresqlInput_1", false);
				start_Hash
						.put("tPostgresqlInput_1", System.currentTimeMillis());

				currentComponent = "tPostgresqlInput_1";

				int tos_count_tPostgresqlInput_1 = 0;

				int nb_line_tPostgresqlInput_1 = 0;
				java.sql.Connection conn_tPostgresqlInput_1 = null;
				String driverClass_tPostgresqlInput_1 = "org.postgresql.Driver";
				java.lang.Class.forName(driverClass_tPostgresqlInput_1);
				String dbUser_tPostgresqlInput_1 = "postgres";

				final String decryptedPassword_tPostgresqlInput_1 = routines.system.PasswordEncryptUtil
						.decryptPassword("610243e4ca33e325f4f7aba1746784ea");

				String dbPwd_tPostgresqlInput_1 = decryptedPassword_tPostgresqlInput_1;

				String url_tPostgresqlInput_1 = "jdbc:postgresql://"
						+ "10.20.0.88" + ":" + "5432" + "/" + "DMINDICADORES";

				conn_tPostgresqlInput_1 = java.sql.DriverManager.getConnection(
						url_tPostgresqlInput_1, dbUser_tPostgresqlInput_1,
						dbPwd_tPostgresqlInput_1);

				conn_tPostgresqlInput_1.setAutoCommit(false);

				java.sql.Statement stmt_tPostgresqlInput_1 = conn_tPostgresqlInput_1
						.createStatement();

				String dbquery_tPostgresqlInput_1 = "SELECT DISTINCT  ds.anio, ds.semestre, ds.id_tipo_documento, ds.num_documento,'' fecha_nacimiento, '' id_pais_nacimient"
						+ "o, '' id_municipio_departamento, '' email_institucional, CASE \nWHEN dp.formacion_nivel='Doctor' THEN 2 \nWHEN dp.formacio"
						+ "n_nivel='Magister' THEN 3 \nWHEN dp.formacion_nivel='Especialista' THEN 4\nWHEN dp.formacion_nivel='Profesional' THEN 7\nWH"
						+ "EN dp.formacion_nivel='Tecnologo' THEN 8\nELSE 7 END id_nivel_max_estudio, formacion_titulo, 'fechagrado mysql' fechagrad"
						+ "o,170 id_pais_institucion_estudio,'N' titulo_convalidado, 1301 id_ies_estudio, 'NA' nombre_institucion_estudio, 1 id_met"
						+ "odologia_programa, 'fecha_ingreso_mysql' fecha_ingreso,'N' aplica_decreto_1279\n  FROM docentes_proyecto dp\n  inner join "
						+ "docentes_snies_2017 ds on dp.codigo_docente::VARCHAR = ds.num_documento\n  where dp.anno=2018 and dp.semestre=3";

				globalMap.put("tPostgresqlInput_1_QUERY",
						dbquery_tPostgresqlInput_1);
				java.sql.ResultSet rs_tPostgresqlInput_1 = null;

				try {
					rs_tPostgresqlInput_1 = stmt_tPostgresqlInput_1
							.executeQuery(dbquery_tPostgresqlInput_1);
					java.sql.ResultSetMetaData rsmd_tPostgresqlInput_1 = rs_tPostgresqlInput_1
							.getMetaData();
					int colQtyInRs_tPostgresqlInput_1 = rsmd_tPostgresqlInput_1
							.getColumnCount();

					String tmpContent_tPostgresqlInput_1 = null;

					while (rs_tPostgresqlInput_1.next()) {
						nb_line_tPostgresqlInput_1++;

						if (colQtyInRs_tPostgresqlInput_1 < 1) {
							row1.anio = null;
						} else {

							if (rs_tPostgresqlInput_1.getObject(1) != null) {
								row1.anio = rs_tPostgresqlInput_1.getInt(1);
							} else {
								row1.anio = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_1 < 2) {
							row1.semestre = null;
						} else {

							if (rs_tPostgresqlInput_1.getObject(2) != null) {
								row1.semestre = rs_tPostgresqlInput_1.getInt(2);
							} else {
								row1.semestre = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_1 < 3) {
							row1.id_tipo_documento = null;
						} else {

							row1.id_tipo_documento = routines.system.JDBCUtil
									.getString(rs_tPostgresqlInput_1, 3, false);
						}
						if (colQtyInRs_tPostgresqlInput_1 < 4) {
							row1.num_documento = null;
						} else {

							row1.num_documento = routines.system.JDBCUtil
									.getString(rs_tPostgresqlInput_1, 4, false);
						}
						if (colQtyInRs_tPostgresqlInput_1 < 5) {
							row1.fecha_nacimiento = null;
						} else {

							row1.fecha_nacimiento = routines.system.JDBCUtil
									.getString(rs_tPostgresqlInput_1, 5, false);
						}
						if (colQtyInRs_tPostgresqlInput_1 < 6) {
							row1.id_pais_nacimiento = null;
						} else {

							row1.id_pais_nacimiento = routines.system.JDBCUtil
									.getString(rs_tPostgresqlInput_1, 6, false);
						}
						if (colQtyInRs_tPostgresqlInput_1 < 7) {
							row1.id_municipio_departamento = null;
						} else {

							row1.id_municipio_departamento = routines.system.JDBCUtil
									.getString(rs_tPostgresqlInput_1, 7, false);
						}
						if (colQtyInRs_tPostgresqlInput_1 < 8) {
							row1.email_institucional = null;
						} else {

							row1.email_institucional = routines.system.JDBCUtil
									.getString(rs_tPostgresqlInput_1, 8, false);
						}
						if (colQtyInRs_tPostgresqlInput_1 < 9) {
							row1.id_nivel_max_estudio = null;
						} else {

							if (rs_tPostgresqlInput_1.getObject(9) != null) {
								row1.id_nivel_max_estudio = rs_tPostgresqlInput_1
										.getInt(9);
							} else {
								row1.id_nivel_max_estudio = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_1 < 10) {
							row1.formacion_titulo = null;
						} else {

							row1.formacion_titulo = routines.system.JDBCUtil
									.getString(rs_tPostgresqlInput_1, 10, false);
						}
						if (colQtyInRs_tPostgresqlInput_1 < 11) {
							row1.fechagrado = null;
						} else {

							row1.fechagrado = routines.system.JDBCUtil
									.getString(rs_tPostgresqlInput_1, 11, false);
						}
						if (colQtyInRs_tPostgresqlInput_1 < 12) {
							row1.id_pais_institucion_estudio = null;
						} else {

							if (rs_tPostgresqlInput_1.getObject(12) != null) {
								row1.id_pais_institucion_estudio = rs_tPostgresqlInput_1
										.getInt(12);
							} else {
								row1.id_pais_institucion_estudio = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_1 < 13) {
							row1.titulo_convalidado = null;
						} else {

							row1.titulo_convalidado = routines.system.JDBCUtil
									.getString(rs_tPostgresqlInput_1, 13, false);
						}
						if (colQtyInRs_tPostgresqlInput_1 < 14) {
							row1.id_ies_estudio = null;
						} else {

							if (rs_tPostgresqlInput_1.getObject(14) != null) {
								row1.id_ies_estudio = rs_tPostgresqlInput_1
										.getInt(14);
							} else {
								row1.id_ies_estudio = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_1 < 15) {
							row1.nombre_institucion_estudio = null;
						} else {

							row1.nombre_institucion_estudio = routines.system.JDBCUtil
									.getString(rs_tPostgresqlInput_1, 15, false);
						}
						if (colQtyInRs_tPostgresqlInput_1 < 16) {
							row1.id_metodologia_programa = null;
						} else {

							if (rs_tPostgresqlInput_1.getObject(16) != null) {
								row1.id_metodologia_programa = rs_tPostgresqlInput_1
										.getInt(16);
							} else {
								row1.id_metodologia_programa = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_1 < 17) {
							row1.fecha_ingreso = null;
						} else {

							row1.fecha_ingreso = routines.system.JDBCUtil
									.getString(rs_tPostgresqlInput_1, 17, false);
						}
						if (colQtyInRs_tPostgresqlInput_1 < 18) {
							row1.aplica_decreto_1279 = null;
						} else {

							row1.aplica_decreto_1279 = routines.system.JDBCUtil
									.getString(rs_tPostgresqlInput_1, 18, false);
						}

						/**
						 * [tPostgresqlInput_1 begin ] stop
						 */

						/**
						 * [tPostgresqlInput_1 main ] start
						 */

						currentComponent = "tPostgresqlInput_1";

						tos_count_tPostgresqlInput_1++;

						/**
						 * [tPostgresqlInput_1 main ] stop
						 */

						/**
						 * [tPostgresqlInput_1 process_data_begin ] start
						 */

						currentComponent = "tPostgresqlInput_1";

						/**
						 * [tPostgresqlInput_1 process_data_begin ] stop
						 */

						/**
						 * [tMap_3 main ] start
						 */

						currentComponent = "tMap_3";

						// row1
						// row1

						if (execStat) {
							runStat.updateStatOnConnection("row1" + iterateId,
									1, 1);
						}

						boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_3 = false;
						boolean mainRowRejected_tMap_3 = false;

						// /////////////////////////////////////////////
						// Starting Lookup Table "row2"
						// /////////////////////////////////////////////

						boolean forceLooprow2 = false;

						row2Struct row2ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_3) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_3 = false;

							row2HashKey.CC = row1.num_documento;

							row2HashKey.titulo = row1.formacion_titulo;

							row2HashKey.hashCodeDirty = true;

							tHash_Lookup_row2.lookup(row2HashKey);

						} // G_TM_M_020

						if (tHash_Lookup_row2 != null
								&& tHash_Lookup_row2.getCount(row2HashKey) > 1) { // G
																					// 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row2' and it contains more one result from keys :  row2.CC = '"
							// + row2HashKey.CC + "', row2.titulo = '" +
							// row2HashKey.titulo + "'");
						} // G 071

						row2Struct row2 = null;

						row2Struct fromLookup_row2 = null;
						row2 = row2Default;

						if (tHash_Lookup_row2 != null
								&& tHash_Lookup_row2.hasNext()) { // G 099

							fromLookup_row2 = tHash_Lookup_row2.next();

						} // G 099

						if (fromLookup_row2 != null) {
							row2 = fromLookup_row2;
						}

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
							// ###############################
							// # Output tables

							informacion_basica = null;

							// # Output table : 'informacion_basica'
							informacion_basica_tmp.anio = row1.anio;
							informacion_basica_tmp.semestre = row1.semestre;
							informacion_basica_tmp.id_tipo_documento = row1.id_tipo_documento;
							informacion_basica_tmp.num_documento = row1.num_documento;
							informacion_basica_tmp.fecha_nacimiento = row1.fecha_nacimiento;
							informacion_basica_tmp.id_pais_nacimiento = row1.id_pais_nacimiento;
							informacion_basica_tmp.id_municipio_departamento = row1.id_municipio_departamento;
							informacion_basica_tmp.email_institucional = row1.email_institucional;
							informacion_basica_tmp.id_nivel_max_estudio = row1.id_nivel_max_estudio;
							informacion_basica_tmp.formacion_titulo = row1.formacion_titulo;
							informacion_basica_tmp.fechagrado = row2.fecha != null ? TalendDate
									.formatDate("dd/MM/yyyy", row2.fecha)
									: null;
							informacion_basica_tmp.id_pais_institucion_estudio = row1.id_pais_institucion_estudio;
							informacion_basica_tmp.titulo_convalidado = row1.titulo_convalidado;
							informacion_basica_tmp.id_ies_estudio = row1.id_ies_estudio;
							informacion_basica_tmp.nombre_institucion_estudio = row1.nombre_institucion_estudio;
							informacion_basica_tmp.id_metodologia_programa = row1.id_metodologia_programa;
							informacion_basica_tmp.fecha_ingreso = row2.FechaPose != null ? TalendDate
									.formatDate("dd/MM/yyyy", row2.FechaPose)
									: null;
							informacion_basica_tmp.aplica_decreto_1279 = row1.aplica_decreto_1279;
							informacion_basica = informacion_basica_tmp;
							// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_3 = false;

						tos_count_tMap_3++;

						/**
						 * [tMap_3 main ] stop
						 */

						/**
						 * [tMap_3 process_data_begin ] start
						 */

						currentComponent = "tMap_3";

						/**
						 * [tMap_3 process_data_begin ] stop
						 */
						// Start of branch "informacion_basica"
						if (informacion_basica != null) {

							/**
							 * [tPostgresqlOutput_1 main ] start
							 */

							currentComponent = "tPostgresqlOutput_1";

							// informacion_basica
							// informacion_basica

							if (execStat) {
								runStat.updateStatOnConnection(
										"informacion_basica" + iterateId, 1, 1);
							}

							whetherReject_tPostgresqlOutput_1 = false;
							if (informacion_basica.anio == null) {
								pstmt_tPostgresqlOutput_1.setNull(1,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tPostgresqlOutput_1.setInt(1,
										informacion_basica.anio);
							}

							if (informacion_basica.semestre == null) {
								pstmt_tPostgresqlOutput_1.setNull(2,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tPostgresqlOutput_1.setInt(2,
										informacion_basica.semestre);
							}

							if (informacion_basica.id_tipo_documento == null) {
								pstmt_tPostgresqlOutput_1.setNull(3,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tPostgresqlOutput_1.setString(3,
										informacion_basica.id_tipo_documento);
							}

							if (informacion_basica.num_documento == null) {
								pstmt_tPostgresqlOutput_1.setNull(4,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tPostgresqlOutput_1.setString(4,
										informacion_basica.num_documento);
							}

							if (informacion_basica.fecha_nacimiento == null) {
								pstmt_tPostgresqlOutput_1.setNull(5,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tPostgresqlOutput_1.setString(5,
										informacion_basica.fecha_nacimiento);
							}

							if (informacion_basica.id_pais_nacimiento == null) {
								pstmt_tPostgresqlOutput_1.setNull(6,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tPostgresqlOutput_1.setString(6,
										informacion_basica.id_pais_nacimiento);
							}

							if (informacion_basica.id_municipio_departamento == null) {
								pstmt_tPostgresqlOutput_1.setNull(7,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tPostgresqlOutput_1
										.setString(
												7,
												informacion_basica.id_municipio_departamento);
							}

							if (informacion_basica.email_institucional == null) {
								pstmt_tPostgresqlOutput_1.setNull(8,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tPostgresqlOutput_1.setString(8,
										informacion_basica.email_institucional);
							}

							if (informacion_basica.id_nivel_max_estudio == null) {
								pstmt_tPostgresqlOutput_1.setNull(9,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tPostgresqlOutput_1
										.setInt(9,
												informacion_basica.id_nivel_max_estudio);
							}

							if (informacion_basica.formacion_titulo == null) {
								pstmt_tPostgresqlOutput_1.setNull(10,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tPostgresqlOutput_1.setString(10,
										informacion_basica.formacion_titulo);
							}

							if (informacion_basica.fechagrado == null) {
								pstmt_tPostgresqlOutput_1.setNull(11,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tPostgresqlOutput_1.setString(11,
										informacion_basica.fechagrado);
							}

							if (informacion_basica.id_pais_institucion_estudio == null) {
								pstmt_tPostgresqlOutput_1.setNull(12,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tPostgresqlOutput_1
										.setInt(12,
												informacion_basica.id_pais_institucion_estudio);
							}

							if (informacion_basica.titulo_convalidado == null) {
								pstmt_tPostgresqlOutput_1.setNull(13,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tPostgresqlOutput_1.setString(13,
										informacion_basica.titulo_convalidado);
							}

							if (informacion_basica.id_ies_estudio == null) {
								pstmt_tPostgresqlOutput_1.setNull(14,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tPostgresqlOutput_1.setInt(14,
										informacion_basica.id_ies_estudio);
							}

							if (informacion_basica.nombre_institucion_estudio == null) {
								pstmt_tPostgresqlOutput_1.setNull(15,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tPostgresqlOutput_1
										.setString(
												15,
												informacion_basica.nombre_institucion_estudio);
							}

							if (informacion_basica.id_metodologia_programa == null) {
								pstmt_tPostgresqlOutput_1.setNull(16,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tPostgresqlOutput_1
										.setInt(16,
												informacion_basica.id_metodologia_programa);
							}

							if (informacion_basica.fecha_ingreso == null) {
								pstmt_tPostgresqlOutput_1.setNull(17,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tPostgresqlOutput_1.setString(17,
										informacion_basica.fecha_ingreso);
							}

							if (informacion_basica.aplica_decreto_1279 == null) {
								pstmt_tPostgresqlOutput_1.setNull(18,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tPostgresqlOutput_1.setString(18,
										informacion_basica.aplica_decreto_1279);
							}

							pstmt_tPostgresqlOutput_1.addBatch();
							nb_line_tPostgresqlOutput_1++;

							batchSizeCounter_tPostgresqlOutput_1++;

							if ((batchSize_tPostgresqlOutput_1 > 0)
									&& (batchSize_tPostgresqlOutput_1 <= batchSizeCounter_tPostgresqlOutput_1)) {
								try {
									int countSum_tPostgresqlOutput_1 = 0;

									for (int countEach_tPostgresqlOutput_1 : pstmt_tPostgresqlOutput_1
											.executeBatch()) {
										countSum_tPostgresqlOutput_1 += (countEach_tPostgresqlOutput_1 < 0 ? 0
												: countEach_tPostgresqlOutput_1);
									}

									insertedCount_tPostgresqlOutput_1 += countSum_tPostgresqlOutput_1;

									batchSizeCounter_tPostgresqlOutput_1 = 0;
								} catch (java.sql.BatchUpdateException e_tPostgresqlOutput_1) {
									java.sql.SQLException ne_tPostgresqlOutput_1 = e_tPostgresqlOutput_1
											.getNextException(), sqle_tPostgresqlOutput_1 = null;
									String errormessage_tPostgresqlOutput_1;
									if (ne_tPostgresqlOutput_1 != null) {
										// build new exception to provide the
										// original cause
										sqle_tPostgresqlOutput_1 = new java.sql.SQLException(
												e_tPostgresqlOutput_1
														.getMessage()
														+ "\ncaused by: "
														+ ne_tPostgresqlOutput_1
																.getMessage(),
												ne_tPostgresqlOutput_1
														.getSQLState(),
												ne_tPostgresqlOutput_1
														.getErrorCode(),
												ne_tPostgresqlOutput_1);
										errormessage_tPostgresqlOutput_1 = sqle_tPostgresqlOutput_1
												.getMessage();
									} else {
										errormessage_tPostgresqlOutput_1 = e_tPostgresqlOutput_1
												.getMessage();
									}

									if (ne_tPostgresqlOutput_1 != null) {
										throw (sqle_tPostgresqlOutput_1);
									} else {
										throw (e_tPostgresqlOutput_1);
									}

								}
							}

							commitCounter_tPostgresqlOutput_1++;
							if (commitEvery_tPostgresqlOutput_1 <= commitCounter_tPostgresqlOutput_1) {
								if ((batchSize_tPostgresqlOutput_1 > 0)
										&& (batchSizeCounter_tPostgresqlOutput_1 > 0)) {
									try {
										int countSum_tPostgresqlOutput_1 = 0;

										for (int countEach_tPostgresqlOutput_1 : pstmt_tPostgresqlOutput_1
												.executeBatch()) {
											countSum_tPostgresqlOutput_1 += (countEach_tPostgresqlOutput_1 < 0 ? 0
													: countEach_tPostgresqlOutput_1);
										}

										insertedCount_tPostgresqlOutput_1 += countSum_tPostgresqlOutput_1;

										batchSizeCounter_tPostgresqlOutput_1 = 0;
									} catch (java.sql.BatchUpdateException e_tPostgresqlOutput_1) {
										java.sql.SQLException ne_tPostgresqlOutput_1 = e_tPostgresqlOutput_1
												.getNextException(), sqle_tPostgresqlOutput_1 = null;
										String errormessage_tPostgresqlOutput_1;
										if (ne_tPostgresqlOutput_1 != null) {
											// build new exception to provide
											// the original cause
											sqle_tPostgresqlOutput_1 = new java.sql.SQLException(
													e_tPostgresqlOutput_1
															.getMessage()
															+ "\ncaused by: "
															+ ne_tPostgresqlOutput_1
																	.getMessage(),
													ne_tPostgresqlOutput_1
															.getSQLState(),
													ne_tPostgresqlOutput_1
															.getErrorCode(),
													ne_tPostgresqlOutput_1);
											errormessage_tPostgresqlOutput_1 = sqle_tPostgresqlOutput_1
													.getMessage();
										} else {
											errormessage_tPostgresqlOutput_1 = e_tPostgresqlOutput_1
													.getMessage();
										}

										if (ne_tPostgresqlOutput_1 != null) {
											throw (sqle_tPostgresqlOutput_1);
										} else {
											throw (e_tPostgresqlOutput_1);
										}

									}
								}
								conn_tPostgresqlOutput_1.commit();

								commitCounter_tPostgresqlOutput_1 = 0;
							}

							tos_count_tPostgresqlOutput_1++;

							/**
							 * [tPostgresqlOutput_1 main ] stop
							 */

							/**
							 * [tPostgresqlOutput_1 process_data_begin ] start
							 */

							currentComponent = "tPostgresqlOutput_1";

							/**
							 * [tPostgresqlOutput_1 process_data_begin ] stop
							 */

							/**
							 * [tPostgresqlOutput_1 process_data_end ] start
							 */

							currentComponent = "tPostgresqlOutput_1";

							/**
							 * [tPostgresqlOutput_1 process_data_end ] stop
							 */

						} // End of branch "informacion_basica"

						/**
						 * [tMap_3 process_data_end ] start
						 */

						currentComponent = "tMap_3";

						/**
						 * [tMap_3 process_data_end ] stop
						 */

						/**
						 * [tPostgresqlInput_1 process_data_end ] start
						 */

						currentComponent = "tPostgresqlInput_1";

						/**
						 * [tPostgresqlInput_1 process_data_end ] stop
						 */

						/**
						 * [tPostgresqlInput_1 end ] start
						 */

						currentComponent = "tPostgresqlInput_1";

					}
				} finally {
					if (rs_tPostgresqlInput_1 != null) {
						rs_tPostgresqlInput_1.close();
					}
					if (stmt_tPostgresqlInput_1 != null) {
						stmt_tPostgresqlInput_1.close();
					}
					if (conn_tPostgresqlInput_1 != null
							&& !conn_tPostgresqlInput_1.isClosed()) {

						conn_tPostgresqlInput_1.commit();

						conn_tPostgresqlInput_1.close();

					}

				}
				globalMap.put("tPostgresqlInput_1_NB_LINE",
						nb_line_tPostgresqlInput_1);

				ok_Hash.put("tPostgresqlInput_1", true);
				end_Hash.put("tPostgresqlInput_1", System.currentTimeMillis());

				/**
				 * [tPostgresqlInput_1 end ] stop
				 */

				/**
				 * [tMap_3 end ] start
				 */

				currentComponent = "tMap_3";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row2 != null) {
					tHash_Lookup_row2.endGet();
				}
				globalMap.remove("tHash_Lookup_row2");

				// ###############################

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row1" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tMap_3", true);
				end_Hash.put("tMap_3", System.currentTimeMillis());

				/**
				 * [tMap_3 end ] stop
				 */

				/**
				 * [tPostgresqlOutput_1 end ] start
				 */

				currentComponent = "tPostgresqlOutput_1";

				try {
					int countSum_tPostgresqlOutput_1 = 0;
					if (pstmt_tPostgresqlOutput_1 != null
							&& batchSizeCounter_tPostgresqlOutput_1 > 0) {

						for (int countEach_tPostgresqlOutput_1 : pstmt_tPostgresqlOutput_1
								.executeBatch()) {
							countSum_tPostgresqlOutput_1 += (countEach_tPostgresqlOutput_1 < 0 ? 0
									: countEach_tPostgresqlOutput_1);
						}

					}

					insertedCount_tPostgresqlOutput_1 += countSum_tPostgresqlOutput_1;

				} catch (java.sql.BatchUpdateException e_tPostgresqlOutput_1) {
					java.sql.SQLException ne_tPostgresqlOutput_1 = e_tPostgresqlOutput_1
							.getNextException(), sqle_tPostgresqlOutput_1 = null;
					String errormessage_tPostgresqlOutput_1;
					if (ne_tPostgresqlOutput_1 != null) {
						// build new exception to provide the original cause
						sqle_tPostgresqlOutput_1 = new java.sql.SQLException(
								e_tPostgresqlOutput_1.getMessage()
										+ "\ncaused by: "
										+ ne_tPostgresqlOutput_1.getMessage(),
								ne_tPostgresqlOutput_1.getSQLState(),
								ne_tPostgresqlOutput_1.getErrorCode(),
								ne_tPostgresqlOutput_1);
						errormessage_tPostgresqlOutput_1 = sqle_tPostgresqlOutput_1
								.getMessage();
					} else {
						errormessage_tPostgresqlOutput_1 = e_tPostgresqlOutput_1
								.getMessage();
					}

					if (ne_tPostgresqlOutput_1 != null) {
						throw (sqle_tPostgresqlOutput_1);
					} else {
						throw (e_tPostgresqlOutput_1);
					}

				}

				if (pstmt_tPostgresqlOutput_1 != null) {

					pstmt_tPostgresqlOutput_1.close();
					resourceMap.remove("pstmt_tPostgresqlOutput_1");
				}
				resourceMap.put("statementClosed_tPostgresqlOutput_1", true);

				conn_tPostgresqlOutput_1.commit();

				conn_tPostgresqlOutput_1.close();

				resourceMap.put("finish_tPostgresqlOutput_1", true);

				nb_line_deleted_tPostgresqlOutput_1 = nb_line_deleted_tPostgresqlOutput_1
						+ deletedCount_tPostgresqlOutput_1;
				nb_line_update_tPostgresqlOutput_1 = nb_line_update_tPostgresqlOutput_1
						+ updatedCount_tPostgresqlOutput_1;
				nb_line_inserted_tPostgresqlOutput_1 = nb_line_inserted_tPostgresqlOutput_1
						+ insertedCount_tPostgresqlOutput_1;
				nb_line_rejected_tPostgresqlOutput_1 = nb_line_rejected_tPostgresqlOutput_1
						+ rejectedCount_tPostgresqlOutput_1;

				globalMap.put("tPostgresqlOutput_1_NB_LINE",
						nb_line_tPostgresqlOutput_1);
				globalMap.put("tPostgresqlOutput_1_NB_LINE_UPDATED",
						nb_line_update_tPostgresqlOutput_1);
				globalMap.put("tPostgresqlOutput_1_NB_LINE_INSERTED",
						nb_line_inserted_tPostgresqlOutput_1);
				globalMap.put("tPostgresqlOutput_1_NB_LINE_DELETED",
						nb_line_deleted_tPostgresqlOutput_1);
				globalMap.put("tPostgresqlOutput_1_NB_LINE_REJECTED",
						nb_line_rejected_tPostgresqlOutput_1);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("informacion_basica"
								+ iterateId, 2, 0);
					}
				}

				ok_Hash.put("tPostgresqlOutput_1", true);
				end_Hash.put("tPostgresqlOutput_1", System.currentTimeMillis());

				/**
				 * [tPostgresqlOutput_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tMap_3"
			globalMap.remove("tHash_Lookup_row2");

			try {

				/**
				 * [tPostgresqlInput_1 finally ] start
				 */

				currentComponent = "tPostgresqlInput_1";

				/**
				 * [tPostgresqlInput_1 finally ] stop
				 */

				/**
				 * [tMap_3 finally ] start
				 */

				currentComponent = "tMap_3";

				/**
				 * [tMap_3 finally ] stop
				 */

				/**
				 * [tPostgresqlOutput_1 finally ] start
				 */

				currentComponent = "tPostgresqlOutput_1";

				try {
					if (resourceMap.get("statementClosed_tPostgresqlOutput_1") == null) {
						java.sql.PreparedStatement pstmtToClose_tPostgresqlOutput_1 = null;
						if ((pstmtToClose_tPostgresqlOutput_1 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tPostgresqlOutput_1")) != null) {
							pstmtToClose_tPostgresqlOutput_1.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tPostgresqlOutput_1") == null) {
						java.sql.Connection ctn_tPostgresqlOutput_1 = null;
						if ((ctn_tPostgresqlOutput_1 = (java.sql.Connection) resourceMap
								.get("conn_tPostgresqlOutput_1")) != null) {
							try {
								ctn_tPostgresqlOutput_1.close();
							} catch (java.sql.SQLException sqlEx_tPostgresqlOutput_1) {
								String errorMessage_tPostgresqlOutput_1 = "failed to close the connection in tPostgresqlOutput_1 :"
										+ sqlEx_tPostgresqlOutput_1
												.getMessage();
								System.err
										.println(errorMessage_tPostgresqlOutput_1);
							}
						}
					}
				}

				/**
				 * [tPostgresqlOutput_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostgresqlInput_1_SUBPROCESS_STATE", 1);
	}

	public static class row2Struct implements
			routines.system.IPersistableComparableLookupRow<row2Struct> {
		final static byte[] commonByteArrayLock_DMINDICADORES_docentes_reporte_basico = new byte[0];
		static byte[] commonByteArray_DMINDICADORES_docentes_reporte_basico = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String CC;

		public String getCC() {
			return this.CC;
		}

		public java.util.Date FechaPose;

		public java.util.Date getFechaPose() {
			return this.FechaPose;
		}

		public java.util.Date fecha;

		public java.util.Date getFecha() {
			return this.fecha;
		}

		public String titulo;

		public String getTitulo() {
			return this.titulo;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.CC == null) ? 0 : this.CC.hashCode());

				result = prime * result
						+ ((this.titulo == null) ? 0 : this.titulo.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row2Struct other = (row2Struct) obj;

			if (this.CC == null) {
				if (other.CC != null)
					return false;

			} else if (!this.CC.equals(other.CC))

				return false;

			if (this.titulo == null) {
				if (other.titulo != null)
					return false;

			} else if (!this.titulo.equals(other.titulo))

				return false;

			return true;
		}

		public void copyDataTo(row2Struct other) {

			other.CC = this.CC;
			other.FechaPose = this.FechaPose;
			other.fecha = this.fecha;
			other.titulo = this.titulo;

		}

		public void copyKeysDataTo(row2Struct other) {

			other.CC = this.CC;
			other.titulo = this.titulo;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DMINDICADORES_docentes_reporte_basico.length) {
					if (length < 1024
							&& commonByteArray_DMINDICADORES_docentes_reporte_basico.length == 0) {
						commonByteArray_DMINDICADORES_docentes_reporte_basico = new byte[1024];
					} else {
						commonByteArray_DMINDICADORES_docentes_reporte_basico = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_DMINDICADORES_docentes_reporte_basico,
						0, length);
				strReturn = new String(
						commonByteArray_DMINDICADORES_docentes_reporte_basico,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(DataInputStream dis,
				ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DMINDICADORES_docentes_reporte_basico) {

				try {

					int length = 0;

					this.CC = readString(dis);

					this.titulo = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CC, dos);

				// String

				writeString(this.titulo, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.FechaPose = readDate(dis, ois);

				this.fecha = readDate(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeDate(this.FechaPose, dos, oos);

				writeDate(this.fecha, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CC=" + CC);
			sb.append(",FechaPose=" + String.valueOf(FechaPose));
			sb.append(",fecha=" + String.valueOf(fecha));
			sb.append(",titulo=" + titulo);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.CC, other.CC);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.titulo, other.titulo);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tMysqlInput_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tMysqlInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row2Struct row2 = new row2Struct();

				/**
				 * [tAdvancedHash_row2 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row2", false);
				start_Hash
						.put("tAdvancedHash_row2", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row2";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row2" + iterateId, 0, 0);

					}
				}

				int tos_count_tAdvancedHash_row2 = 0;

				// connection name:row2
				// source node:tMysqlInput_1 - inputs:(after_tPostgresqlInput_1)
				// outputs:(row2,row2) | target node:tAdvancedHash_row2 -
				// inputs:(row2) outputs:()
				// linked node: tMap_3 - inputs:(row1,row2)
				// outputs:(informacion_basica)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row2 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row2Struct> getLookup(matchingModeEnum_row2);

				globalMap.put("tHash_Lookup_row2", tHash_Lookup_row2);

				/**
				 * [tAdvancedHash_row2 begin ] stop
				 */

				/**
				 * [tMysqlInput_1 begin ] start
				 */

				ok_Hash.put("tMysqlInput_1", false);
				start_Hash.put("tMysqlInput_1", System.currentTimeMillis());

				currentComponent = "tMysqlInput_1";

				int tos_count_tMysqlInput_1 = 0;

				java.util.Calendar calendar_tMysqlInput_1 = java.util.Calendar
						.getInstance();
				calendar_tMysqlInput_1.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tMysqlInput_1 = calendar_tMysqlInput_1
						.getTime();
				int nb_line_tMysqlInput_1 = 0;
				java.sql.Connection conn_tMysqlInput_1 = null;
				String driverClass_tMysqlInput_1 = "org.gjt.mm.mysql.Driver";
				java.lang.Class.forName(driverClass_tMysqlInput_1);
				String dbUser_tMysqlInput_1 = "docencia";

				final String decryptedPassword_tMysqlInput_1 = routines.system.PasswordEncryptUtil
						.decryptPassword("feb064c6a01bbf518dc047c82a68d127");

				String dbPwd_tMysqlInput_1 = decryptedPassword_tMysqlInput_1;

				String url_tMysqlInput_1 = "jdbc:mysql://" + "10.20.0.88" + ":"
						+ "3306" + "/" + "docencia" + "?"
						+ "noDatetimeStringSync=true";

				conn_tMysqlInput_1 = java.sql.DriverManager.getConnection(
						url_tMysqlInput_1, dbUser_tMysqlInput_1,
						dbPwd_tMysqlInput_1);

				java.sql.Statement stmt_tMysqlInput_1 = conn_tMysqlInput_1
						.createStatement();

				String dbquery_tMysqlInput_1 = "select d.CC, d.FechaPose, e.fecha fecha_grado, e.titulo  from tblDocentes d inner join tblEstudios e on d.CC=e.CC ";

				globalMap.put("tMysqlInput_1_QUERY", dbquery_tMysqlInput_1);
				java.sql.ResultSet rs_tMysqlInput_1 = null;

				try {
					rs_tMysqlInput_1 = stmt_tMysqlInput_1
							.executeQuery(dbquery_tMysqlInput_1);
					java.sql.ResultSetMetaData rsmd_tMysqlInput_1 = rs_tMysqlInput_1
							.getMetaData();
					int colQtyInRs_tMysqlInput_1 = rsmd_tMysqlInput_1
							.getColumnCount();

					String tmpContent_tMysqlInput_1 = null;

					while (rs_tMysqlInput_1.next()) {
						nb_line_tMysqlInput_1++;

						if (colQtyInRs_tMysqlInput_1 < 1) {
							row2.CC = null;
						} else {

							row2.CC = routines.system.JDBCUtil.getString(
									rs_tMysqlInput_1, 1, false);
						}
						if (colQtyInRs_tMysqlInput_1 < 2) {
							row2.FechaPose = null;
						} else {

							if (rs_tMysqlInput_1.getString(2) != null) {
								String dateString_tMysqlInput_1 = rs_tMysqlInput_1
										.getString(2);
								if (!("0000-00-00")
										.equals(dateString_tMysqlInput_1)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tMysqlInput_1)) {
									row2.FechaPose = rs_tMysqlInput_1
											.getTimestamp(2);
								} else {
									row2.FechaPose = (java.util.Date) year0_tMysqlInput_1
											.clone();
								}
							} else {
								row2.FechaPose = null;
							}
						}
						if (colQtyInRs_tMysqlInput_1 < 3) {
							row2.fecha = null;
						} else {

							if (rs_tMysqlInput_1.getString(3) != null) {
								String dateString_tMysqlInput_1 = rs_tMysqlInput_1
										.getString(3);
								if (!("0000-00-00")
										.equals(dateString_tMysqlInput_1)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tMysqlInput_1)) {
									row2.fecha = rs_tMysqlInput_1
											.getTimestamp(3);
								} else {
									row2.fecha = (java.util.Date) year0_tMysqlInput_1
											.clone();
								}
							} else {
								row2.fecha = null;
							}
						}
						if (colQtyInRs_tMysqlInput_1 < 4) {
							row2.titulo = null;
						} else {

							row2.titulo = routines.system.JDBCUtil.getString(
									rs_tMysqlInput_1, 4, false);
						}

						/**
						 * [tMysqlInput_1 begin ] stop
						 */

						/**
						 * [tMysqlInput_1 main ] start
						 */

						currentComponent = "tMysqlInput_1";

						tos_count_tMysqlInput_1++;

						/**
						 * [tMysqlInput_1 main ] stop
						 */

						/**
						 * [tMysqlInput_1 process_data_begin ] start
						 */

						currentComponent = "tMysqlInput_1";

						/**
						 * [tMysqlInput_1 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row2 main ] start
						 */

						currentComponent = "tAdvancedHash_row2";

						// row2
						// row2

						if (execStat) {
							runStat.updateStatOnConnection("row2" + iterateId,
									1, 1);
						}

						row2Struct row2_HashRow = new row2Struct();

						row2_HashRow.CC = row2.CC;

						row2_HashRow.FechaPose = row2.FechaPose;

						row2_HashRow.fecha = row2.fecha;

						row2_HashRow.titulo = row2.titulo;

						tHash_Lookup_row2.put(row2_HashRow);

						tos_count_tAdvancedHash_row2++;

						/**
						 * [tAdvancedHash_row2 main ] stop
						 */

						/**
						 * [tAdvancedHash_row2 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_row2";

						/**
						 * [tAdvancedHash_row2 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row2 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_row2";

						/**
						 * [tAdvancedHash_row2 process_data_end ] stop
						 */

						/**
						 * [tMysqlInput_1 process_data_end ] start
						 */

						currentComponent = "tMysqlInput_1";

						/**
						 * [tMysqlInput_1 process_data_end ] stop
						 */

						/**
						 * [tMysqlInput_1 end ] start
						 */

						currentComponent = "tMysqlInput_1";

					}
				} finally {
					if (rs_tMysqlInput_1 != null) {
						rs_tMysqlInput_1.close();
					}
					if (stmt_tMysqlInput_1 != null) {
						stmt_tMysqlInput_1.close();
					}
					if (conn_tMysqlInput_1 != null
							&& !conn_tMysqlInput_1.isClosed()) {

						conn_tMysqlInput_1.close();

					}

				}

				globalMap.put("tMysqlInput_1_NB_LINE", nb_line_tMysqlInput_1);

				ok_Hash.put("tMysqlInput_1", true);
				end_Hash.put("tMysqlInput_1", System.currentTimeMillis());

				/**
				 * [tMysqlInput_1 end ] stop
				 */

				/**
				 * [tAdvancedHash_row2 end ] start
				 */

				currentComponent = "tAdvancedHash_row2";

				tHash_Lookup_row2.endPut();

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row2" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tAdvancedHash_row2", true);
				end_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row2 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tMysqlInput_1 finally ] start
				 */

				currentComponent = "tMysqlInput_1";

				/**
				 * [tMysqlInput_1 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row2 finally ] start
				 */

				currentComponent = "tAdvancedHash_row2";

				/**
				 * [tAdvancedHash_row2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tMysqlInput_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final docentes_reporte_basico docentes_reporte_basicoClass = new docentes_reporte_basico();

		int exitCode = docentes_reporte_basicoClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket
				// can't open
				System.err.println("The statistics socket port " + portStats
						+ " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = docentes_reporte_basico.class
					.getClassLoader().getResourceAsStream(
							"dmindicadores/docentes_reporte_basico_0_1/contexts/"
									+ contextStr + ".properties");
			if (inContext == null) {
				inContext = docentes_reporte_basico.class
						.getClassLoader()
						.getResourceAsStream(
								"config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				defaultProps.load(inContext);
				inContext.close();
				context = new ContextProperties(defaultProps);
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param
				// is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param
							.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "",
				resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tPostgresqlInput_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tPostgresqlInput_1) {
			globalMap.put("tPostgresqlInput_1_SUBPROCESS_STATE", -1);

			e_tPostgresqlInput_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out
					.println((endUsedMemory - startUsedMemory)
							+ " bytes memory increase when running : docentes_reporte_basico");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 103328 characters generated by Talend Open Studio for Data Integration on the
 * 13 de septiembre de 2018 08:28:20 PM COT
 ************************************************************************************************/
