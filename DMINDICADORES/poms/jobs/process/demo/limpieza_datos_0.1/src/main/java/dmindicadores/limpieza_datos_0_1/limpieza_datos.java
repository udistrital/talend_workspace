// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package dmindicadores.limpieza_datos_0_1;

import routines.DataOperation;
import routines.OpenStreetMap;
import routines.TalendDataGenerator;
import routines.Relational;
import routines.Mathematical;
import routines.GeometryUtility;
import routines.Numeric;
import routines.GeoOperation;
import routines.GeometryOperation;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.TalendDate;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")
/**
 * Job: limpieza_datos Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 7.1.1.20180829_1603-M3
 * @status 
 */
public class limpieza_datos implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "limpieza_datos";
	private final String projectName = "DMINDICADORES";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap
				.put(KEY_DB_DATASOURCES_RAW,
						new java.util.HashMap<String, javax.sql.DataSource>(
								dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent
						+ " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					limpieza_datos.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(limpieza_datos.this, new Object[] { e,
									currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tFileInputDelimited_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tDBOutput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class salida_ficheroStruct implements
			routines.system.IPersistableRow<salida_ficheroStruct> {
		final static byte[] commonByteArrayLock_DMINDICADORES_limpieza_datos = new byte[0];
		static byte[] commonByteArray_DMINDICADORES_limpieza_datos = new byte[0];

		public Integer codigo_institucion;

		public Integer getCodigo_institucion() {
			return this.codigo_institucion;
		}

		public String Nombre_Institucion;

		public String getNombre_Institucion() {
			return this.Nombre_Institucion;
		}

		public String Estado_Institucion;

		public String getEstado_Institucion() {
			return this.Estado_Institucion;
		}

		public String Caracter_Academico;

		public String getCaracter_Academico() {
			return this.Caracter_Academico;
		}

		public String Sector;

		public String getSector() {
			return this.Sector;
		}

		public String _Puede_Recibir_Estudiantes_Nuevos_;

		public String get_Puede_Recibir_Estudiantes_Nuevos_() {
			return this._Puede_Recibir_Estudiantes_Nuevos_;
		}

		public String Estado_Programa;

		public String getEstado_Programa() {
			return this.Estado_Programa;
		}

		public String Descripcion_Estado_Programa;

		public String getDescripcion_Estado_Programa() {
			return this.Descripcion_Estado_Programa;
		}

		public String Fecha_de_la_Resolucion;

		public String getFecha_de_la_Resolucion() {
			return this.Fecha_de_la_Resolucion;
		}

		public String Numero_de_la_Resolucion;

		public String getNumero_de_la_Resolucion() {
			return this.Numero_de_la_Resolucion;
		}

		public String Justificacion;

		public String getJustificacion() {
			return this.Justificacion;
		}

		public String Reconocimiento_del_Ministerio;

		public String getReconocimiento_del_Ministerio() {
			return this.Reconocimiento_del_Ministerio;
		}

		public String Resolucion_de_Aprobacion_No_;

		public String getResolucion_de_Aprobacion_No_() {
			return this.Resolucion_de_Aprobacion_No_;
		}

		public String Fecha_de_Resolucion;

		public String getFecha_de_Resolucion() {
			return this.Fecha_de_Resolucion;
		}

		public String Vigencia__Anos_;

		public String getVigencia__Anos_() {
			return this.Vigencia__Anos_;
		}

		public String Fecha_de_Registro_en_SNIES;

		public String getFecha_de_Registro_en_SNIES() {
			return this.Fecha_de_Registro_en_SNIES;
		}

		public Integer Codigo_SNIES_del_Programa;

		public Integer getCodigo_SNIES_del_Programa() {
			return this.Codigo_SNIES_del_Programa;
		}

		public Double Codigo_Anterior__ICFES_;

		public Double getCodigo_Anterior__ICFES_() {
			return this.Codigo_Anterior__ICFES_;
		}

		public String Area_de_Conocimiento;

		public String getArea_de_Conocimiento() {
			return this.Area_de_Conocimiento;
		}

		public String Nucleo_Basico_del_Conocimiento___NBC;

		public String getNucleo_Basico_del_Conocimiento___NBC() {
			return this.Nucleo_Basico_del_Conocimiento___NBC;
		}

		public String Nombre_del_Programa;

		public String getNombre_del_Programa() {
			return this.Nombre_del_Programa;
		}

		public String Nivel_Academico;

		public String getNivel_Academico() {
			return this.Nivel_Academico;
		}

		public String Nivel_de_Formacion;

		public String getNivel_de_Formacion() {
			return this.Nivel_de_Formacion;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DMINDICADORES_limpieza_datos.length) {
					if (length < 1024
							&& commonByteArray_DMINDICADORES_limpieza_datos.length == 0) {
						commonByteArray_DMINDICADORES_limpieza_datos = new byte[1024];
					} else {
						commonByteArray_DMINDICADORES_limpieza_datos = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DMINDICADORES_limpieza_datos, 0,
						length);
				strReturn = new String(
						commonByteArray_DMINDICADORES_limpieza_datos, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DMINDICADORES_limpieza_datos) {

				try {

					int length = 0;

					this.codigo_institucion = readInteger(dis);

					this.Nombre_Institucion = readString(dis);

					this.Estado_Institucion = readString(dis);

					this.Caracter_Academico = readString(dis);

					this.Sector = readString(dis);

					this._Puede_Recibir_Estudiantes_Nuevos_ = readString(dis);

					this.Estado_Programa = readString(dis);

					this.Descripcion_Estado_Programa = readString(dis);

					this.Fecha_de_la_Resolucion = readString(dis);

					this.Numero_de_la_Resolucion = readString(dis);

					this.Justificacion = readString(dis);

					this.Reconocimiento_del_Ministerio = readString(dis);

					this.Resolucion_de_Aprobacion_No_ = readString(dis);

					this.Fecha_de_Resolucion = readString(dis);

					this.Vigencia__Anos_ = readString(dis);

					this.Fecha_de_Registro_en_SNIES = readString(dis);

					this.Codigo_SNIES_del_Programa = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Codigo_Anterior__ICFES_ = null;
					} else {
						this.Codigo_Anterior__ICFES_ = dis.readDouble();
					}

					this.Area_de_Conocimiento = readString(dis);

					this.Nucleo_Basico_del_Conocimiento___NBC = readString(dis);

					this.Nombre_del_Programa = readString(dis);

					this.Nivel_Academico = readString(dis);

					this.Nivel_de_Formacion = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.codigo_institucion, dos);

				// String

				writeString(this.Nombre_Institucion, dos);

				// String

				writeString(this.Estado_Institucion, dos);

				// String

				writeString(this.Caracter_Academico, dos);

				// String

				writeString(this.Sector, dos);

				// String

				writeString(this._Puede_Recibir_Estudiantes_Nuevos_, dos);

				// String

				writeString(this.Estado_Programa, dos);

				// String

				writeString(this.Descripcion_Estado_Programa, dos);

				// String

				writeString(this.Fecha_de_la_Resolucion, dos);

				// String

				writeString(this.Numero_de_la_Resolucion, dos);

				// String

				writeString(this.Justificacion, dos);

				// String

				writeString(this.Reconocimiento_del_Ministerio, dos);

				// String

				writeString(this.Resolucion_de_Aprobacion_No_, dos);

				// String

				writeString(this.Fecha_de_Resolucion, dos);

				// String

				writeString(this.Vigencia__Anos_, dos);

				// String

				writeString(this.Fecha_de_Registro_en_SNIES, dos);

				// Integer

				writeInteger(this.Codigo_SNIES_del_Programa, dos);

				// Double

				if (this.Codigo_Anterior__ICFES_ == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Codigo_Anterior__ICFES_);
				}

				// String

				writeString(this.Area_de_Conocimiento, dos);

				// String

				writeString(this.Nucleo_Basico_del_Conocimiento___NBC, dos);

				// String

				writeString(this.Nombre_del_Programa, dos);

				// String

				writeString(this.Nivel_Academico, dos);

				// String

				writeString(this.Nivel_de_Formacion, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("codigo_institucion="
					+ String.valueOf(codigo_institucion));
			sb.append(",Nombre_Institucion=" + Nombre_Institucion);
			sb.append(",Estado_Institucion=" + Estado_Institucion);
			sb.append(",Caracter_Academico=" + Caracter_Academico);
			sb.append(",Sector=" + Sector);
			sb.append(",_Puede_Recibir_Estudiantes_Nuevos_="
					+ _Puede_Recibir_Estudiantes_Nuevos_);
			sb.append(",Estado_Programa=" + Estado_Programa);
			sb.append(",Descripcion_Estado_Programa="
					+ Descripcion_Estado_Programa);
			sb.append(",Fecha_de_la_Resolucion=" + Fecha_de_la_Resolucion);
			sb.append(",Numero_de_la_Resolucion=" + Numero_de_la_Resolucion);
			sb.append(",Justificacion=" + Justificacion);
			sb.append(",Reconocimiento_del_Ministerio="
					+ Reconocimiento_del_Ministerio);
			sb.append(",Resolucion_de_Aprobacion_No_="
					+ Resolucion_de_Aprobacion_No_);
			sb.append(",Fecha_de_Resolucion=" + Fecha_de_Resolucion);
			sb.append(",Vigencia__Anos_=" + Vigencia__Anos_);
			sb.append(",Fecha_de_Registro_en_SNIES="
					+ Fecha_de_Registro_en_SNIES);
			sb.append(",Codigo_SNIES_del_Programa="
					+ String.valueOf(Codigo_SNIES_del_Programa));
			sb.append(",Codigo_Anterior__ICFES_="
					+ String.valueOf(Codigo_Anterior__ICFES_));
			sb.append(",Area_de_Conocimiento=" + Area_de_Conocimiento);
			sb.append(",Nucleo_Basico_del_Conocimiento___NBC="
					+ Nucleo_Basico_del_Conocimiento___NBC);
			sb.append(",Nombre_del_Programa=" + Nombre_del_Programa);
			sb.append(",Nivel_Academico=" + Nivel_Academico);
			sb.append(",Nivel_de_Formacion=" + Nivel_de_Formacion);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(salida_ficheroStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_DMINDICADORES_limpieza_datos = new byte[0];
		static byte[] commonByteArray_DMINDICADORES_limpieza_datos = new byte[0];

		public Integer Codigo_Institucion;

		public Integer getCodigo_Institucion() {
			return this.Codigo_Institucion;
		}

		public String Nombre_Institucion;

		public String getNombre_Institucion() {
			return this.Nombre_Institucion;
		}

		public String Estado_Institucion;

		public String getEstado_Institucion() {
			return this.Estado_Institucion;
		}

		public String Caracter_Academico;

		public String getCaracter_Academico() {
			return this.Caracter_Academico;
		}

		public String Sector;

		public String getSector() {
			return this.Sector;
		}

		public String _Puede_Recibir_Estudiantes_Nuevos_;

		public String get_Puede_Recibir_Estudiantes_Nuevos_() {
			return this._Puede_Recibir_Estudiantes_Nuevos_;
		}

		public String Estado_Programa;

		public String getEstado_Programa() {
			return this.Estado_Programa;
		}

		public String Descripcion_Estado_Programa;

		public String getDescripcion_Estado_Programa() {
			return this.Descripcion_Estado_Programa;
		}

		public String Fecha_de_la_Resolucion;

		public String getFecha_de_la_Resolucion() {
			return this.Fecha_de_la_Resolucion;
		}

		public String Numero_de_la_Resolucion;

		public String getNumero_de_la_Resolucion() {
			return this.Numero_de_la_Resolucion;
		}

		public String Justificacion;

		public String getJustificacion() {
			return this.Justificacion;
		}

		public String Reconocimiento_del_Ministerio;

		public String getReconocimiento_del_Ministerio() {
			return this.Reconocimiento_del_Ministerio;
		}

		public String Resolucion_de_Aprobacion_No_;

		public String getResolucion_de_Aprobacion_No_() {
			return this.Resolucion_de_Aprobacion_No_;
		}

		public String Fecha_de_Resolucion;

		public String getFecha_de_Resolucion() {
			return this.Fecha_de_Resolucion;
		}

		public String Vigencia__Anos_;

		public String getVigencia__Anos_() {
			return this.Vigencia__Anos_;
		}

		public String Fecha_de_Registro_en_SNIES;

		public String getFecha_de_Registro_en_SNIES() {
			return this.Fecha_de_Registro_en_SNIES;
		}

		public Integer Codigo_SNIES_del_Programa;

		public Integer getCodigo_SNIES_del_Programa() {
			return this.Codigo_SNIES_del_Programa;
		}

		public Double Codigo_Anterior__ICFES_;

		public Double getCodigo_Anterior__ICFES_() {
			return this.Codigo_Anterior__ICFES_;
		}

		public String Area_de_Conocimiento;

		public String getArea_de_Conocimiento() {
			return this.Area_de_Conocimiento;
		}

		public String Nucleo_Basico_del_Conocimiento___NBC;

		public String getNucleo_Basico_del_Conocimiento___NBC() {
			return this.Nucleo_Basico_del_Conocimiento___NBC;
		}

		public String Nombre_del_Programa;

		public String getNombre_del_Programa() {
			return this.Nombre_del_Programa;
		}

		public String Nivel_Academico;

		public String getNivel_Academico() {
			return this.Nivel_Academico;
		}

		public String Nivel_de_Formacion;

		public String getNivel_de_Formacion() {
			return this.Nivel_de_Formacion;
		}

		public String Metodologia;

		public String getMetodologia() {
			return this.Metodologia;
		}

		public String Numero_Creditos;

		public String getNumero_Creditos() {
			return this.Numero_Creditos;
		}

		public Integer Numero_Periodos_de_Duracion;

		public Integer getNumero_Periodos_de_Duracion() {
			return this.Numero_Periodos_de_Duracion;
		}

		public String Periodos_de_Duracion;

		public String getPeriodos_de_Duracion() {
			return this.Periodos_de_Duracion;
		}

		public String Titulo_Otorgado;

		public String getTitulo_Otorgado() {
			return this.Titulo_Otorgado;
		}

		public String Departamento_Oferta_del_Programa;

		public String getDepartamento_Oferta_del_Programa() {
			return this.Departamento_Oferta_del_Programa;
		}

		public String Municipio_Oferta_del_Programa;

		public String getMunicipio_Oferta_del_Programa() {
			return this.Municipio_Oferta_del_Programa;
		}

		public String Costo_Matricula_para_Estudiantes_Nuevos;

		public String getCosto_Matricula_para_Estudiantes_Nuevos() {
			return this.Costo_Matricula_para_Estudiantes_Nuevos;
		}

		public String _Se_ofrece_por_ciclos_propedeuticos_;

		public String get_Se_ofrece_por_ciclos_propedeuticos_() {
			return this._Se_ofrece_por_ciclos_propedeuticos_;
		}

		public String _Cada_cuanto_se_hacen_admisiones_de_estudiantes_nuevos_;

		public String get_Cada_cuanto_se_hacen_admisiones_de_estudiantes_nuevos_() {
			return this._Cada_cuanto_se_hacen_admisiones_de_estudiantes_nuevos_;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DMINDICADORES_limpieza_datos.length) {
					if (length < 1024
							&& commonByteArray_DMINDICADORES_limpieza_datos.length == 0) {
						commonByteArray_DMINDICADORES_limpieza_datos = new byte[1024];
					} else {
						commonByteArray_DMINDICADORES_limpieza_datos = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DMINDICADORES_limpieza_datos, 0,
						length);
				strReturn = new String(
						commonByteArray_DMINDICADORES_limpieza_datos, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DMINDICADORES_limpieza_datos) {

				try {

					int length = 0;

					this.Codigo_Institucion = readInteger(dis);

					this.Nombre_Institucion = readString(dis);

					this.Estado_Institucion = readString(dis);

					this.Caracter_Academico = readString(dis);

					this.Sector = readString(dis);

					this._Puede_Recibir_Estudiantes_Nuevos_ = readString(dis);

					this.Estado_Programa = readString(dis);

					this.Descripcion_Estado_Programa = readString(dis);

					this.Fecha_de_la_Resolucion = readString(dis);

					this.Numero_de_la_Resolucion = readString(dis);

					this.Justificacion = readString(dis);

					this.Reconocimiento_del_Ministerio = readString(dis);

					this.Resolucion_de_Aprobacion_No_ = readString(dis);

					this.Fecha_de_Resolucion = readString(dis);

					this.Vigencia__Anos_ = readString(dis);

					this.Fecha_de_Registro_en_SNIES = readString(dis);

					this.Codigo_SNIES_del_Programa = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Codigo_Anterior__ICFES_ = null;
					} else {
						this.Codigo_Anterior__ICFES_ = dis.readDouble();
					}

					this.Area_de_Conocimiento = readString(dis);

					this.Nucleo_Basico_del_Conocimiento___NBC = readString(dis);

					this.Nombre_del_Programa = readString(dis);

					this.Nivel_Academico = readString(dis);

					this.Nivel_de_Formacion = readString(dis);

					this.Metodologia = readString(dis);

					this.Numero_Creditos = readString(dis);

					this.Numero_Periodos_de_Duracion = readInteger(dis);

					this.Periodos_de_Duracion = readString(dis);

					this.Titulo_Otorgado = readString(dis);

					this.Departamento_Oferta_del_Programa = readString(dis);

					this.Municipio_Oferta_del_Programa = readString(dis);

					this.Costo_Matricula_para_Estudiantes_Nuevos = readString(dis);

					this._Se_ofrece_por_ciclos_propedeuticos_ = readString(dis);

					this._Cada_cuanto_se_hacen_admisiones_de_estudiantes_nuevos_ = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.Codigo_Institucion, dos);

				// String

				writeString(this.Nombre_Institucion, dos);

				// String

				writeString(this.Estado_Institucion, dos);

				// String

				writeString(this.Caracter_Academico, dos);

				// String

				writeString(this.Sector, dos);

				// String

				writeString(this._Puede_Recibir_Estudiantes_Nuevos_, dos);

				// String

				writeString(this.Estado_Programa, dos);

				// String

				writeString(this.Descripcion_Estado_Programa, dos);

				// String

				writeString(this.Fecha_de_la_Resolucion, dos);

				// String

				writeString(this.Numero_de_la_Resolucion, dos);

				// String

				writeString(this.Justificacion, dos);

				// String

				writeString(this.Reconocimiento_del_Ministerio, dos);

				// String

				writeString(this.Resolucion_de_Aprobacion_No_, dos);

				// String

				writeString(this.Fecha_de_Resolucion, dos);

				// String

				writeString(this.Vigencia__Anos_, dos);

				// String

				writeString(this.Fecha_de_Registro_en_SNIES, dos);

				// Integer

				writeInteger(this.Codigo_SNIES_del_Programa, dos);

				// Double

				if (this.Codigo_Anterior__ICFES_ == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Codigo_Anterior__ICFES_);
				}

				// String

				writeString(this.Area_de_Conocimiento, dos);

				// String

				writeString(this.Nucleo_Basico_del_Conocimiento___NBC, dos);

				// String

				writeString(this.Nombre_del_Programa, dos);

				// String

				writeString(this.Nivel_Academico, dos);

				// String

				writeString(this.Nivel_de_Formacion, dos);

				// String

				writeString(this.Metodologia, dos);

				// String

				writeString(this.Numero_Creditos, dos);

				// Integer

				writeInteger(this.Numero_Periodos_de_Duracion, dos);

				// String

				writeString(this.Periodos_de_Duracion, dos);

				// String

				writeString(this.Titulo_Otorgado, dos);

				// String

				writeString(this.Departamento_Oferta_del_Programa, dos);

				// String

				writeString(this.Municipio_Oferta_del_Programa, dos);

				// String

				writeString(this.Costo_Matricula_para_Estudiantes_Nuevos, dos);

				// String

				writeString(this._Se_ofrece_por_ciclos_propedeuticos_, dos);

				// String

				writeString(
						this._Cada_cuanto_se_hacen_admisiones_de_estudiantes_nuevos_,
						dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Codigo_Institucion="
					+ String.valueOf(Codigo_Institucion));
			sb.append(",Nombre_Institucion=" + Nombre_Institucion);
			sb.append(",Estado_Institucion=" + Estado_Institucion);
			sb.append(",Caracter_Academico=" + Caracter_Academico);
			sb.append(",Sector=" + Sector);
			sb.append(",_Puede_Recibir_Estudiantes_Nuevos_="
					+ _Puede_Recibir_Estudiantes_Nuevos_);
			sb.append(",Estado_Programa=" + Estado_Programa);
			sb.append(",Descripcion_Estado_Programa="
					+ Descripcion_Estado_Programa);
			sb.append(",Fecha_de_la_Resolucion=" + Fecha_de_la_Resolucion);
			sb.append(",Numero_de_la_Resolucion=" + Numero_de_la_Resolucion);
			sb.append(",Justificacion=" + Justificacion);
			sb.append(",Reconocimiento_del_Ministerio="
					+ Reconocimiento_del_Ministerio);
			sb.append(",Resolucion_de_Aprobacion_No_="
					+ Resolucion_de_Aprobacion_No_);
			sb.append(",Fecha_de_Resolucion=" + Fecha_de_Resolucion);
			sb.append(",Vigencia__Anos_=" + Vigencia__Anos_);
			sb.append(",Fecha_de_Registro_en_SNIES="
					+ Fecha_de_Registro_en_SNIES);
			sb.append(",Codigo_SNIES_del_Programa="
					+ String.valueOf(Codigo_SNIES_del_Programa));
			sb.append(",Codigo_Anterior__ICFES_="
					+ String.valueOf(Codigo_Anterior__ICFES_));
			sb.append(",Area_de_Conocimiento=" + Area_de_Conocimiento);
			sb.append(",Nucleo_Basico_del_Conocimiento___NBC="
					+ Nucleo_Basico_del_Conocimiento___NBC);
			sb.append(",Nombre_del_Programa=" + Nombre_del_Programa);
			sb.append(",Nivel_Academico=" + Nivel_Academico);
			sb.append(",Nivel_de_Formacion=" + Nivel_de_Formacion);
			sb.append(",Metodologia=" + Metodologia);
			sb.append(",Numero_Creditos=" + Numero_Creditos);
			sb.append(",Numero_Periodos_de_Duracion="
					+ String.valueOf(Numero_Periodos_de_Duracion));
			sb.append(",Periodos_de_Duracion=" + Periodos_de_Duracion);
			sb.append(",Titulo_Otorgado=" + Titulo_Otorgado);
			sb.append(",Departamento_Oferta_del_Programa="
					+ Departamento_Oferta_del_Programa);
			sb.append(",Municipio_Oferta_del_Programa="
					+ Municipio_Oferta_del_Programa);
			sb.append(",Costo_Matricula_para_Estudiantes_Nuevos="
					+ Costo_Matricula_para_Estudiantes_Nuevos);
			sb.append(",_Se_ofrece_por_ciclos_propedeuticos_="
					+ _Se_ofrece_por_ciclos_propedeuticos_);
			sb.append(",_Cada_cuanto_se_hacen_admisiones_de_estudiantes_nuevos_="
					+ _Cada_cuanto_se_hacen_admisiones_de_estudiantes_nuevos_);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();
				salida_ficheroStruct salida_fichero = new salida_ficheroStruct();

				/**
				 * [tDBOutput_1 begin ] start
				 */

				ok_Hash.put("tDBOutput_1", false);
				start_Hash.put("tDBOutput_1", System.currentTimeMillis());

				currentComponent = "tDBOutput_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("salida_fichero"
								+ iterateId, 0, 0);

					}
				}

				int tos_count_tDBOutput_1 = 0;

				String dbschema_tDBOutput_1 = null;
				dbschema_tDBOutput_1 = "public";

				String tableName_tDBOutput_1 = null;
				if (dbschema_tDBOutput_1 == null
						|| dbschema_tDBOutput_1.trim().length() == 0) {
					tableName_tDBOutput_1 = "fichero_prueba";
				} else {
					tableName_tDBOutput_1 = dbschema_tDBOutput_1 + "\".\""
							+ "fichero_prueba";
				}

				int nb_line_tDBOutput_1 = 0;
				int nb_line_update_tDBOutput_1 = 0;
				int nb_line_inserted_tDBOutput_1 = 0;
				int nb_line_deleted_tDBOutput_1 = 0;
				int nb_line_rejected_tDBOutput_1 = 0;

				int deletedCount_tDBOutput_1 = 0;
				int updatedCount_tDBOutput_1 = 0;
				int insertedCount_tDBOutput_1 = 0;
				int rejectedCount_tDBOutput_1 = 0;

				boolean whetherReject_tDBOutput_1 = false;

				java.sql.Connection conn_tDBOutput_1 = null;
				String dbUser_tDBOutput_1 = null;

				java.lang.Class.forName("org.postgresql.Driver");
				String url_tDBOutput_1 = "jdbc:postgresql://" + "10.20.0.88"
						+ ":" + "5432" + "/" + "DMINDICADORES";
				dbUser_tDBOutput_1 = "postgres";

				final String decryptedPassword_tDBOutput_1 = routines.system.PasswordEncryptUtil
						.decryptPassword("610243e4ca33e325f4f7aba1746784ea");

				String dbPwd_tDBOutput_1 = decryptedPassword_tDBOutput_1;

				conn_tDBOutput_1 = java.sql.DriverManager.getConnection(
						url_tDBOutput_1, dbUser_tDBOutput_1, dbPwd_tDBOutput_1);

				resourceMap.put("conn_tDBOutput_1", conn_tDBOutput_1);
				conn_tDBOutput_1.setAutoCommit(false);
				int commitEvery_tDBOutput_1 = 10000;
				int commitCounter_tDBOutput_1 = 0;

				int count_tDBOutput_1 = 0;
				java.sql.DatabaseMetaData dbMetaData_tDBOutput_1 = conn_tDBOutput_1
						.getMetaData();
				boolean whetherExist_tDBOutput_1 = false;
				try (java.sql.ResultSet rsTable_tDBOutput_1 = dbMetaData_tDBOutput_1
						.getTables(null, null, null, new String[] { "TABLE" })) {
					String defaultSchema_tDBOutput_1 = "public";
					if (dbschema_tDBOutput_1 == null
							|| dbschema_tDBOutput_1.trim().length() == 0) {
						try (java.sql.Statement stmtSchema_tDBOutput_1 = conn_tDBOutput_1
								.createStatement();
								java.sql.ResultSet rsSchema_tDBOutput_1 = stmtSchema_tDBOutput_1
										.executeQuery("select current_schema() ")) {
							while (rsSchema_tDBOutput_1.next()) {
								defaultSchema_tDBOutput_1 = rsSchema_tDBOutput_1
										.getString("current_schema");
							}
						}
					}
					while (rsTable_tDBOutput_1.next()) {
						String table_tDBOutput_1 = rsTable_tDBOutput_1
								.getString("TABLE_NAME");
						String schema_tDBOutput_1 = rsTable_tDBOutput_1
								.getString("TABLE_SCHEM");
						if (table_tDBOutput_1.equals("fichero_prueba")
								&& (schema_tDBOutput_1
										.equals(dbschema_tDBOutput_1) || ((dbschema_tDBOutput_1 == null || dbschema_tDBOutput_1
										.trim().length() == 0) && defaultSchema_tDBOutput_1
										.equals(schema_tDBOutput_1)))) {
							whetherExist_tDBOutput_1 = true;
							break;
						}
					}
				}
				if (whetherExist_tDBOutput_1) {
					try (java.sql.Statement stmtDrop_tDBOutput_1 = conn_tDBOutput_1
							.createStatement()) {
						stmtDrop_tDBOutput_1.execute("DROP TABLE \""
								+ tableName_tDBOutput_1 + "\"");
					}
				}
				try (java.sql.Statement stmtCreate_tDBOutput_1 = conn_tDBOutput_1
						.createStatement()) {
					stmtCreate_tDBOutput_1
							.execute("CREATE TABLE \""
									+ tableName_tDBOutput_1
									+ "\"(\"codigo_institucion\" INT4 ,\"Nombre_Institucion\" VARCHAR(255)  ,\"Estado_Institucion\" VARCHAR(255)  ,\"Caracter_Academico\" VARCHAR(255)  ,\"Sector\" VARCHAR(255)  ,\"_Puede_Recibir_Estudiantes_Nuevos_\" VARCHAR(255)  ,\"Estado_Programa\" VARCHAR(255)  ,\"Descripcion_Estado_Programa\" VARCHAR(255)  ,\"Fecha_de_la_Resolucion\" VARCHAR(255)  ,\"Numero_de_la_Resolucion\" VARCHAR(255)  ,\"Justificacion\" VARCHAR(1000)  ,\"Reconocimiento_del_Ministerio\" VARCHAR(255)  ,\"Resolucion_de_Aprobacion_No_\" VARCHAR(255)  ,\"Fecha_de_Resolucion\" VARCHAR(255)  ,\"Vigencia__Anos_\" VARCHAR(255)  ,\"Fecha_de_Registro_en_SNIES\" VARCHAR(255)  ,\"Codigo_SNIES_del_Programa\" INT4 ,\"Codigo_Anterior__ICFES_\" FLOAT8 ,\"Area_de_Conocimiento\" VARCHAR(255)  ,\"Nucleo_Basico_del_Conocimiento___NBC\" VARCHAR(255)  ,\"Nombre_del_Programa\" VARCHAR(255)  ,\"Nivel_Academico\" VARCHAR(255)  ,\"Nivel_de_Formacion\" VARCHAR(255)  )");
				}
				String insert_tDBOutput_1 = "INSERT INTO \""
						+ tableName_tDBOutput_1
						+ "\" (\"codigo_institucion\",\"Nombre_Institucion\",\"Estado_Institucion\",\"Caracter_Academico\",\"Sector\",\"_Puede_Recibir_Estudiantes_Nuevos_\",\"Estado_Programa\",\"Descripcion_Estado_Programa\",\"Fecha_de_la_Resolucion\",\"Numero_de_la_Resolucion\",\"Justificacion\",\"Reconocimiento_del_Ministerio\",\"Resolucion_de_Aprobacion_No_\",\"Fecha_de_Resolucion\",\"Vigencia__Anos_\",\"Fecha_de_Registro_en_SNIES\",\"Codigo_SNIES_del_Programa\",\"Codigo_Anterior__ICFES_\",\"Area_de_Conocimiento\",\"Nucleo_Basico_del_Conocimiento___NBC\",\"Nombre_del_Programa\",\"Nivel_Academico\",\"Nivel_de_Formacion\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1
						.prepareStatement(insert_tDBOutput_1);
				resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);

				/**
				 * [tDBOutput_1 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row1" + iterateId, 0, 0);

					}
				}

				int tos_count_tMap_1 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				salida_ficheroStruct salida_fichero_tmp = new salida_ficheroStruct();
				// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_1", false);
				start_Hash.put("tFileInputDelimited_1",
						System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_1";

				int tos_count_tFileInputDelimited_1 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_1 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = null;
				try {

					Object filename_tFileInputDelimited_1 = "/home/sistemasoas/Documents/snies.csv";
					if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_1 = 0, random_value_tFileInputDelimited_1 = -1;
						if (footer_value_tFileInputDelimited_1 > 0
								|| random_value_tFileInputDelimited_1 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited(
								"/home/sistemasoas/Documents/snies.csv",
								"UTF-8", ";", "\n", false, 1, 0, -1, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_1 != null
							&& fid_tFileInputDelimited_1.nextRecord()) {
						rowstate_tFileInputDelimited_1.reset();

						row1 = null;

						boolean whetherReject_tFileInputDelimited_1 = false;
						row1 = new row1Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_1 = 0;

							String temp = "";

							columnIndexWithD_tFileInputDelimited_1 = 0;

							temp = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.Codigo_Institucion = ParserUtils
											.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1
											.setException(new RuntimeException(
													String.format(
															"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"Codigo_Institucion",
															"row1", temp,
															ex_tFileInputDelimited_1),
													ex_tFileInputDelimited_1));
								}

							} else {

								row1.Codigo_Institucion = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 1;

							row1.Nombre_Institucion = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 2;

							row1.Estado_Institucion = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 3;

							row1.Caracter_Academico = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 4;

							row1.Sector = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 5;

							row1._Puede_Recibir_Estudiantes_Nuevos_ = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 6;

							row1.Estado_Programa = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 7;

							row1.Descripcion_Estado_Programa = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 8;

							row1.Fecha_de_la_Resolucion = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 9;

							row1.Numero_de_la_Resolucion = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 10;

							row1.Justificacion = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 11;

							row1.Reconocimiento_del_Ministerio = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 12;

							row1.Resolucion_de_Aprobacion_No_ = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 13;

							row1.Fecha_de_Resolucion = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 14;

							row1.Vigencia__Anos_ = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 15;

							row1.Fecha_de_Registro_en_SNIES = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 16;

							temp = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.Codigo_SNIES_del_Programa = ParserUtils
											.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1
											.setException(new RuntimeException(
													String.format(
															"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"Codigo_SNIES_del_Programa",
															"row1", temp,
															ex_tFileInputDelimited_1),
													ex_tFileInputDelimited_1));
								}

							} else {

								row1.Codigo_SNIES_del_Programa = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 17;

							temp = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.Codigo_Anterior__ICFES_ = ParserUtils
											.parseTo_Double(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1
											.setException(new RuntimeException(
													String.format(
															"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"Codigo_Anterior__ICFES_",
															"row1", temp,
															ex_tFileInputDelimited_1),
													ex_tFileInputDelimited_1));
								}

							} else {

								row1.Codigo_Anterior__ICFES_ = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 18;

							row1.Area_de_Conocimiento = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 19;

							row1.Nucleo_Basico_del_Conocimiento___NBC = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 20;

							row1.Nombre_del_Programa = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 21;

							row1.Nivel_Academico = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 22;

							row1.Nivel_de_Formacion = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 23;

							row1.Metodologia = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 24;

							row1.Numero_Creditos = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 25;

							temp = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.Numero_Periodos_de_Duracion = ParserUtils
											.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1
											.setException(new RuntimeException(
													String.format(
															"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"Numero_Periodos_de_Duracion",
															"row1", temp,
															ex_tFileInputDelimited_1),
													ex_tFileInputDelimited_1));
								}

							} else {

								row1.Numero_Periodos_de_Duracion = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 26;

							row1.Periodos_de_Duracion = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 27;

							row1.Titulo_Otorgado = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 28;

							row1.Departamento_Oferta_del_Programa = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 29;

							row1.Municipio_Oferta_del_Programa = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 30;

							row1.Costo_Matricula_para_Estudiantes_Nuevos = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 31;

							row1._Se_ofrece_por_ciclos_propedeuticos_ = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 32;

							row1._Cada_cuanto_se_hacen_admisiones_de_estudiantes_nuevos_ = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							if (rowstate_tFileInputDelimited_1.getException() != null) {
								throw rowstate_tFileInputDelimited_1
										.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_1 = true;

							System.err.println(e.getMessage());
							row1 = null;

						}

						/**
						 * [tFileInputDelimited_1 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_1 main ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						tos_count_tFileInputDelimited_1++;

						/**
						 * [tFileInputDelimited_1 main ] stop
						 */

						/**
						 * [tFileInputDelimited_1 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						/**
						 * [tFileInputDelimited_1 process_data_begin ] stop
						 */
						// Start of branch "row1"
						if (row1 != null) {

							/**
							 * [tMap_1 main ] start
							 */

							currentComponent = "tMap_1";

							// row1
							// row1

							if (execStat) {
								runStat.updateStatOnConnection("row1"
										+ iterateId, 1, 1);
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_1 = false;
							boolean mainRowRejected_tMap_1 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
								// ###############################
								// # Output tables

								salida_fichero = null;

								// # Output table : 'salida_fichero'
								salida_fichero_tmp.codigo_institucion = row1.Codigo_Institucion;
								;
								salida_fichero_tmp.Nombre_Institucion = TalendString
										.removeAccents(StringHandling
												.UPCASE(row1.Nombre_Institucion));
								;
								salida_fichero_tmp.Estado_Institucion = row1.Estado_Institucion;
								salida_fichero_tmp.Caracter_Academico = row1.Caracter_Academico;
								salida_fichero_tmp.Sector = row1.Sector;
								salida_fichero_tmp._Puede_Recibir_Estudiantes_Nuevos_ = row1._Puede_Recibir_Estudiantes_Nuevos_;
								salida_fichero_tmp.Estado_Programa = row1.Estado_Programa;
								salida_fichero_tmp.Descripcion_Estado_Programa = row1.Descripcion_Estado_Programa;
								salida_fichero_tmp.Fecha_de_la_Resolucion = row1.Fecha_de_la_Resolucion;
								salida_fichero_tmp.Numero_de_la_Resolucion = row1.Numero_de_la_Resolucion;
								salida_fichero_tmp.Justificacion = row1.Justificacion;
								salida_fichero_tmp.Reconocimiento_del_Ministerio = row1.Reconocimiento_del_Ministerio;
								salida_fichero_tmp.Resolucion_de_Aprobacion_No_ = row1.Resolucion_de_Aprobacion_No_;
								salida_fichero_tmp.Fecha_de_Resolucion = row1.Fecha_de_Resolucion;
								salida_fichero_tmp.Vigencia__Anos_ = row1.Vigencia__Anos_;
								salida_fichero_tmp.Fecha_de_Registro_en_SNIES = row1.Fecha_de_Registro_en_SNIES;
								salida_fichero_tmp.Codigo_SNIES_del_Programa = row1.Codigo_SNIES_del_Programa;
								salida_fichero_tmp.Codigo_Anterior__ICFES_ = row1.Codigo_Anterior__ICFES_;
								salida_fichero_tmp.Area_de_Conocimiento = row1.Area_de_Conocimiento;
								salida_fichero_tmp.Nucleo_Basico_del_Conocimiento___NBC = row1.Nucleo_Basico_del_Conocimiento___NBC;
								salida_fichero_tmp.Nombre_del_Programa = TalendString
										.removeAccents(StringHandling
												.UPCASE(row1.Nombre_del_Programa));
								;
								salida_fichero_tmp.Nivel_Academico = row1.Nivel_Academico;
								salida_fichero_tmp.Nivel_de_Formacion = row1.Nivel_de_Formacion;
								salida_fichero = salida_fichero_tmp;
								// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_1 = false;

							tos_count_tMap_1++;

							/**
							 * [tMap_1 main ] stop
							 */

							/**
							 * [tMap_1 process_data_begin ] start
							 */

							currentComponent = "tMap_1";

							/**
							 * [tMap_1 process_data_begin ] stop
							 */
							// Start of branch "salida_fichero"
							if (salida_fichero != null) {

								/**
								 * [tDBOutput_1 main ] start
								 */

								currentComponent = "tDBOutput_1";

								// salida_fichero
								// salida_fichero

								if (execStat) {
									runStat.updateStatOnConnection(
											"salida_fichero" + iterateId, 1, 1);
								}

								whetherReject_tDBOutput_1 = false;
								if (salida_fichero.codigo_institucion == null) {
									pstmt_tDBOutput_1.setNull(1,
											java.sql.Types.INTEGER);
								} else {
									pstmt_tDBOutput_1.setInt(1,
											salida_fichero.codigo_institucion);
								}

								if (salida_fichero.Nombre_Institucion == null) {
									pstmt_tDBOutput_1.setNull(2,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_1.setString(2,
											salida_fichero.Nombre_Institucion);
								}

								if (salida_fichero.Estado_Institucion == null) {
									pstmt_tDBOutput_1.setNull(3,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_1.setString(3,
											salida_fichero.Estado_Institucion);
								}

								if (salida_fichero.Caracter_Academico == null) {
									pstmt_tDBOutput_1.setNull(4,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_1.setString(4,
											salida_fichero.Caracter_Academico);
								}

								if (salida_fichero.Sector == null) {
									pstmt_tDBOutput_1.setNull(5,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_1.setString(5,
											salida_fichero.Sector);
								}

								if (salida_fichero._Puede_Recibir_Estudiantes_Nuevos_ == null) {
									pstmt_tDBOutput_1.setNull(6,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_1
											.setString(
													6,
													salida_fichero._Puede_Recibir_Estudiantes_Nuevos_);
								}

								if (salida_fichero.Estado_Programa == null) {
									pstmt_tDBOutput_1.setNull(7,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_1.setString(7,
											salida_fichero.Estado_Programa);
								}

								if (salida_fichero.Descripcion_Estado_Programa == null) {
									pstmt_tDBOutput_1.setNull(8,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_1
											.setString(
													8,
													salida_fichero.Descripcion_Estado_Programa);
								}

								if (salida_fichero.Fecha_de_la_Resolucion == null) {
									pstmt_tDBOutput_1.setNull(9,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_1
											.setString(
													9,
													salida_fichero.Fecha_de_la_Resolucion);
								}

								if (salida_fichero.Numero_de_la_Resolucion == null) {
									pstmt_tDBOutput_1.setNull(10,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_1
											.setString(
													10,
													salida_fichero.Numero_de_la_Resolucion);
								}

								if (salida_fichero.Justificacion == null) {
									pstmt_tDBOutput_1.setNull(11,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_1.setString(11,
											salida_fichero.Justificacion);
								}

								if (salida_fichero.Reconocimiento_del_Ministerio == null) {
									pstmt_tDBOutput_1.setNull(12,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_1
											.setString(
													12,
													salida_fichero.Reconocimiento_del_Ministerio);
								}

								if (salida_fichero.Resolucion_de_Aprobacion_No_ == null) {
									pstmt_tDBOutput_1.setNull(13,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_1
											.setString(
													13,
													salida_fichero.Resolucion_de_Aprobacion_No_);
								}

								if (salida_fichero.Fecha_de_Resolucion == null) {
									pstmt_tDBOutput_1.setNull(14,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_1.setString(14,
											salida_fichero.Fecha_de_Resolucion);
								}

								if (salida_fichero.Vigencia__Anos_ == null) {
									pstmt_tDBOutput_1.setNull(15,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_1.setString(15,
											salida_fichero.Vigencia__Anos_);
								}

								if (salida_fichero.Fecha_de_Registro_en_SNIES == null) {
									pstmt_tDBOutput_1.setNull(16,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_1
											.setString(
													16,
													salida_fichero.Fecha_de_Registro_en_SNIES);
								}

								if (salida_fichero.Codigo_SNIES_del_Programa == null) {
									pstmt_tDBOutput_1.setNull(17,
											java.sql.Types.INTEGER);
								} else {
									pstmt_tDBOutput_1
											.setInt(17,
													salida_fichero.Codigo_SNIES_del_Programa);
								}

								if (salida_fichero.Codigo_Anterior__ICFES_ == null) {
									pstmt_tDBOutput_1.setNull(18,
											java.sql.Types.DOUBLE);
								} else {
									pstmt_tDBOutput_1
											.setDouble(
													18,
													salida_fichero.Codigo_Anterior__ICFES_);
								}

								if (salida_fichero.Area_de_Conocimiento == null) {
									pstmt_tDBOutput_1.setNull(19,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_1
											.setString(
													19,
													salida_fichero.Area_de_Conocimiento);
								}

								if (salida_fichero.Nucleo_Basico_del_Conocimiento___NBC == null) {
									pstmt_tDBOutput_1.setNull(20,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_1
											.setString(
													20,
													salida_fichero.Nucleo_Basico_del_Conocimiento___NBC);
								}

								if (salida_fichero.Nombre_del_Programa == null) {
									pstmt_tDBOutput_1.setNull(21,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_1.setString(21,
											salida_fichero.Nombre_del_Programa);
								}

								if (salida_fichero.Nivel_Academico == null) {
									pstmt_tDBOutput_1.setNull(22,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_1.setString(22,
											salida_fichero.Nivel_Academico);
								}

								if (salida_fichero.Nivel_de_Formacion == null) {
									pstmt_tDBOutput_1.setNull(23,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_1.setString(23,
											salida_fichero.Nivel_de_Formacion);
								}

								try {
									nb_line_tDBOutput_1++;

									insertedCount_tDBOutput_1 = insertedCount_tDBOutput_1
											+ pstmt_tDBOutput_1.executeUpdate();

								} catch (java.lang.Exception e) {

									whetherReject_tDBOutput_1 = true;
									throw (e);
								}
								commitCounter_tDBOutput_1++;
								if (commitEvery_tDBOutput_1 <= commitCounter_tDBOutput_1) {
									conn_tDBOutput_1.commit();

									commitCounter_tDBOutput_1 = 0;
								}

								tos_count_tDBOutput_1++;

								/**
								 * [tDBOutput_1 main ] stop
								 */

								/**
								 * [tDBOutput_1 process_data_begin ] start
								 */

								currentComponent = "tDBOutput_1";

								/**
								 * [tDBOutput_1 process_data_begin ] stop
								 */

								/**
								 * [tDBOutput_1 process_data_end ] start
								 */

								currentComponent = "tDBOutput_1";

								/**
								 * [tDBOutput_1 process_data_end ] stop
								 */

							} // End of branch "salida_fichero"

							/**
							 * [tMap_1 process_data_end ] start
							 */

							currentComponent = "tMap_1";

							/**
							 * [tMap_1 process_data_end ] stop
							 */

						} // End of branch "row1"

						/**
						 * [tFileInputDelimited_1 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						/**
						 * [tFileInputDelimited_1 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_1 end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

					}
				} finally {
					if (!((Object) ("/home/sistemasoas/Documents/snies.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_1 != null) {
							fid_tFileInputDelimited_1.close();
						}
					}
					if (fid_tFileInputDelimited_1 != null) {
						globalMap.put("tFileInputDelimited_1_NB_LINE",
								fid_tFileInputDelimited_1.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_1", true);
				end_Hash.put("tFileInputDelimited_1",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_1 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row1" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tDBOutput_1 end ] start
				 */

				currentComponent = "tDBOutput_1";

				if (pstmt_tDBOutput_1 != null) {

					pstmt_tDBOutput_1.close();
					resourceMap.remove("pstmt_tDBOutput_1");
				}
				resourceMap.put("statementClosed_tDBOutput_1", true);

				conn_tDBOutput_1.commit();

				conn_tDBOutput_1.close();

				resourceMap.put("finish_tDBOutput_1", true);

				nb_line_deleted_tDBOutput_1 = nb_line_deleted_tDBOutput_1
						+ deletedCount_tDBOutput_1;
				nb_line_update_tDBOutput_1 = nb_line_update_tDBOutput_1
						+ updatedCount_tDBOutput_1;
				nb_line_inserted_tDBOutput_1 = nb_line_inserted_tDBOutput_1
						+ insertedCount_tDBOutput_1;
				nb_line_rejected_tDBOutput_1 = nb_line_rejected_tDBOutput_1
						+ rejectedCount_tDBOutput_1;

				globalMap.put("tDBOutput_1_NB_LINE", nb_line_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_UPDATED",
						nb_line_update_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_INSERTED",
						nb_line_inserted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_DELETED",
						nb_line_deleted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_REJECTED",
						nb_line_rejected_tDBOutput_1);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("salida_fichero"
								+ iterateId, 2, 0);
					}
				}

				ok_Hash.put("tDBOutput_1", true);
				end_Hash.put("tDBOutput_1", System.currentTimeMillis());

				/**
				 * [tDBOutput_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_1 finally ] start
				 */

				currentComponent = "tFileInputDelimited_1";

				/**
				 * [tFileInputDelimited_1 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tDBOutput_1 finally ] start
				 */

				currentComponent = "tDBOutput_1";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
						java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
						if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_1")) != null) {
							pstmtToClose_tDBOutput_1.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_1") == null) {
						java.sql.Connection ctn_tDBOutput_1 = null;
						if ((ctn_tDBOutput_1 = (java.sql.Connection) resourceMap
								.get("conn_tDBOutput_1")) != null) {
							try {
								ctn_tDBOutput_1.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_1) {
								String errorMessage_tDBOutput_1 = "failed to close the connection in tDBOutput_1 :"
										+ sqlEx_tDBOutput_1.getMessage();
								System.err.println(errorMessage_tDBOutput_1);
							}
						}
					}
				}

				/**
				 * [tDBOutput_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final limpieza_datos limpieza_datosClass = new limpieza_datos();

		int exitCode = limpieza_datosClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket
				// can't open
				System.err.println("The statistics socket port " + portStats
						+ " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = limpieza_datos.class
					.getClassLoader().getResourceAsStream(
							"dmindicadores/limpieza_datos_0_1/contexts/"
									+ contextStr + ".properties");
			if (inContext == null) {
				inContext = limpieza_datos.class
						.getClassLoader()
						.getResourceAsStream(
								"config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				defaultProps.load(inContext);
				inContext.close();
				context = new ContextProperties(defaultProps);
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param
				// is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param
							.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "",
				resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tFileInputDelimited_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileInputDelimited_1) {
			globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", -1);

			e_tFileInputDelimited_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory)
					+ " bytes memory increase when running : limpieza_datos");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 81807 characters generated by Talend Open Studio for Data Integration on the
 * 25 de septiembre de 2018 03:49:04 PM COT
 ************************************************************************************************/
