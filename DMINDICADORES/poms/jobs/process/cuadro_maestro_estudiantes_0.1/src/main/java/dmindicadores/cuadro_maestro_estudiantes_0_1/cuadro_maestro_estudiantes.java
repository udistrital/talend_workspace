// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package dmindicadores.cuadro_maestro_estudiantes_0_1;

import routines.DataOperation;
import routines.OpenStreetMap;
import routines.TalendDataGenerator;
import routines.Relational;
import routines.Mathematical;
import routines.GeometryUtility;
import routines.Numeric;
import routines.GeoOperation;
import routines.GeometryOperation;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.TalendDate;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")
/**
 * Job: cuadro_maestro_estudiantes Purpose: <br>
 * Description:  <br>
 * @author test@talend.com
 * @version 7.1.1.20180829_1603-M3
 * @status 
 */
public class cuadro_maestro_estudiantes implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "cuadro_maestro_estudiantes";
	private final String projectName = "DMINDICADORES";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap
				.put(KEY_DB_DATASOURCES_RAW,
						new java.util.HashMap<String, javax.sql.DataSource>(
								dataSources));
	}

	LogCatcherUtils talendLogs_LOGS = new LogCatcherUtils();
	StatCatcherUtils talendStats_STATS = new StatCatcherUtils(
			"_1eQoAOt0EeOJG-zVQ5Esdg", "0.1");
	MetterCatcherUtils talendMeter_METTER = new MetterCatcherUtils(
			"_1eQoAOt0EeOJG-zVQ5Esdg", "0.1");

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent
						+ " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					cuadro_maestro_estudiantes.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(cuadro_maestro_estudiantes.this,
									new Object[] { e, currentComponent,
											globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
						talendLogs_LOGS.addMessage("Java Exception",
								currentComponent, 6, e.getClass().getName()
										+ ":" + e.getMessage(), 1);
						talendLogs_LOGSProcess(globalMap);
					}
				} catch (TalendException e) {
					// do nothing

				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void preStaLogCon_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		preStaLogCon_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlInput_9_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_9_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_9_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlOutput_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_9_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlInput_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlInput_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlInput_3_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlInput_4_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlInput_5_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlInput_6_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlInput_7_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlInput_8_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_8_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlInput_10_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_10_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row3_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row4_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row5_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row6_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row7_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row8_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_8_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row10_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_10_onSubJobError(exception, errorComponent, globalMap);
	}

	public void connectionStatsLogs_Commit_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		connectionStatsLogs_Commit_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void connectionStatsLogs_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		connectionStatsLogs_onSubJobError(exception, errorComponent, globalMap);
	}

	public void talendStats_STATS_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		talendStats_DB_error(exception, errorComponent, globalMap);

	}

	public void talendStats_DB_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		talendStats_STATS_onSubJobError(exception, errorComponent, globalMap);
	}

	public void talendLogs_LOGS_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		talendLogs_DB_error(exception, errorComponent, globalMap);

	}

	public void talendLogs_DB_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		talendLogs_LOGS_onSubJobError(exception, errorComponent, globalMap);
	}

	public void talendMeter_METTER_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		talendMeter_DB_error(exception, errorComponent, globalMap);

	}

	public void talendMeter_DB_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		talendMeter_METTER_onSubJobError(exception, errorComponent, globalMap);
	}

	public void preStaLogCon_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlInput_9_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlInput_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlInput_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlInput_3_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlInput_4_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlInput_5_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlInput_6_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlInput_7_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlInput_8_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlInput_10_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void connectionStatsLogs_Commit_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void connectionStatsLogs_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void talendStats_STATS_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void talendLogs_LOGS_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void talendMeter_METTER_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void preStaLogConProcess(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("preStaLogCon_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [preStaLogCon begin ] start
				 */

				ok_Hash.put("preStaLogCon", false);
				start_Hash.put("preStaLogCon", System.currentTimeMillis());

				currentComponent = "preStaLogCon";

				int tos_count_preStaLogCon = 0;

				/**
				 * [preStaLogCon begin ] stop
				 */

				/**
				 * [preStaLogCon main ] start
				 */

				currentComponent = "preStaLogCon";

				tos_count_preStaLogCon++;

				/**
				 * [preStaLogCon main ] stop
				 */

				/**
				 * [preStaLogCon process_data_begin ] start
				 */

				currentComponent = "preStaLogCon";

				/**
				 * [preStaLogCon process_data_begin ] stop
				 */

				/**
				 * [preStaLogCon process_data_end ] start
				 */

				currentComponent = "preStaLogCon";

				/**
				 * [preStaLogCon process_data_end ] stop
				 */

				/**
				 * [preStaLogCon end ] start
				 */

				currentComponent = "preStaLogCon";

				ok_Hash.put("preStaLogCon", true);
				end_Hash.put("preStaLogCon", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection(
							"after_preStaLogCon_connectionStatsLogs", 0, "ok");
				}
				connectionStatsLogsProcess(globalMap);

				/**
				 * [preStaLogCon end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [preStaLogCon finally ] start
				 */

				currentComponent = "preStaLogCon";

				/**
				 * [preStaLogCon finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("preStaLogCon_SUBPROCESS_STATE", 1);
	}

	public static class cuadro_maestroStruct implements
			routines.system.IPersistableRow<cuadro_maestroStruct> {
		final static byte[] commonByteArrayLock_DMINDICADORES_cuadro_maestro_estudiantes = new byte[0];
		static byte[] commonByteArray_DMINDICADORES_cuadro_maestro_estudiantes = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int anno;

		public int getAnno() {
			return this.anno;
		}

		public int semestre;

		public int getSemestre() {
			return this.semestre;
		}

		public String anno_semestre;

		public String getAnno_semestre() {
			return this.anno_semestre;
		}

		public Integer codigo_facultad;

		public Integer getCodigo_facultad() {
			return this.codigo_facultad;
		}

		public String facultad;

		public String getFacultad() {
			return this.facultad;
		}

		public Integer codigo_proyecto_snies;

		public Integer getCodigo_proyecto_snies() {
			return this.codigo_proyecto_snies;
		}

		public String proyecto_snies;

		public String getProyecto_snies() {
			return this.proyecto_snies;
		}

		public int codigo_proyecto;

		public int getCodigo_proyecto() {
			return this.codigo_proyecto;
		}

		public String proyecto;

		public String getProyecto() {
			return this.proyecto;
		}

		public String nivel;

		public String getNivel() {
			return this.nivel;
		}

		public String modalidad;

		public String getModalidad() {
			return this.modalidad;
		}

		public Integer inscritos;

		public Integer getInscritos() {
			return this.inscritos;
		}

		public Integer admitidos;

		public Integer getAdmitidos() {
			return this.admitidos;
		}

		public Integer primiparos;

		public Integer getPrimiparos() {
			return this.primiparos;
		}

		public Integer matriculados;

		public Integer getMatriculados() {
			return this.matriculados;
		}

		public Integer egresados;

		public Integer getEgresados() {
			return this.egresados;
		}

		public Integer graduados;

		public Integer getGraduados() {
			return this.graduados;
		}

		public Integer retirados;

		public Integer getRetirados() {
			return this.retirados;
		}

		public Integer cupos;

		public Integer getCupos() {
			return this.cupos;
		}

		public Double desercion_spadies;

		public Double getDesercion_spadies() {
			return this.desercion_spadies;
		}

		public java.util.Date fecha_carga;

		public java.util.Date getFecha_carga() {
			return this.fecha_carga;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.anno;

				result = prime * result + (int) this.semestre;

				result = prime * result + (int) this.codigo_proyecto;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final cuadro_maestroStruct other = (cuadro_maestroStruct) obj;

			if (this.anno != other.anno)
				return false;

			if (this.semestre != other.semestre)
				return false;

			if (this.codigo_proyecto != other.codigo_proyecto)
				return false;

			return true;
		}

		public void copyDataTo(cuadro_maestroStruct other) {

			other.anno = this.anno;
			other.semestre = this.semestre;
			other.anno_semestre = this.anno_semestre;
			other.codigo_facultad = this.codigo_facultad;
			other.facultad = this.facultad;
			other.codigo_proyecto_snies = this.codigo_proyecto_snies;
			other.proyecto_snies = this.proyecto_snies;
			other.codigo_proyecto = this.codigo_proyecto;
			other.proyecto = this.proyecto;
			other.nivel = this.nivel;
			other.modalidad = this.modalidad;
			other.inscritos = this.inscritos;
			other.admitidos = this.admitidos;
			other.primiparos = this.primiparos;
			other.matriculados = this.matriculados;
			other.egresados = this.egresados;
			other.graduados = this.graduados;
			other.retirados = this.retirados;
			other.cupos = this.cupos;
			other.desercion_spadies = this.desercion_spadies;
			other.fecha_carga = this.fecha_carga;

		}

		public void copyKeysDataTo(cuadro_maestroStruct other) {

			other.anno = this.anno;
			other.semestre = this.semestre;
			other.codigo_proyecto = this.codigo_proyecto;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DMINDICADORES_cuadro_maestro_estudiantes.length) {
					if (length < 1024
							&& commonByteArray_DMINDICADORES_cuadro_maestro_estudiantes.length == 0) {
						commonByteArray_DMINDICADORES_cuadro_maestro_estudiantes = new byte[1024];
					} else {
						commonByteArray_DMINDICADORES_cuadro_maestro_estudiantes = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_DMINDICADORES_cuadro_maestro_estudiantes,
						0, length);
				strReturn = new String(
						commonByteArray_DMINDICADORES_cuadro_maestro_estudiantes,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DMINDICADORES_cuadro_maestro_estudiantes) {

				try {

					int length = 0;

					this.anno = dis.readInt();

					this.semestre = dis.readInt();

					this.anno_semestre = readString(dis);

					this.codigo_facultad = readInteger(dis);

					this.facultad = readString(dis);

					this.codigo_proyecto_snies = readInteger(dis);

					this.proyecto_snies = readString(dis);

					this.codigo_proyecto = dis.readInt();

					this.proyecto = readString(dis);

					this.nivel = readString(dis);

					this.modalidad = readString(dis);

					this.inscritos = readInteger(dis);

					this.admitidos = readInteger(dis);

					this.primiparos = readInteger(dis);

					this.matriculados = readInteger(dis);

					this.egresados = readInteger(dis);

					this.graduados = readInteger(dis);

					this.retirados = readInteger(dis);

					this.cupos = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.desercion_spadies = null;
					} else {
						this.desercion_spadies = dis.readDouble();
					}

					this.fecha_carga = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.anno);

				// int

				dos.writeInt(this.semestre);

				// String

				writeString(this.anno_semestre, dos);

				// Integer

				writeInteger(this.codigo_facultad, dos);

				// String

				writeString(this.facultad, dos);

				// Integer

				writeInteger(this.codigo_proyecto_snies, dos);

				// String

				writeString(this.proyecto_snies, dos);

				// int

				dos.writeInt(this.codigo_proyecto);

				// String

				writeString(this.proyecto, dos);

				// String

				writeString(this.nivel, dos);

				// String

				writeString(this.modalidad, dos);

				// Integer

				writeInteger(this.inscritos, dos);

				// Integer

				writeInteger(this.admitidos, dos);

				// Integer

				writeInteger(this.primiparos, dos);

				// Integer

				writeInteger(this.matriculados, dos);

				// Integer

				writeInteger(this.egresados, dos);

				// Integer

				writeInteger(this.graduados, dos);

				// Integer

				writeInteger(this.retirados, dos);

				// Integer

				writeInteger(this.cupos, dos);

				// Double

				if (this.desercion_spadies == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.desercion_spadies);
				}

				// java.util.Date

				writeDate(this.fecha_carga, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("anno=" + String.valueOf(anno));
			sb.append(",semestre=" + String.valueOf(semestre));
			sb.append(",anno_semestre=" + anno_semestre);
			sb.append(",codigo_facultad=" + String.valueOf(codigo_facultad));
			sb.append(",facultad=" + facultad);
			sb.append(",codigo_proyecto_snies="
					+ String.valueOf(codigo_proyecto_snies));
			sb.append(",proyecto_snies=" + proyecto_snies);
			sb.append(",codigo_proyecto=" + String.valueOf(codigo_proyecto));
			sb.append(",proyecto=" + proyecto);
			sb.append(",nivel=" + nivel);
			sb.append(",modalidad=" + modalidad);
			sb.append(",inscritos=" + String.valueOf(inscritos));
			sb.append(",admitidos=" + String.valueOf(admitidos));
			sb.append(",primiparos=" + String.valueOf(primiparos));
			sb.append(",matriculados=" + String.valueOf(matriculados));
			sb.append(",egresados=" + String.valueOf(egresados));
			sb.append(",graduados=" + String.valueOf(graduados));
			sb.append(",retirados=" + String.valueOf(retirados));
			sb.append(",cupos=" + String.valueOf(cupos));
			sb.append(",desercion_spadies=" + String.valueOf(desercion_spadies));
			sb.append(",fecha_carga=" + String.valueOf(fecha_carga));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(cuadro_maestroStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.anno, other.anno);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.semestre, other.semestre);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.codigo_proyecto,
					other.codigo_proyecto);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row9Struct implements
			routines.system.IPersistableRow<row9Struct> {
		final static byte[] commonByteArrayLock_DMINDICADORES_cuadro_maestro_estudiantes = new byte[0];
		static byte[] commonByteArray_DMINDICADORES_cuadro_maestro_estudiantes = new byte[0];

		public int id_anno;

		public int getId_anno() {
			return this.id_anno;
		}

		public int id_semestre;

		public int getId_semestre() {
			return this.id_semestre;
		}

		public String anno_semestre;

		public String getAnno_semestre() {
			return this.anno_semestre;
		}

		public int codigo_proyecto;

		public int getCodigo_proyecto() {
			return this.codigo_proyecto;
		}

		public String proyecto;

		public String getProyecto() {
			return this.proyecto;
		}

		public Integer codigo_facultad;

		public Integer getCodigo_facultad() {
			return this.codigo_facultad;
		}

		public String facultad;

		public String getFacultad() {
			return this.facultad;
		}

		public Integer codigo_proyecto_snies;

		public Integer getCodigo_proyecto_snies() {
			return this.codigo_proyecto_snies;
		}

		public String proyecto_snies;

		public String getProyecto_snies() {
			return this.proyecto_snies;
		}

		public String modalidad;

		public String getModalidad() {
			return this.modalidad;
		}

		public String nivel;

		public String getNivel() {
			return this.nivel;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DMINDICADORES_cuadro_maestro_estudiantes.length) {
					if (length < 1024
							&& commonByteArray_DMINDICADORES_cuadro_maestro_estudiantes.length == 0) {
						commonByteArray_DMINDICADORES_cuadro_maestro_estudiantes = new byte[1024];
					} else {
						commonByteArray_DMINDICADORES_cuadro_maestro_estudiantes = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_DMINDICADORES_cuadro_maestro_estudiantes,
						0, length);
				strReturn = new String(
						commonByteArray_DMINDICADORES_cuadro_maestro_estudiantes,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DMINDICADORES_cuadro_maestro_estudiantes) {

				try {

					int length = 0;

					this.id_anno = dis.readInt();

					this.id_semestre = dis.readInt();

					this.anno_semestre = readString(dis);

					this.codigo_proyecto = dis.readInt();

					this.proyecto = readString(dis);

					this.codigo_facultad = readInteger(dis);

					this.facultad = readString(dis);

					this.codigo_proyecto_snies = readInteger(dis);

					this.proyecto_snies = readString(dis);

					this.modalidad = readString(dis);

					this.nivel = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id_anno);

				// int

				dos.writeInt(this.id_semestre);

				// String

				writeString(this.anno_semestre, dos);

				// int

				dos.writeInt(this.codigo_proyecto);

				// String

				writeString(this.proyecto, dos);

				// Integer

				writeInteger(this.codigo_facultad, dos);

				// String

				writeString(this.facultad, dos);

				// Integer

				writeInteger(this.codigo_proyecto_snies, dos);

				// String

				writeString(this.proyecto_snies, dos);

				// String

				writeString(this.modalidad, dos);

				// String

				writeString(this.nivel, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_anno=" + String.valueOf(id_anno));
			sb.append(",id_semestre=" + String.valueOf(id_semestre));
			sb.append(",anno_semestre=" + anno_semestre);
			sb.append(",codigo_proyecto=" + String.valueOf(codigo_proyecto));
			sb.append(",proyecto=" + proyecto);
			sb.append(",codigo_facultad=" + String.valueOf(codigo_facultad));
			sb.append(",facultad=" + facultad);
			sb.append(",codigo_proyecto_snies="
					+ String.valueOf(codigo_proyecto_snies));
			sb.append(",proyecto_snies=" + proyecto_snies);
			sb.append(",modalidad=" + modalidad);
			sb.append(",nivel=" + nivel);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row9Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tPostgresqlInput_9Struct implements
			routines.system.IPersistableRow<after_tPostgresqlInput_9Struct> {
		final static byte[] commonByteArrayLock_DMINDICADORES_cuadro_maestro_estudiantes = new byte[0];
		static byte[] commonByteArray_DMINDICADORES_cuadro_maestro_estudiantes = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id_anno;

		public int getId_anno() {
			return this.id_anno;
		}

		public int id_semestre;

		public int getId_semestre() {
			return this.id_semestre;
		}

		public String anno_semestre;

		public String getAnno_semestre() {
			return this.anno_semestre;
		}

		public int codigo_proyecto;

		public int getCodigo_proyecto() {
			return this.codigo_proyecto;
		}

		public String proyecto;

		public String getProyecto() {
			return this.proyecto;
		}

		public Integer codigo_facultad;

		public Integer getCodigo_facultad() {
			return this.codigo_facultad;
		}

		public String facultad;

		public String getFacultad() {
			return this.facultad;
		}

		public Integer codigo_proyecto_snies;

		public Integer getCodigo_proyecto_snies() {
			return this.codigo_proyecto_snies;
		}

		public String proyecto_snies;

		public String getProyecto_snies() {
			return this.proyecto_snies;
		}

		public String modalidad;

		public String getModalidad() {
			return this.modalidad;
		}

		public String nivel;

		public String getNivel() {
			return this.nivel;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id_anno;

				result = prime * result + (int) this.id_semestre;

				result = prime * result + (int) this.codigo_proyecto;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final after_tPostgresqlInput_9Struct other = (after_tPostgresqlInput_9Struct) obj;

			if (this.id_anno != other.id_anno)
				return false;

			if (this.id_semestre != other.id_semestre)
				return false;

			if (this.codigo_proyecto != other.codigo_proyecto)
				return false;

			return true;
		}

		public void copyDataTo(after_tPostgresqlInput_9Struct other) {

			other.id_anno = this.id_anno;
			other.id_semestre = this.id_semestre;
			other.anno_semestre = this.anno_semestre;
			other.codigo_proyecto = this.codigo_proyecto;
			other.proyecto = this.proyecto;
			other.codigo_facultad = this.codigo_facultad;
			other.facultad = this.facultad;
			other.codigo_proyecto_snies = this.codigo_proyecto_snies;
			other.proyecto_snies = this.proyecto_snies;
			other.modalidad = this.modalidad;
			other.nivel = this.nivel;

		}

		public void copyKeysDataTo(after_tPostgresqlInput_9Struct other) {

			other.id_anno = this.id_anno;
			other.id_semestre = this.id_semestre;
			other.codigo_proyecto = this.codigo_proyecto;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DMINDICADORES_cuadro_maestro_estudiantes.length) {
					if (length < 1024
							&& commonByteArray_DMINDICADORES_cuadro_maestro_estudiantes.length == 0) {
						commonByteArray_DMINDICADORES_cuadro_maestro_estudiantes = new byte[1024];
					} else {
						commonByteArray_DMINDICADORES_cuadro_maestro_estudiantes = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_DMINDICADORES_cuadro_maestro_estudiantes,
						0, length);
				strReturn = new String(
						commonByteArray_DMINDICADORES_cuadro_maestro_estudiantes,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DMINDICADORES_cuadro_maestro_estudiantes) {

				try {

					int length = 0;

					this.id_anno = dis.readInt();

					this.id_semestre = dis.readInt();

					this.anno_semestre = readString(dis);

					this.codigo_proyecto = dis.readInt();

					this.proyecto = readString(dis);

					this.codigo_facultad = readInteger(dis);

					this.facultad = readString(dis);

					this.codigo_proyecto_snies = readInteger(dis);

					this.proyecto_snies = readString(dis);

					this.modalidad = readString(dis);

					this.nivel = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id_anno);

				// int

				dos.writeInt(this.id_semestre);

				// String

				writeString(this.anno_semestre, dos);

				// int

				dos.writeInt(this.codigo_proyecto);

				// String

				writeString(this.proyecto, dos);

				// Integer

				writeInteger(this.codigo_facultad, dos);

				// String

				writeString(this.facultad, dos);

				// Integer

				writeInteger(this.codigo_proyecto_snies, dos);

				// String

				writeString(this.proyecto_snies, dos);

				// String

				writeString(this.modalidad, dos);

				// String

				writeString(this.nivel, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_anno=" + String.valueOf(id_anno));
			sb.append(",id_semestre=" + String.valueOf(id_semestre));
			sb.append(",anno_semestre=" + anno_semestre);
			sb.append(",codigo_proyecto=" + String.valueOf(codigo_proyecto));
			sb.append(",proyecto=" + proyecto);
			sb.append(",codigo_facultad=" + String.valueOf(codigo_facultad));
			sb.append(",facultad=" + facultad);
			sb.append(",codigo_proyecto_snies="
					+ String.valueOf(codigo_proyecto_snies));
			sb.append(",proyecto_snies=" + proyecto_snies);
			sb.append(",modalidad=" + modalidad);
			sb.append(",nivel=" + nivel);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tPostgresqlInput_9Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id_anno, other.id_anno);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.id_semestre,
					other.id_semestre);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.codigo_proyecto,
					other.codigo_proyecto);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tPostgresqlInput_9Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlInput_9_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				tPostgresqlInput_1Process(globalMap);
				tPostgresqlInput_2Process(globalMap);
				tPostgresqlInput_3Process(globalMap);
				tPostgresqlInput_4Process(globalMap);
				tPostgresqlInput_5Process(globalMap);
				tPostgresqlInput_6Process(globalMap);
				tPostgresqlInput_7Process(globalMap);
				tPostgresqlInput_8Process(globalMap);
				tPostgresqlInput_10Process(globalMap);

				row9Struct row9 = new row9Struct();
				cuadro_maestroStruct cuadro_maestro = new cuadro_maestroStruct();

				/**
				 * [tPostgresqlOutput_1 begin ] start
				 */

				ok_Hash.put("tPostgresqlOutput_1", false);
				start_Hash.put("tPostgresqlOutput_1",
						System.currentTimeMillis());

				currentComponent = "tPostgresqlOutput_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("cuadro_maestro"
								+ iterateId, 0, 0);

					}
				}

				int tos_count_tPostgresqlOutput_1 = 0;

				String dbschema_tPostgresqlOutput_1 = null;
				dbschema_tPostgresqlOutput_1 = "public";

				String tableName_tPostgresqlOutput_1 = null;
				if (dbschema_tPostgresqlOutput_1 == null
						|| dbschema_tPostgresqlOutput_1.trim().length() == 0) {
					tableName_tPostgresqlOutput_1 = "cuadro_maestro_estudiantes";
				} else {
					tableName_tPostgresqlOutput_1 = dbschema_tPostgresqlOutput_1
							+ "\".\"" + "cuadro_maestro_estudiantes";
				}

				int updateKeyCount_tPostgresqlOutput_1 = 3;
				if (updateKeyCount_tPostgresqlOutput_1 < 1) {
					throw new RuntimeException(
							"For update, Schema must have a key");
				}
				int nb_line_tPostgresqlOutput_1 = 0;
				int nb_line_update_tPostgresqlOutput_1 = 0;
				int nb_line_inserted_tPostgresqlOutput_1 = 0;
				int nb_line_deleted_tPostgresqlOutput_1 = 0;
				int nb_line_rejected_tPostgresqlOutput_1 = 0;

				int deletedCount_tPostgresqlOutput_1 = 0;
				int updatedCount_tPostgresqlOutput_1 = 0;
				int insertedCount_tPostgresqlOutput_1 = 0;
				int rejectedCount_tPostgresqlOutput_1 = 0;

				boolean whetherReject_tPostgresqlOutput_1 = false;

				java.sql.Connection conn_tPostgresqlOutput_1 = null;
				String dbUser_tPostgresqlOutput_1 = null;

				java.lang.Class.forName("org.postgresql.Driver");
				String url_tPostgresqlOutput_1 = "jdbc:postgresql://"
						+ "10.20.0.88" + ":" + "5432" + "/" + "DMINDICADORES";
				dbUser_tPostgresqlOutput_1 = "postgres";

				final String decryptedPassword_tPostgresqlOutput_1 = routines.system.PasswordEncryptUtil
						.decryptPassword("610243e4ca33e325f4f7aba1746784ea");

				String dbPwd_tPostgresqlOutput_1 = decryptedPassword_tPostgresqlOutput_1;

				conn_tPostgresqlOutput_1 = java.sql.DriverManager
						.getConnection(url_tPostgresqlOutput_1,
								dbUser_tPostgresqlOutput_1,
								dbPwd_tPostgresqlOutput_1);

				resourceMap.put("conn_tPostgresqlOutput_1",
						conn_tPostgresqlOutput_1);
				conn_tPostgresqlOutput_1.setAutoCommit(false);
				int commitEvery_tPostgresqlOutput_1 = 10000;
				int commitCounter_tPostgresqlOutput_1 = 0;

				int count_tPostgresqlOutput_1 = 0;
				try (java.sql.Statement stmtDrop_tPostgresqlOutput_1 = conn_tPostgresqlOutput_1
						.createStatement()) {
					stmtDrop_tPostgresqlOutput_1.execute("DROP TABLE \""
							+ tableName_tPostgresqlOutput_1 + "\"");
				}
				try (java.sql.Statement stmtCreate_tPostgresqlOutput_1 = conn_tPostgresqlOutput_1
						.createStatement()) {
					stmtCreate_tPostgresqlOutput_1
							.execute("CREATE TABLE \""
									+ tableName_tPostgresqlOutput_1
									+ "\"(\"anno\" INT4  not null ,\"semestre\" INT4  not null ,\"anno_semestre\" VARCHAR ,\"codigo_facultad\" INT4 ,\"facultad\" VARCHAR(100)  ,\"codigo_proyecto_snies\" INT4 ,\"proyecto_snies\" VARCHAR(100)  ,\"codigo_proyecto\" INT4  not null ,\"proyecto\" VARCHAR(100)  ,\"nivel\" VARCHAR(10)  ,\"modalidad\" VARCHAR ,\"inscritos\" INT4 ,\"admitidos\" INT4 ,\"primiparos\" INT4 ,\"matriculados\" INT4 ,\"egresados\" INT4 ,\"graduados\" INT4 ,\"retirados\" INT4 ,\"cupos\" INT4 ,\"desercion_spadies\" FLOAT8 ,\"fecha_carga\" TIMESTAMP ,primary key(\"anno\",\"semestre\",\"codigo_proyecto\"))");
				}
				String update_tPostgresqlOutput_1 = "UPDATE \""
						+ tableName_tPostgresqlOutput_1
						+ "\" SET \"anno_semestre\" = ?,\"codigo_facultad\" = ?,\"facultad\" = ?,\"codigo_proyecto_snies\" = ?,\"proyecto_snies\" = ?,\"proyecto\" = ?,\"nivel\" = ?,\"modalidad\" = ?,\"inscritos\" = ?,\"admitidos\" = ?,\"primiparos\" = ?,\"matriculados\" = ?,\"egresados\" = ?,\"graduados\" = ?,\"retirados\" = ?,\"cupos\" = ?,\"desercion_spadies\" = ?,\"fecha_carga\" = ? WHERE \"anno\" = ? AND \"semestre\" = ? AND \"codigo_proyecto\" = ?";
				java.sql.PreparedStatement pstmtUpdate_tPostgresqlOutput_1 = conn_tPostgresqlOutput_1
						.prepareStatement(update_tPostgresqlOutput_1);
				resourceMap.put("pstmtUpdate_tPostgresqlOutput_1",
						pstmtUpdate_tPostgresqlOutput_1);
				String insert_tPostgresqlOutput_1 = "INSERT INTO \""
						+ tableName_tPostgresqlOutput_1
						+ "\" (\"anno\",\"semestre\",\"anno_semestre\",\"codigo_facultad\",\"facultad\",\"codigo_proyecto_snies\",\"proyecto_snies\",\"codigo_proyecto\",\"proyecto\",\"nivel\",\"modalidad\",\"inscritos\",\"admitidos\",\"primiparos\",\"matriculados\",\"egresados\",\"graduados\",\"retirados\",\"cupos\",\"desercion_spadies\",\"fecha_carga\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
				java.sql.PreparedStatement pstmtInsert_tPostgresqlOutput_1 = conn_tPostgresqlOutput_1
						.prepareStatement(insert_tPostgresqlOutput_1);
				resourceMap.put("pstmtInsert_tPostgresqlOutput_1",
						pstmtInsert_tPostgresqlOutput_1);

				/**
				 * [tPostgresqlOutput_1 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row9" + iterateId, 0, 0);

					}
				}

				int tos_count_tMap_1 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row1Struct> tHash_Lookup_row1 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row1Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row1Struct>) globalMap
						.get("tHash_Lookup_row1"));

				row1Struct row1HashKey = new row1Struct();
				row1Struct row1Default = new row1Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) globalMap
						.get("tHash_Lookup_row2"));

				row2Struct row2HashKey = new row2Struct();
				row2Struct row2Default = new row2Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct> tHash_Lookup_row3 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct>) globalMap
						.get("tHash_Lookup_row3"));

				row3Struct row3HashKey = new row3Struct();
				row3Struct row3Default = new row3Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct> tHash_Lookup_row4 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct>) globalMap
						.get("tHash_Lookup_row4"));

				row4Struct row4HashKey = new row4Struct();
				row4Struct row4Default = new row4Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct> tHash_Lookup_row5 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct>) globalMap
						.get("tHash_Lookup_row5"));

				row5Struct row5HashKey = new row5Struct();
				row5Struct row5Default = new row5Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct> tHash_Lookup_row6 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct>) globalMap
						.get("tHash_Lookup_row6"));

				row6Struct row6HashKey = new row6Struct();
				row6Struct row6Default = new row6Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct> tHash_Lookup_row7 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct>) globalMap
						.get("tHash_Lookup_row7"));

				row7Struct row7HashKey = new row7Struct();
				row7Struct row7Default = new row7Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct> tHash_Lookup_row8 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct>) globalMap
						.get("tHash_Lookup_row8"));

				row8Struct row8HashKey = new row8Struct();
				row8Struct row8Default = new row8Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row10Struct> tHash_Lookup_row10 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row10Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row10Struct>) globalMap
						.get("tHash_Lookup_row10"));

				row10Struct row10HashKey = new row10Struct();
				row10Struct row10Default = new row10Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_1__Struct {
					String nivel;
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				cuadro_maestroStruct cuadro_maestro_tmp = new cuadro_maestroStruct();
				// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tPostgresqlInput_9 begin ] start
				 */

				ok_Hash.put("tPostgresqlInput_9", false);
				start_Hash
						.put("tPostgresqlInput_9", System.currentTimeMillis());

				currentComponent = "tPostgresqlInput_9";

				int tos_count_tPostgresqlInput_9 = 0;

				int nb_line_tPostgresqlInput_9 = 0;
				java.sql.Connection conn_tPostgresqlInput_9 = null;
				String driverClass_tPostgresqlInput_9 = "org.postgresql.Driver";
				java.lang.Class.forName(driverClass_tPostgresqlInput_9);
				String dbUser_tPostgresqlInput_9 = "postgres";

				final String decryptedPassword_tPostgresqlInput_9 = routines.system.PasswordEncryptUtil
						.decryptPassword("20c25fc55946d961a1ae663ef9965a0f4612aec36e0d50aa");

				String dbPwd_tPostgresqlInput_9 = decryptedPassword_tPostgresqlInput_9;

				String url_tPostgresqlInput_9 = "jdbc:postgresql://"
						+ "10.20.0.88" + ":" + "5432" + "/"
						+ "CO_UDISTRITAL_TEMPORAL";

				conn_tPostgresqlInput_9 = java.sql.DriverManager.getConnection(
						url_tPostgresqlInput_9, dbUser_tPostgresqlInput_9,
						dbPwd_tPostgresqlInput_9);

				conn_tPostgresqlInput_9.setAutoCommit(false);

				java.sql.Statement stmt_tPostgresqlInput_9 = conn_tPostgresqlInput_9
						.createStatement();

				String dbquery_tPostgresqlInput_9 = "SELECT id_anno, id_semestre,id_anno||'-'||id_semestre anno_semestre, codigo_proyecto, proyecto, codigo_facultad, \n     "
						+ "  facultad, codigo_proyecto_snies, proyecto_snies, modalidad, nivel\n  FROM \"CO_UDISTRITAL_TEMPORAL\".proyectos_periodos"
						+ " where id_semestre in (1,3,99) order by id_anno, id_semestre";

				globalMap.put("tPostgresqlInput_9_QUERY",
						dbquery_tPostgresqlInput_9);
				java.sql.ResultSet rs_tPostgresqlInput_9 = null;

				try {
					rs_tPostgresqlInput_9 = stmt_tPostgresqlInput_9
							.executeQuery(dbquery_tPostgresqlInput_9);
					java.sql.ResultSetMetaData rsmd_tPostgresqlInput_9 = rs_tPostgresqlInput_9
							.getMetaData();
					int colQtyInRs_tPostgresqlInput_9 = rsmd_tPostgresqlInput_9
							.getColumnCount();

					String tmpContent_tPostgresqlInput_9 = null;

					while (rs_tPostgresqlInput_9.next()) {
						nb_line_tPostgresqlInput_9++;

						if (colQtyInRs_tPostgresqlInput_9 < 1) {
							row9.id_anno = 0;
						} else {

							if (rs_tPostgresqlInput_9.getObject(1) != null) {
								row9.id_anno = rs_tPostgresqlInput_9.getInt(1);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tPostgresqlInput_9 < 2) {
							row9.id_semestre = 0;
						} else {

							if (rs_tPostgresqlInput_9.getObject(2) != null) {
								row9.id_semestre = rs_tPostgresqlInput_9
										.getInt(2);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tPostgresqlInput_9 < 3) {
							row9.anno_semestre = null;
						} else {

							row9.anno_semestre = routines.system.JDBCUtil
									.getString(rs_tPostgresqlInput_9, 3, false);
						}
						if (colQtyInRs_tPostgresqlInput_9 < 4) {
							row9.codigo_proyecto = 0;
						} else {

							if (rs_tPostgresqlInput_9.getObject(4) != null) {
								row9.codigo_proyecto = rs_tPostgresqlInput_9
										.getInt(4);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tPostgresqlInput_9 < 5) {
							row9.proyecto = null;
						} else {

							row9.proyecto = routines.system.JDBCUtil.getString(
									rs_tPostgresqlInput_9, 5, false);
						}
						if (colQtyInRs_tPostgresqlInput_9 < 6) {
							row9.codigo_facultad = null;
						} else {

							if (rs_tPostgresqlInput_9.getObject(6) != null) {
								row9.codigo_facultad = rs_tPostgresqlInput_9
										.getInt(6);
							} else {
								row9.codigo_facultad = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_9 < 7) {
							row9.facultad = null;
						} else {

							row9.facultad = routines.system.JDBCUtil.getString(
									rs_tPostgresqlInput_9, 7, false);
						}
						if (colQtyInRs_tPostgresqlInput_9 < 8) {
							row9.codigo_proyecto_snies = null;
						} else {

							if (rs_tPostgresqlInput_9.getObject(8) != null) {
								row9.codigo_proyecto_snies = rs_tPostgresqlInput_9
										.getInt(8);
							} else {
								row9.codigo_proyecto_snies = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_9 < 9) {
							row9.proyecto_snies = null;
						} else {

							row9.proyecto_snies = routines.system.JDBCUtil
									.getString(rs_tPostgresqlInput_9, 9, false);
						}
						if (colQtyInRs_tPostgresqlInput_9 < 10) {
							row9.modalidad = null;
						} else {

							row9.modalidad = routines.system.JDBCUtil
									.getString(rs_tPostgresqlInput_9, 10, false);
						}
						if (colQtyInRs_tPostgresqlInput_9 < 11) {
							row9.nivel = null;
						} else {

							row9.nivel = routines.system.JDBCUtil.getString(
									rs_tPostgresqlInput_9, 11, false);
						}

						/**
						 * [tPostgresqlInput_9 begin ] stop
						 */

						/**
						 * [tPostgresqlInput_9 main ] start
						 */

						currentComponent = "tPostgresqlInput_9";

						tos_count_tPostgresqlInput_9++;

						/**
						 * [tPostgresqlInput_9 main ] stop
						 */

						/**
						 * [tPostgresqlInput_9 process_data_begin ] start
						 */

						currentComponent = "tPostgresqlInput_9";

						/**
						 * [tPostgresqlInput_9 process_data_begin ] stop
						 */

						/**
						 * [tMap_1 main ] start
						 */

						currentComponent = "tMap_1";

						// row9
						// row9

						if (execStat) {
							runStat.updateStatOnConnection("row9" + iterateId,
									1, 1);
						}

						boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_1 = false;
						boolean mainRowRejected_tMap_1 = false;

						// /////////////////////////////////////////////
						// Starting Lookup Table "row1"
						// /////////////////////////////////////////////

						boolean forceLooprow1 = false;

						row1Struct row1ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_1 = false;

							row1HashKey.anno = row9.id_anno;

							row1HashKey.semestre = row9.id_semestre;

							row1HashKey.codigo_facultad = row9.codigo_facultad;

							row1HashKey.codigo_proyecto = row9.codigo_proyecto;

							row1HashKey.hashCodeDirty = true;

							tHash_Lookup_row1.lookup(row1HashKey);

						} // G_TM_M_020

						if (tHash_Lookup_row1 != null
								&& tHash_Lookup_row1.getCount(row1HashKey) > 1) { // G
																					// 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row1' and it contains more one result from keys :  row1.anno = '"
							// + row1HashKey.anno + "', row1.semestre = '" +
							// row1HashKey.semestre +
							// "', row1.codigo_facultad = '" +
							// row1HashKey.codigo_facultad +
							// "', row1.codigo_proyecto = '" +
							// row1HashKey.codigo_proyecto + "'");
						} // G 071

						row1Struct row1 = null;

						row1Struct fromLookup_row1 = null;
						row1 = row1Default;

						if (tHash_Lookup_row1 != null
								&& tHash_Lookup_row1.hasNext()) { // G 099

							fromLookup_row1 = tHash_Lookup_row1.next();

						} // G 099

						if (fromLookup_row1 != null) {
							row1 = fromLookup_row1;
						}

						// /////////////////////////////////////////////
						// Starting Lookup Table "row2"
						// /////////////////////////////////////////////

						boolean forceLooprow2 = false;

						row2Struct row2ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_1 = false;

							row2HashKey.anno = row9.id_anno;

							row2HashKey.semestre = row9.id_semestre;

							row2HashKey.codigo_facultad = row9.codigo_facultad;

							row2HashKey.codigo_proyecto = row9.codigo_proyecto;

							row2HashKey.hashCodeDirty = true;

							tHash_Lookup_row2.lookup(row2HashKey);

						} // G_TM_M_020

						if (tHash_Lookup_row2 != null
								&& tHash_Lookup_row2.getCount(row2HashKey) > 1) { // G
																					// 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row2' and it contains more one result from keys :  row2.anno = '"
							// + row2HashKey.anno + "', row2.semestre = '" +
							// row2HashKey.semestre +
							// "', row2.codigo_facultad = '" +
							// row2HashKey.codigo_facultad +
							// "', row2.codigo_proyecto = '" +
							// row2HashKey.codigo_proyecto + "'");
						} // G 071

						row2Struct row2 = null;

						row2Struct fromLookup_row2 = null;
						row2 = row2Default;

						if (tHash_Lookup_row2 != null
								&& tHash_Lookup_row2.hasNext()) { // G 099

							fromLookup_row2 = tHash_Lookup_row2.next();

						} // G 099

						if (fromLookup_row2 != null) {
							row2 = fromLookup_row2;
						}

						// /////////////////////////////////////////////
						// Starting Lookup Table "row3"
						// /////////////////////////////////////////////

						boolean forceLooprow3 = false;

						row3Struct row3ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_1 = false;

							row3HashKey.anno = row9.id_anno;

							row3HashKey.semestre = row9.id_semestre;

							row3HashKey.codigo_facultad = row9.codigo_facultad;

							row3HashKey.codigo_proyecto = row9.codigo_proyecto;

							row3HashKey.hashCodeDirty = true;

							tHash_Lookup_row3.lookup(row3HashKey);

						} // G_TM_M_020

						if (tHash_Lookup_row3 != null
								&& tHash_Lookup_row3.getCount(row3HashKey) > 1) { // G
																					// 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row3' and it contains more one result from keys :  row3.anno = '"
							// + row3HashKey.anno + "', row3.semestre = '" +
							// row3HashKey.semestre +
							// "', row3.codigo_facultad = '" +
							// row3HashKey.codigo_facultad +
							// "', row3.codigo_proyecto = '" +
							// row3HashKey.codigo_proyecto + "'");
						} // G 071

						row3Struct row3 = null;

						row3Struct fromLookup_row3 = null;
						row3 = row3Default;

						if (tHash_Lookup_row3 != null
								&& tHash_Lookup_row3.hasNext()) { // G 099

							fromLookup_row3 = tHash_Lookup_row3.next();

						} // G 099

						if (fromLookup_row3 != null) {
							row3 = fromLookup_row3;
						}

						// /////////////////////////////////////////////
						// Starting Lookup Table "row4"
						// /////////////////////////////////////////////

						boolean forceLooprow4 = false;

						row4Struct row4ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_1 = false;

							row4HashKey.anno = row9.id_anno;

							row4HashKey.semestre = row9.id_semestre;

							row4HashKey.codigo_facultad = row9.codigo_facultad;

							row4HashKey.codigo_proyecto = row9.codigo_proyecto;

							row4HashKey.hashCodeDirty = true;

							tHash_Lookup_row4.lookup(row4HashKey);

						} // G_TM_M_020

						if (tHash_Lookup_row4 != null
								&& tHash_Lookup_row4.getCount(row4HashKey) > 1) { // G
																					// 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row4' and it contains more one result from keys :  row4.anno = '"
							// + row4HashKey.anno + "', row4.semestre = '" +
							// row4HashKey.semestre +
							// "', row4.codigo_facultad = '" +
							// row4HashKey.codigo_facultad +
							// "', row4.codigo_proyecto = '" +
							// row4HashKey.codigo_proyecto + "'");
						} // G 071

						row4Struct row4 = null;

						row4Struct fromLookup_row4 = null;
						row4 = row4Default;

						if (tHash_Lookup_row4 != null
								&& tHash_Lookup_row4.hasNext()) { // G 099

							fromLookup_row4 = tHash_Lookup_row4.next();

						} // G 099

						if (fromLookup_row4 != null) {
							row4 = fromLookup_row4;
						}

						// /////////////////////////////////////////////
						// Starting Lookup Table "row5"
						// /////////////////////////////////////////////

						boolean forceLooprow5 = false;

						row5Struct row5ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_1 = false;

							row5HashKey.anno = row9.id_anno;

							row5HashKey.semestre = row9.id_semestre;

							Object exprKeyValue_row5__codigo_facultad = row9.codigo_facultad;
							if (exprKeyValue_row5__codigo_facultad == null) {
								hasCasePrimitiveKeyWithNull_tMap_1 = true;
							} else {
								row5HashKey.codigo_facultad = (int) (Integer) exprKeyValue_row5__codigo_facultad;
							}

							Object exprKeyValue_row5__codigo_proyecto = row9.codigo_proyecto;
							if (exprKeyValue_row5__codigo_proyecto == null) {
								hasCasePrimitiveKeyWithNull_tMap_1 = true;
							} else {
								row5HashKey.codigo_proyecto = (int) (Integer) exprKeyValue_row5__codigo_proyecto;
							}

							row5HashKey.hashCodeDirty = true;

							if (!hasCasePrimitiveKeyWithNull_tMap_1) { // G_TM_M_091

								tHash_Lookup_row5.lookup(row5HashKey);

							} // G_TM_M_091

						} // G_TM_M_020

						if (tHash_Lookup_row5 != null
								&& tHash_Lookup_row5.getCount(row5HashKey) > 1) { // G
																					// 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row5' and it contains more one result from keys :  row5.anno = '"
							// + row5HashKey.anno + "', row5.semestre = '" +
							// row5HashKey.semestre +
							// "', row5.codigo_facultad = '" +
							// row5HashKey.codigo_facultad +
							// "', row5.codigo_proyecto = '" +
							// row5HashKey.codigo_proyecto + "'");
						} // G 071

						row5Struct row5 = null;

						row5Struct fromLookup_row5 = null;
						row5 = row5Default;

						if (tHash_Lookup_row5 != null
								&& tHash_Lookup_row5.hasNext()) { // G 099

							fromLookup_row5 = tHash_Lookup_row5.next();

						} // G 099

						if (fromLookup_row5 != null) {
							row5 = fromLookup_row5;
						}

						// /////////////////////////////////////////////
						// Starting Lookup Table "row6"
						// /////////////////////////////////////////////

						boolean forceLooprow6 = false;

						row6Struct row6ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_1 = false;

							row6HashKey.anno = row9.id_anno;

							row6HashKey.semestre = row9.id_semestre;

							row6HashKey.codigo_facultad = row9.codigo_facultad;

							row6HashKey.codigo_proyecto_snies = row9.codigo_proyecto_snies;

							row6HashKey.hashCodeDirty = true;

							tHash_Lookup_row6.lookup(row6HashKey);

						} // G_TM_M_020

						if (tHash_Lookup_row6 != null
								&& tHash_Lookup_row6.getCount(row6HashKey) > 1) { // G
																					// 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row6' and it contains more one result from keys :  row6.anno = '"
							// + row6HashKey.anno + "', row6.semestre = '" +
							// row6HashKey.semestre +
							// "', row6.codigo_facultad = '" +
							// row6HashKey.codigo_facultad +
							// "', row6.codigo_proyecto_snies = '" +
							// row6HashKey.codigo_proyecto_snies + "'");
						} // G 071

						row6Struct row6 = null;

						row6Struct fromLookup_row6 = null;
						row6 = row6Default;

						if (tHash_Lookup_row6 != null
								&& tHash_Lookup_row6.hasNext()) { // G 099

							fromLookup_row6 = tHash_Lookup_row6.next();

						} // G 099

						if (fromLookup_row6 != null) {
							row6 = fromLookup_row6;
						}

						// /////////////////////////////////////////////
						// Starting Lookup Table "row7"
						// /////////////////////////////////////////////

						boolean forceLooprow7 = false;

						row7Struct row7ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_1 = false;

							row7HashKey.anno = row9.id_anno;

							row7HashKey.semestre = row9.id_semestre;

							Object exprKeyValue_row7__codigo_facultad = row9.codigo_facultad;
							if (exprKeyValue_row7__codigo_facultad == null) {
								hasCasePrimitiveKeyWithNull_tMap_1 = true;
							} else {
								row7HashKey.codigo_facultad = (int) (Integer) exprKeyValue_row7__codigo_facultad;
							}

							Object exprKeyValue_row7__codigo_proyecto = row9.codigo_proyecto;
							if (exprKeyValue_row7__codigo_proyecto == null) {
								hasCasePrimitiveKeyWithNull_tMap_1 = true;
							} else {
								row7HashKey.codigo_proyecto = (int) (Integer) exprKeyValue_row7__codigo_proyecto;
							}

							row7HashKey.hashCodeDirty = true;

							if (!hasCasePrimitiveKeyWithNull_tMap_1) { // G_TM_M_091

								tHash_Lookup_row7.lookup(row7HashKey);

							} // G_TM_M_091

						} // G_TM_M_020

						if (tHash_Lookup_row7 != null
								&& tHash_Lookup_row7.getCount(row7HashKey) > 1) { // G
																					// 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row7' and it contains more one result from keys :  row7.anno = '"
							// + row7HashKey.anno + "', row7.semestre = '" +
							// row7HashKey.semestre +
							// "', row7.codigo_facultad = '" +
							// row7HashKey.codigo_facultad +
							// "', row7.codigo_proyecto = '" +
							// row7HashKey.codigo_proyecto + "'");
						} // G 071

						row7Struct row7 = null;

						row7Struct fromLookup_row7 = null;
						row7 = row7Default;

						if (tHash_Lookup_row7 != null
								&& tHash_Lookup_row7.hasNext()) { // G 099

							fromLookup_row7 = tHash_Lookup_row7.next();

						} // G 099

						if (fromLookup_row7 != null) {
							row7 = fromLookup_row7;
						}

						// /////////////////////////////////////////////
						// Starting Lookup Table "row8"
						// /////////////////////////////////////////////

						boolean forceLooprow8 = false;

						row8Struct row8ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_1 = false;

							row8HashKey.anno = row9.id_anno;

							row8HashKey.semestre = row9.id_semestre;

							row8HashKey.codigo_facultad = row9.codigo_facultad;

							row8HashKey.codigo_proyecto = row9.codigo_proyecto;

							row8HashKey.hashCodeDirty = true;

							tHash_Lookup_row8.lookup(row8HashKey);

						} // G_TM_M_020

						if (tHash_Lookup_row8 != null
								&& tHash_Lookup_row8.getCount(row8HashKey) > 1) { // G
																					// 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row8' and it contains more one result from keys :  row8.anno = '"
							// + row8HashKey.anno + "', row8.semestre = '" +
							// row8HashKey.semestre +
							// "', row8.codigo_facultad = '" +
							// row8HashKey.codigo_facultad +
							// "', row8.codigo_proyecto = '" +
							// row8HashKey.codigo_proyecto + "'");
						} // G 071

						row8Struct row8 = null;

						row8Struct fromLookup_row8 = null;
						row8 = row8Default;

						if (tHash_Lookup_row8 != null
								&& tHash_Lookup_row8.hasNext()) { // G 099

							fromLookup_row8 = tHash_Lookup_row8.next();

						} // G 099

						if (fromLookup_row8 != null) {
							row8 = fromLookup_row8;
						}

						// /////////////////////////////////////////////
						// Starting Lookup Table "row10"
						// /////////////////////////////////////////////

						boolean forceLooprow10 = false;

						row10Struct row10ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_1 = false;

							row10HashKey.periodo = row9.anno_semestre;

							row10HashKey.proyecto = row9.proyecto;

							row10HashKey.hashCodeDirty = true;

							tHash_Lookup_row10.lookup(row10HashKey);

						} // G_TM_M_020

						if (tHash_Lookup_row10 != null
								&& tHash_Lookup_row10.getCount(row10HashKey) > 1) { // G
																					// 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row10' and it contains more one result from keys :  row10.periodo = '"
							// + row10HashKey.periodo + "', row10.proyecto = '"
							// + row10HashKey.proyecto + "'");
						} // G 071

						row10Struct row10 = null;

						row10Struct fromLookup_row10 = null;
						row10 = row10Default;

						if (tHash_Lookup_row10 != null
								&& tHash_Lookup_row10.hasNext()) { // G 099

							fromLookup_row10 = tHash_Lookup_row10.next();

						} // G 099

						if (fromLookup_row10 != null) {
							row10 = fromLookup_row10;
						}

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_1__Struct Var = Var__tMap_1;
							Var.nivel = row9.nivel != null ? row9.nivel
									.equals("PREGRADO") ? "PREGRADO"
									: "POSGRADO" : row9.nivel;// ###############################
							// ###############################
							// # Output tables

							cuadro_maestro = null;

							// # Output table : 'cuadro_maestro'
							cuadro_maestro_tmp.anno = row9.id_anno;
							cuadro_maestro_tmp.semestre = row9.id_semestre;
							cuadro_maestro_tmp.anno_semestre = row9.id_anno
									+ "-" + row9.id_semestre;
							cuadro_maestro_tmp.codigo_facultad = row9.codigo_facultad;
							cuadro_maestro_tmp.facultad = row9.facultad;
							cuadro_maestro_tmp.codigo_proyecto_snies = row9.codigo_proyecto_snies;
							cuadro_maestro_tmp.proyecto_snies = row9.proyecto_snies == null ? "NO_REGISTRA"
									: TalendString
											.removeAccents(row9.proyecto_snies);
							cuadro_maestro_tmp.codigo_proyecto = row9.codigo_proyecto;
							cuadro_maestro_tmp.proyecto = row9.proyecto;
							cuadro_maestro_tmp.nivel = Var.nivel;
							cuadro_maestro_tmp.modalidad = row9.modalidad;
							cuadro_maestro_tmp.inscritos = row3.inscritos;
							cuadro_maestro_tmp.admitidos = row2.admitidos;
							cuadro_maestro_tmp.primiparos = row4.primiparos;
							cuadro_maestro_tmp.matriculados = row1.matriculados;
							cuadro_maestro_tmp.egresados = row5.egresados;
							cuadro_maestro_tmp.graduados = row8.graduados;
							cuadro_maestro_tmp.retirados = row7.retiros;
							cuadro_maestro_tmp.cupos = row6.cupos;
							cuadro_maestro_tmp.desercion_spadies = row10.desercion;
							cuadro_maestro_tmp.fecha_carga = TalendDate
									.getCurrentDate();
							cuadro_maestro = cuadro_maestro_tmp;
							// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_1 = false;

						tos_count_tMap_1++;

						/**
						 * [tMap_1 main ] stop
						 */

						/**
						 * [tMap_1 process_data_begin ] start
						 */

						currentComponent = "tMap_1";

						/**
						 * [tMap_1 process_data_begin ] stop
						 */
						// Start of branch "cuadro_maestro"
						if (cuadro_maestro != null) {

							/**
							 * [tPostgresqlOutput_1 main ] start
							 */

							currentComponent = "tPostgresqlOutput_1";

							// cuadro_maestro
							// cuadro_maestro

							if (execStat) {
								runStat.updateStatOnConnection("cuadro_maestro"
										+ iterateId, 1, 1);
							}

							whetherReject_tPostgresqlOutput_1 = false;
							int updateFlag_tPostgresqlOutput_1 = 0;
							if (cuadro_maestro.anno_semestre == null) {
								pstmtUpdate_tPostgresqlOutput_1.setNull(1,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tPostgresqlOutput_1.setString(1,
										cuadro_maestro.anno_semestre);
							}

							if (cuadro_maestro.codigo_facultad == null) {
								pstmtUpdate_tPostgresqlOutput_1.setNull(2,
										java.sql.Types.INTEGER);
							} else {
								pstmtUpdate_tPostgresqlOutput_1.setInt(2,
										cuadro_maestro.codigo_facultad);
							}

							if (cuadro_maestro.facultad == null) {
								pstmtUpdate_tPostgresqlOutput_1.setNull(3,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tPostgresqlOutput_1.setString(3,
										cuadro_maestro.facultad);
							}

							if (cuadro_maestro.codigo_proyecto_snies == null) {
								pstmtUpdate_tPostgresqlOutput_1.setNull(4,
										java.sql.Types.INTEGER);
							} else {
								pstmtUpdate_tPostgresqlOutput_1.setInt(4,
										cuadro_maestro.codigo_proyecto_snies);
							}

							if (cuadro_maestro.proyecto_snies == null) {
								pstmtUpdate_tPostgresqlOutput_1.setNull(5,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tPostgresqlOutput_1.setString(5,
										cuadro_maestro.proyecto_snies);
							}

							if (cuadro_maestro.proyecto == null) {
								pstmtUpdate_tPostgresqlOutput_1.setNull(6,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tPostgresqlOutput_1.setString(6,
										cuadro_maestro.proyecto);
							}

							if (cuadro_maestro.nivel == null) {
								pstmtUpdate_tPostgresqlOutput_1.setNull(7,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tPostgresqlOutput_1.setString(7,
										cuadro_maestro.nivel);
							}

							if (cuadro_maestro.modalidad == null) {
								pstmtUpdate_tPostgresqlOutput_1.setNull(8,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tPostgresqlOutput_1.setString(8,
										cuadro_maestro.modalidad);
							}

							if (cuadro_maestro.inscritos == null) {
								pstmtUpdate_tPostgresqlOutput_1.setNull(9,
										java.sql.Types.INTEGER);
							} else {
								pstmtUpdate_tPostgresqlOutput_1.setInt(9,
										cuadro_maestro.inscritos);
							}

							if (cuadro_maestro.admitidos == null) {
								pstmtUpdate_tPostgresqlOutput_1.setNull(10,
										java.sql.Types.INTEGER);
							} else {
								pstmtUpdate_tPostgresqlOutput_1.setInt(10,
										cuadro_maestro.admitidos);
							}

							if (cuadro_maestro.primiparos == null) {
								pstmtUpdate_tPostgresqlOutput_1.setNull(11,
										java.sql.Types.INTEGER);
							} else {
								pstmtUpdate_tPostgresqlOutput_1.setInt(11,
										cuadro_maestro.primiparos);
							}

							if (cuadro_maestro.matriculados == null) {
								pstmtUpdate_tPostgresqlOutput_1.setNull(12,
										java.sql.Types.INTEGER);
							} else {
								pstmtUpdate_tPostgresqlOutput_1.setInt(12,
										cuadro_maestro.matriculados);
							}

							if (cuadro_maestro.egresados == null) {
								pstmtUpdate_tPostgresqlOutput_1.setNull(13,
										java.sql.Types.INTEGER);
							} else {
								pstmtUpdate_tPostgresqlOutput_1.setInt(13,
										cuadro_maestro.egresados);
							}

							if (cuadro_maestro.graduados == null) {
								pstmtUpdate_tPostgresqlOutput_1.setNull(14,
										java.sql.Types.INTEGER);
							} else {
								pstmtUpdate_tPostgresqlOutput_1.setInt(14,
										cuadro_maestro.graduados);
							}

							if (cuadro_maestro.retirados == null) {
								pstmtUpdate_tPostgresqlOutput_1.setNull(15,
										java.sql.Types.INTEGER);
							} else {
								pstmtUpdate_tPostgresqlOutput_1.setInt(15,
										cuadro_maestro.retirados);
							}

							if (cuadro_maestro.cupos == null) {
								pstmtUpdate_tPostgresqlOutput_1.setNull(16,
										java.sql.Types.INTEGER);
							} else {
								pstmtUpdate_tPostgresqlOutput_1.setInt(16,
										cuadro_maestro.cupos);
							}

							if (cuadro_maestro.desercion_spadies == null) {
								pstmtUpdate_tPostgresqlOutput_1.setNull(17,
										java.sql.Types.DOUBLE);
							} else {
								pstmtUpdate_tPostgresqlOutput_1.setDouble(17,
										cuadro_maestro.desercion_spadies);
							}

							if (cuadro_maestro.fecha_carga != null) {
								pstmtUpdate_tPostgresqlOutput_1.setTimestamp(
										18,
										new java.sql.Timestamp(
												cuadro_maestro.fecha_carga
														.getTime()));
							} else {
								pstmtUpdate_tPostgresqlOutput_1.setNull(18,
										java.sql.Types.TIMESTAMP);
							}

							pstmtUpdate_tPostgresqlOutput_1.setInt(
									19 + count_tPostgresqlOutput_1,
									cuadro_maestro.anno);

							pstmtUpdate_tPostgresqlOutput_1.setInt(
									20 + count_tPostgresqlOutput_1,
									cuadro_maestro.semestre);

							pstmtUpdate_tPostgresqlOutput_1.setInt(
									21 + count_tPostgresqlOutput_1,
									cuadro_maestro.codigo_proyecto);

							try {

								updateFlag_tPostgresqlOutput_1 = pstmtUpdate_tPostgresqlOutput_1
										.executeUpdate();
								updatedCount_tPostgresqlOutput_1 = updatedCount_tPostgresqlOutput_1
										+ updateFlag_tPostgresqlOutput_1;

								if (updateFlag_tPostgresqlOutput_1 == 0) {

									pstmtInsert_tPostgresqlOutput_1.setInt(1,
											cuadro_maestro.anno);

									pstmtInsert_tPostgresqlOutput_1.setInt(2,
											cuadro_maestro.semestre);

									if (cuadro_maestro.anno_semestre == null) {
										pstmtInsert_tPostgresqlOutput_1
												.setNull(3,
														java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tPostgresqlOutput_1
												.setString(
														3,
														cuadro_maestro.anno_semestre);
									}

									if (cuadro_maestro.codigo_facultad == null) {
										pstmtInsert_tPostgresqlOutput_1
												.setNull(4,
														java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tPostgresqlOutput_1.setInt(
												4,
												cuadro_maestro.codigo_facultad);
									}

									if (cuadro_maestro.facultad == null) {
										pstmtInsert_tPostgresqlOutput_1
												.setNull(5,
														java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tPostgresqlOutput_1
												.setString(5,
														cuadro_maestro.facultad);
									}

									if (cuadro_maestro.codigo_proyecto_snies == null) {
										pstmtInsert_tPostgresqlOutput_1
												.setNull(6,
														java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tPostgresqlOutput_1
												.setInt(6,
														cuadro_maestro.codigo_proyecto_snies);
									}

									if (cuadro_maestro.proyecto_snies == null) {
										pstmtInsert_tPostgresqlOutput_1
												.setNull(7,
														java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tPostgresqlOutput_1
												.setString(
														7,
														cuadro_maestro.proyecto_snies);
									}

									pstmtInsert_tPostgresqlOutput_1.setInt(8,
											cuadro_maestro.codigo_proyecto);

									if (cuadro_maestro.proyecto == null) {
										pstmtInsert_tPostgresqlOutput_1
												.setNull(9,
														java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tPostgresqlOutput_1
												.setString(9,
														cuadro_maestro.proyecto);
									}

									if (cuadro_maestro.nivel == null) {
										pstmtInsert_tPostgresqlOutput_1
												.setNull(10,
														java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tPostgresqlOutput_1
												.setString(10,
														cuadro_maestro.nivel);
									}

									if (cuadro_maestro.modalidad == null) {
										pstmtInsert_tPostgresqlOutput_1
												.setNull(11,
														java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tPostgresqlOutput_1
												.setString(
														11,
														cuadro_maestro.modalidad);
									}

									if (cuadro_maestro.inscritos == null) {
										pstmtInsert_tPostgresqlOutput_1
												.setNull(12,
														java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tPostgresqlOutput_1.setInt(
												12, cuadro_maestro.inscritos);
									}

									if (cuadro_maestro.admitidos == null) {
										pstmtInsert_tPostgresqlOutput_1
												.setNull(13,
														java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tPostgresqlOutput_1.setInt(
												13, cuadro_maestro.admitidos);
									}

									if (cuadro_maestro.primiparos == null) {
										pstmtInsert_tPostgresqlOutput_1
												.setNull(14,
														java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tPostgresqlOutput_1.setInt(
												14, cuadro_maestro.primiparos);
									}

									if (cuadro_maestro.matriculados == null) {
										pstmtInsert_tPostgresqlOutput_1
												.setNull(15,
														java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tPostgresqlOutput_1
												.setInt(15,
														cuadro_maestro.matriculados);
									}

									if (cuadro_maestro.egresados == null) {
										pstmtInsert_tPostgresqlOutput_1
												.setNull(16,
														java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tPostgresqlOutput_1.setInt(
												16, cuadro_maestro.egresados);
									}

									if (cuadro_maestro.graduados == null) {
										pstmtInsert_tPostgresqlOutput_1
												.setNull(17,
														java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tPostgresqlOutput_1.setInt(
												17, cuadro_maestro.graduados);
									}

									if (cuadro_maestro.retirados == null) {
										pstmtInsert_tPostgresqlOutput_1
												.setNull(18,
														java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tPostgresqlOutput_1.setInt(
												18, cuadro_maestro.retirados);
									}

									if (cuadro_maestro.cupos == null) {
										pstmtInsert_tPostgresqlOutput_1
												.setNull(19,
														java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tPostgresqlOutput_1.setInt(
												19, cuadro_maestro.cupos);
									}

									if (cuadro_maestro.desercion_spadies == null) {
										pstmtInsert_tPostgresqlOutput_1
												.setNull(20,
														java.sql.Types.DOUBLE);
									} else {
										pstmtInsert_tPostgresqlOutput_1
												.setDouble(
														20,
														cuadro_maestro.desercion_spadies);
									}

									if (cuadro_maestro.fecha_carga != null) {
										pstmtInsert_tPostgresqlOutput_1
												.setTimestamp(
														21,
														new java.sql.Timestamp(
																cuadro_maestro.fecha_carga
																		.getTime()));
									} else {
										pstmtInsert_tPostgresqlOutput_1
												.setNull(
														21,
														java.sql.Types.TIMESTAMP);
									}

									insertedCount_tPostgresqlOutput_1 = insertedCount_tPostgresqlOutput_1
											+ pstmtInsert_tPostgresqlOutput_1
													.executeUpdate();
									nb_line_tPostgresqlOutput_1++;

								} else {
									nb_line_tPostgresqlOutput_1++;

								}
							} catch (java.lang.Exception e) {

								whetherReject_tPostgresqlOutput_1 = true;
								throw (e);
							}
							commitCounter_tPostgresqlOutput_1++;
							if (commitEvery_tPostgresqlOutput_1 <= commitCounter_tPostgresqlOutput_1) {
								conn_tPostgresqlOutput_1.commit();

								commitCounter_tPostgresqlOutput_1 = 0;
							}

							tos_count_tPostgresqlOutput_1++;

							/**
							 * [tPostgresqlOutput_1 main ] stop
							 */

							/**
							 * [tPostgresqlOutput_1 process_data_begin ] start
							 */

							currentComponent = "tPostgresqlOutput_1";

							/**
							 * [tPostgresqlOutput_1 process_data_begin ] stop
							 */

							/**
							 * [tPostgresqlOutput_1 process_data_end ] start
							 */

							currentComponent = "tPostgresqlOutput_1";

							/**
							 * [tPostgresqlOutput_1 process_data_end ] stop
							 */

						} // End of branch "cuadro_maestro"

						/**
						 * [tMap_1 process_data_end ] start
						 */

						currentComponent = "tMap_1";

						/**
						 * [tMap_1 process_data_end ] stop
						 */

						/**
						 * [tPostgresqlInput_9 process_data_end ] start
						 */

						currentComponent = "tPostgresqlInput_9";

						/**
						 * [tPostgresqlInput_9 process_data_end ] stop
						 */

						/**
						 * [tPostgresqlInput_9 end ] start
						 */

						currentComponent = "tPostgresqlInput_9";

					}
				} finally {
					if (rs_tPostgresqlInput_9 != null) {
						rs_tPostgresqlInput_9.close();
					}
					if (stmt_tPostgresqlInput_9 != null) {
						stmt_tPostgresqlInput_9.close();
					}
					if (conn_tPostgresqlInput_9 != null
							&& !conn_tPostgresqlInput_9.isClosed()) {

						conn_tPostgresqlInput_9.commit();

						conn_tPostgresqlInput_9.close();

					}

				}
				globalMap.put("tPostgresqlInput_9_NB_LINE",
						nb_line_tPostgresqlInput_9);

				ok_Hash.put("tPostgresqlInput_9", true);
				end_Hash.put("tPostgresqlInput_9", System.currentTimeMillis());

				/**
				 * [tPostgresqlInput_9 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row1 != null) {
					tHash_Lookup_row1.endGet();
				}
				globalMap.remove("tHash_Lookup_row1");

				if (tHash_Lookup_row2 != null) {
					tHash_Lookup_row2.endGet();
				}
				globalMap.remove("tHash_Lookup_row2");

				if (tHash_Lookup_row3 != null) {
					tHash_Lookup_row3.endGet();
				}
				globalMap.remove("tHash_Lookup_row3");

				if (tHash_Lookup_row4 != null) {
					tHash_Lookup_row4.endGet();
				}
				globalMap.remove("tHash_Lookup_row4");

				if (tHash_Lookup_row5 != null) {
					tHash_Lookup_row5.endGet();
				}
				globalMap.remove("tHash_Lookup_row5");

				if (tHash_Lookup_row6 != null) {
					tHash_Lookup_row6.endGet();
				}
				globalMap.remove("tHash_Lookup_row6");

				if (tHash_Lookup_row7 != null) {
					tHash_Lookup_row7.endGet();
				}
				globalMap.remove("tHash_Lookup_row7");

				if (tHash_Lookup_row8 != null) {
					tHash_Lookup_row8.endGet();
				}
				globalMap.remove("tHash_Lookup_row8");

				if (tHash_Lookup_row10 != null) {
					tHash_Lookup_row10.endGet();
				}
				globalMap.remove("tHash_Lookup_row10");

				// ###############################

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row9" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tPostgresqlOutput_1 end ] start
				 */

				currentComponent = "tPostgresqlOutput_1";

				if (pstmtUpdate_tPostgresqlOutput_1 != null) {
					pstmtUpdate_tPostgresqlOutput_1.close();
					resourceMap.remove("pstmtUpdate_tPostgresqlOutput_1");
				}
				if (pstmtInsert_tPostgresqlOutput_1 != null) {
					pstmtInsert_tPostgresqlOutput_1.close();
					resourceMap.remove("pstmtInsert_tPostgresqlOutput_1");
				}
				resourceMap.put("statementClosed_tPostgresqlOutput_1", true);

				conn_tPostgresqlOutput_1.commit();

				conn_tPostgresqlOutput_1.close();

				resourceMap.put("finish_tPostgresqlOutput_1", true);

				nb_line_deleted_tPostgresqlOutput_1 = nb_line_deleted_tPostgresqlOutput_1
						+ deletedCount_tPostgresqlOutput_1;
				nb_line_update_tPostgresqlOutput_1 = nb_line_update_tPostgresqlOutput_1
						+ updatedCount_tPostgresqlOutput_1;
				nb_line_inserted_tPostgresqlOutput_1 = nb_line_inserted_tPostgresqlOutput_1
						+ insertedCount_tPostgresqlOutput_1;
				nb_line_rejected_tPostgresqlOutput_1 = nb_line_rejected_tPostgresqlOutput_1
						+ rejectedCount_tPostgresqlOutput_1;

				globalMap.put("tPostgresqlOutput_1_NB_LINE",
						nb_line_tPostgresqlOutput_1);
				globalMap.put("tPostgresqlOutput_1_NB_LINE_UPDATED",
						nb_line_update_tPostgresqlOutput_1);
				globalMap.put("tPostgresqlOutput_1_NB_LINE_INSERTED",
						nb_line_inserted_tPostgresqlOutput_1);
				globalMap.put("tPostgresqlOutput_1_NB_LINE_DELETED",
						nb_line_deleted_tPostgresqlOutput_1);
				globalMap.put("tPostgresqlOutput_1_NB_LINE_REJECTED",
						nb_line_rejected_tPostgresqlOutput_1);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("cuadro_maestro"
								+ iterateId, 2, 0);
					}
				}

				ok_Hash.put("tPostgresqlOutput_1", true);
				end_Hash.put("tPostgresqlOutput_1", System.currentTimeMillis());

				/**
				 * [tPostgresqlOutput_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_row3");

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_row2");

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_row1");

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_row4");

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_row5");

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_row6");

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_row7");

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_row8");

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_row10");

			try {

				/**
				 * [tPostgresqlInput_9 finally ] start
				 */

				currentComponent = "tPostgresqlInput_9";

				/**
				 * [tPostgresqlInput_9 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tPostgresqlOutput_1 finally ] start
				 */

				currentComponent = "tPostgresqlOutput_1";

				try {
					if (resourceMap.get("statementClosed_tPostgresqlOutput_1") == null) {
						java.sql.PreparedStatement pstmtUpdateToClose_tPostgresqlOutput_1 = null;
						if ((pstmtUpdateToClose_tPostgresqlOutput_1 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmtUpdate_tPostgresqlOutput_1")) != null) {
							pstmtUpdateToClose_tPostgresqlOutput_1.close();
						}
						java.sql.PreparedStatement pstmtInsertToClose_tPostgresqlOutput_1 = null;
						if ((pstmtInsertToClose_tPostgresqlOutput_1 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmtInsert_tPostgresqlOutput_1")) != null) {
							pstmtInsertToClose_tPostgresqlOutput_1.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tPostgresqlOutput_1") == null) {
						java.sql.Connection ctn_tPostgresqlOutput_1 = null;
						if ((ctn_tPostgresqlOutput_1 = (java.sql.Connection) resourceMap
								.get("conn_tPostgresqlOutput_1")) != null) {
							try {
								ctn_tPostgresqlOutput_1.close();
							} catch (java.sql.SQLException sqlEx_tPostgresqlOutput_1) {
								String errorMessage_tPostgresqlOutput_1 = "failed to close the connection in tPostgresqlOutput_1 :"
										+ sqlEx_tPostgresqlOutput_1
												.getMessage();
								System.err
										.println(errorMessage_tPostgresqlOutput_1);
							}
						}
					}
				}

				/**
				 * [tPostgresqlOutput_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostgresqlInput_9_SUBPROCESS_STATE", 1);
	}

	public static class row3Struct implements
			routines.system.IPersistableComparableLookupRow<row3Struct> {
		final static byte[] commonByteArrayLock_DMINDICADORES_cuadro_maestro_estudiantes = new byte[0];
		static byte[] commonByteArray_DMINDICADORES_cuadro_maestro_estudiantes = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer anno;

		public Integer getAnno() {
			return this.anno;
		}

		public Integer semestre;

		public Integer getSemestre() {
			return this.semestre;
		}

		public String anno_semestre;

		public String getAnno_semestre() {
			return this.anno_semestre;
		}

		public Integer codigo_facultad;

		public Integer getCodigo_facultad() {
			return this.codigo_facultad;
		}

		public String facultad;

		public String getFacultad() {
			return this.facultad;
		}

		public Integer codigo_proyecto_snies;

		public Integer getCodigo_proyecto_snies() {
			return this.codigo_proyecto_snies;
		}

		public String proyecto_snies;

		public String getProyecto_snies() {
			return this.proyecto_snies;
		}

		public Integer codigo_proyecto;

		public Integer getCodigo_proyecto() {
			return this.codigo_proyecto;
		}

		public String proyecto;

		public String getProyecto() {
			return this.proyecto;
		}

		public String nivel;

		public String getNivel() {
			return this.nivel;
		}

		public Integer inscritos;

		public Integer getInscritos() {
			return this.inscritos;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.anno == null) ? 0 : this.anno.hashCode());

				result = prime
						* result
						+ ((this.semestre == null) ? 0 : this.semestre
								.hashCode());

				result = prime
						* result
						+ ((this.codigo_facultad == null) ? 0
								: this.codigo_facultad.hashCode());

				result = prime
						* result
						+ ((this.codigo_proyecto == null) ? 0
								: this.codigo_proyecto.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row3Struct other = (row3Struct) obj;

			if (this.anno == null) {
				if (other.anno != null)
					return false;

			} else if (!this.anno.equals(other.anno))

				return false;

			if (this.semestre == null) {
				if (other.semestre != null)
					return false;

			} else if (!this.semestre.equals(other.semestre))

				return false;

			if (this.codigo_facultad == null) {
				if (other.codigo_facultad != null)
					return false;

			} else if (!this.codigo_facultad.equals(other.codigo_facultad))

				return false;

			if (this.codigo_proyecto == null) {
				if (other.codigo_proyecto != null)
					return false;

			} else if (!this.codigo_proyecto.equals(other.codigo_proyecto))

				return false;

			return true;
		}

		public void copyDataTo(row3Struct other) {

			other.anno = this.anno;
			other.semestre = this.semestre;
			other.anno_semestre = this.anno_semestre;
			other.codigo_facultad = this.codigo_facultad;
			other.facultad = this.facultad;
			other.codigo_proyecto_snies = this.codigo_proyecto_snies;
			other.proyecto_snies = this.proyecto_snies;
			other.codigo_proyecto = this.codigo_proyecto;
			other.proyecto = this.proyecto;
			other.nivel = this.nivel;
			other.inscritos = this.inscritos;

		}

		public void copyKeysDataTo(row3Struct other) {

			other.anno = this.anno;
			other.semestre = this.semestre;
			other.codigo_facultad = this.codigo_facultad;
			other.codigo_proyecto = this.codigo_proyecto;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DMINDICADORES_cuadro_maestro_estudiantes) {

				try {

					int length = 0;

					this.anno = readInteger(dis);

					this.semestre = readInteger(dis);

					this.codigo_facultad = readInteger(dis);

					this.codigo_proyecto = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.anno, dos);

				// Integer

				writeInteger(this.semestre, dos);

				// Integer

				writeInteger(this.codigo_facultad, dos);

				// Integer

				writeInteger(this.codigo_proyecto, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.anno_semestre = readString(dis, ois);

				this.facultad = readString(dis, ois);

				this.codigo_proyecto_snies = readInteger(dis, ois);

				this.proyecto_snies = readString(dis, ois);

				this.proyecto = readString(dis, ois);

				this.nivel = readString(dis, ois);

				this.inscritos = readInteger(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.anno_semestre, dos, oos);

				writeString(this.facultad, dos, oos);

				writeInteger(this.codigo_proyecto_snies, dos, oos);

				writeString(this.proyecto_snies, dos, oos);

				writeString(this.proyecto, dos, oos);

				writeString(this.nivel, dos, oos);

				writeInteger(this.inscritos, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("anno=" + String.valueOf(anno));
			sb.append(",semestre=" + String.valueOf(semestre));
			sb.append(",anno_semestre=" + anno_semestre);
			sb.append(",codigo_facultad=" + String.valueOf(codigo_facultad));
			sb.append(",facultad=" + facultad);
			sb.append(",codigo_proyecto_snies="
					+ String.valueOf(codigo_proyecto_snies));
			sb.append(",proyecto_snies=" + proyecto_snies);
			sb.append(",codigo_proyecto=" + String.valueOf(codigo_proyecto));
			sb.append(",proyecto=" + proyecto);
			sb.append(",nivel=" + nivel);
			sb.append(",inscritos=" + String.valueOf(inscritos));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.anno, other.anno);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.semestre, other.semestre);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.codigo_facultad,
					other.codigo_facultad);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.codigo_proyecto,
					other.codigo_proyecto);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tPostgresqlInput_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row3Struct row3 = new row3Struct();

				/**
				 * [tAdvancedHash_row3 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row3", false);
				start_Hash
						.put("tAdvancedHash_row3", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row3";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row3" + iterateId, 0, 0);

					}
				}

				int tos_count_tAdvancedHash_row3 = 0;

				// connection name:row3
				// source node:tPostgresqlInput_1 -
				// inputs:(after_tPostgresqlInput_9) outputs:(row3,row3) |
				// target node:tAdvancedHash_row3 - inputs:(row3) outputs:()
				// linked node: tMap_1 -
				// inputs:(row9,row3,row2,row1,row4,row5,row6,row7,row8,row10)
				// outputs:(cuadro_maestro)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row3 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct> tHash_Lookup_row3 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row3Struct> getLookup(matchingModeEnum_row3);

				globalMap.put("tHash_Lookup_row3", tHash_Lookup_row3);

				/**
				 * [tAdvancedHash_row3 begin ] stop
				 */

				/**
				 * [tPostgresqlInput_1 begin ] start
				 */

				ok_Hash.put("tPostgresqlInput_1", false);
				start_Hash
						.put("tPostgresqlInput_1", System.currentTimeMillis());

				currentComponent = "tPostgresqlInput_1";

				int tos_count_tPostgresqlInput_1 = 0;

				int nb_line_tPostgresqlInput_1 = 0;
				java.sql.Connection conn_tPostgresqlInput_1 = null;
				String driverClass_tPostgresqlInput_1 = "org.postgresql.Driver";
				java.lang.Class.forName(driverClass_tPostgresqlInput_1);
				String dbUser_tPostgresqlInput_1 = "postgres";

				final String decryptedPassword_tPostgresqlInput_1 = routines.system.PasswordEncryptUtil
						.decryptPassword("610243e4ca33e325f4f7aba1746784ea");

				String dbPwd_tPostgresqlInput_1 = decryptedPassword_tPostgresqlInput_1;

				String url_tPostgresqlInput_1 = "jdbc:postgresql://"
						+ "10.20.0.88" + ":" + "5432" + "/" + "DMINDICADORES";

				conn_tPostgresqlInput_1 = java.sql.DriverManager.getConnection(
						url_tPostgresqlInput_1, dbUser_tPostgresqlInput_1,
						dbPwd_tPostgresqlInput_1);

				conn_tPostgresqlInput_1.setAutoCommit(false);

				java.sql.Statement stmt_tPostgresqlInput_1 = conn_tPostgresqlInput_1
						.createStatement();

				String dbquery_tPostgresqlInput_1 = "SELECT anno,semestre, anno||'-'||semestre anno_semestre,codigo_facultad, codigo_facultad||'-'||facultad facultad, codig"
						+ "o_proyecto_snies,codigo_proyecto_snies||'-'||proyecto_snies proyecto_snies, codigo_proyecto,codigo_proyecto||'-'||proyec"
						+ "to proyecto, nivel,\n       COUNT(documento) inscritos\n  FROM inscritos\n  GROUP BY anno,semestre,codigo_facultad, faculta"
						+ "d, codigo_proyecto_snies, proyecto_snies,codigo_proyecto, proyecto,nivel\n  ORDER BY anno,semestre,codigo_facultad, codig"
						+ "o_proyecto_snies";

				globalMap.put("tPostgresqlInput_1_QUERY",
						dbquery_tPostgresqlInput_1);
				java.sql.ResultSet rs_tPostgresqlInput_1 = null;

				try {
					rs_tPostgresqlInput_1 = stmt_tPostgresqlInput_1
							.executeQuery(dbquery_tPostgresqlInput_1);
					java.sql.ResultSetMetaData rsmd_tPostgresqlInput_1 = rs_tPostgresqlInput_1
							.getMetaData();
					int colQtyInRs_tPostgresqlInput_1 = rsmd_tPostgresqlInput_1
							.getColumnCount();

					String tmpContent_tPostgresqlInput_1 = null;

					while (rs_tPostgresqlInput_1.next()) {
						nb_line_tPostgresqlInput_1++;

						if (colQtyInRs_tPostgresqlInput_1 < 1) {
							row3.anno = null;
						} else {

							if (rs_tPostgresqlInput_1.getObject(1) != null) {
								row3.anno = rs_tPostgresqlInput_1.getInt(1);
							} else {
								row3.anno = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_1 < 2) {
							row3.semestre = null;
						} else {

							if (rs_tPostgresqlInput_1.getObject(2) != null) {
								row3.semestre = rs_tPostgresqlInput_1.getInt(2);
							} else {
								row3.semestre = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_1 < 3) {
							row3.anno_semestre = null;
						} else {

							row3.anno_semestre = routines.system.JDBCUtil
									.getString(rs_tPostgresqlInput_1, 3, false);
						}
						if (colQtyInRs_tPostgresqlInput_1 < 4) {
							row3.codigo_facultad = null;
						} else {

							if (rs_tPostgresqlInput_1.getObject(4) != null) {
								row3.codigo_facultad = rs_tPostgresqlInput_1
										.getInt(4);
							} else {
								row3.codigo_facultad = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_1 < 5) {
							row3.facultad = null;
						} else {

							row3.facultad = routines.system.JDBCUtil.getString(
									rs_tPostgresqlInput_1, 5, false);
						}
						if (colQtyInRs_tPostgresqlInput_1 < 6) {
							row3.codigo_proyecto_snies = null;
						} else {

							if (rs_tPostgresqlInput_1.getObject(6) != null) {
								row3.codigo_proyecto_snies = rs_tPostgresqlInput_1
										.getInt(6);
							} else {
								row3.codigo_proyecto_snies = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_1 < 7) {
							row3.proyecto_snies = null;
						} else {

							row3.proyecto_snies = routines.system.JDBCUtil
									.getString(rs_tPostgresqlInput_1, 7, false);
						}
						if (colQtyInRs_tPostgresqlInput_1 < 8) {
							row3.codigo_proyecto = null;
						} else {

							if (rs_tPostgresqlInput_1.getObject(8) != null) {
								row3.codigo_proyecto = rs_tPostgresqlInput_1
										.getInt(8);
							} else {
								row3.codigo_proyecto = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_1 < 9) {
							row3.proyecto = null;
						} else {

							row3.proyecto = routines.system.JDBCUtil.getString(
									rs_tPostgresqlInput_1, 9, false);
						}
						if (colQtyInRs_tPostgresqlInput_1 < 10) {
							row3.nivel = null;
						} else {

							row3.nivel = routines.system.JDBCUtil.getString(
									rs_tPostgresqlInput_1, 10, false);
						}
						if (colQtyInRs_tPostgresqlInput_1 < 11) {
							row3.inscritos = null;
						} else {

							if (rs_tPostgresqlInput_1.getObject(11) != null) {
								row3.inscritos = rs_tPostgresqlInput_1
										.getInt(11);
							} else {
								row3.inscritos = null;
							}
						}

						/**
						 * [tPostgresqlInput_1 begin ] stop
						 */

						/**
						 * [tPostgresqlInput_1 main ] start
						 */

						currentComponent = "tPostgresqlInput_1";

						tos_count_tPostgresqlInput_1++;

						/**
						 * [tPostgresqlInput_1 main ] stop
						 */

						/**
						 * [tPostgresqlInput_1 process_data_begin ] start
						 */

						currentComponent = "tPostgresqlInput_1";

						/**
						 * [tPostgresqlInput_1 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row3 main ] start
						 */

						currentComponent = "tAdvancedHash_row3";

						// row3
						// row3

						if (execStat) {
							runStat.updateStatOnConnection("row3" + iterateId,
									1, 1);
						}

						row3Struct row3_HashRow = new row3Struct();

						row3_HashRow.anno = row3.anno;

						row3_HashRow.semestre = row3.semestre;

						row3_HashRow.anno_semestre = row3.anno_semestre;

						row3_HashRow.codigo_facultad = row3.codigo_facultad;

						row3_HashRow.facultad = row3.facultad;

						row3_HashRow.codigo_proyecto_snies = row3.codigo_proyecto_snies;

						row3_HashRow.proyecto_snies = row3.proyecto_snies;

						row3_HashRow.codigo_proyecto = row3.codigo_proyecto;

						row3_HashRow.proyecto = row3.proyecto;

						row3_HashRow.nivel = row3.nivel;

						row3_HashRow.inscritos = row3.inscritos;

						tHash_Lookup_row3.put(row3_HashRow);

						tos_count_tAdvancedHash_row3++;

						/**
						 * [tAdvancedHash_row3 main ] stop
						 */

						/**
						 * [tAdvancedHash_row3 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_row3";

						/**
						 * [tAdvancedHash_row3 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row3 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_row3";

						/**
						 * [tAdvancedHash_row3 process_data_end ] stop
						 */

						/**
						 * [tPostgresqlInput_1 process_data_end ] start
						 */

						currentComponent = "tPostgresqlInput_1";

						/**
						 * [tPostgresqlInput_1 process_data_end ] stop
						 */

						/**
						 * [tPostgresqlInput_1 end ] start
						 */

						currentComponent = "tPostgresqlInput_1";

					}
				} finally {
					if (rs_tPostgresqlInput_1 != null) {
						rs_tPostgresqlInput_1.close();
					}
					if (stmt_tPostgresqlInput_1 != null) {
						stmt_tPostgresqlInput_1.close();
					}
					if (conn_tPostgresqlInput_1 != null
							&& !conn_tPostgresqlInput_1.isClosed()) {

						conn_tPostgresqlInput_1.commit();

						conn_tPostgresqlInput_1.close();

					}

				}
				globalMap.put("tPostgresqlInput_1_NB_LINE",
						nb_line_tPostgresqlInput_1);

				ok_Hash.put("tPostgresqlInput_1", true);
				end_Hash.put("tPostgresqlInput_1", System.currentTimeMillis());

				/**
				 * [tPostgresqlInput_1 end ] stop
				 */

				/**
				 * [tAdvancedHash_row3 end ] start
				 */

				currentComponent = "tAdvancedHash_row3";

				tHash_Lookup_row3.endPut();

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row3" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tAdvancedHash_row3", true);
				end_Hash.put("tAdvancedHash_row3", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row3 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tPostgresqlInput_1 finally ] start
				 */

				currentComponent = "tPostgresqlInput_1";

				/**
				 * [tPostgresqlInput_1 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row3 finally ] start
				 */

				currentComponent = "tAdvancedHash_row3";

				/**
				 * [tAdvancedHash_row3 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostgresqlInput_1_SUBPROCESS_STATE", 1);
	}

	public static class row2Struct implements
			routines.system.IPersistableComparableLookupRow<row2Struct> {
		final static byte[] commonByteArrayLock_DMINDICADORES_cuadro_maestro_estudiantes = new byte[0];
		static byte[] commonByteArray_DMINDICADORES_cuadro_maestro_estudiantes = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer anno;

		public Integer getAnno() {
			return this.anno;
		}

		public Integer semestre;

		public Integer getSemestre() {
			return this.semestre;
		}

		public String anno_semestre;

		public String getAnno_semestre() {
			return this.anno_semestre;
		}

		public Integer codigo_facultad;

		public Integer getCodigo_facultad() {
			return this.codigo_facultad;
		}

		public String facultad;

		public String getFacultad() {
			return this.facultad;
		}

		public Integer codigo_proyecto_snies;

		public Integer getCodigo_proyecto_snies() {
			return this.codigo_proyecto_snies;
		}

		public String proyecto_snies;

		public String getProyecto_snies() {
			return this.proyecto_snies;
		}

		public Integer codigo_proyecto;

		public Integer getCodigo_proyecto() {
			return this.codigo_proyecto;
		}

		public String proyecto;

		public String getProyecto() {
			return this.proyecto;
		}

		public String nivel;

		public String getNivel() {
			return this.nivel;
		}

		public Integer admitidos;

		public Integer getAdmitidos() {
			return this.admitidos;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.anno == null) ? 0 : this.anno.hashCode());

				result = prime
						* result
						+ ((this.semestre == null) ? 0 : this.semestre
								.hashCode());

				result = prime
						* result
						+ ((this.codigo_facultad == null) ? 0
								: this.codigo_facultad.hashCode());

				result = prime
						* result
						+ ((this.codigo_proyecto == null) ? 0
								: this.codigo_proyecto.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row2Struct other = (row2Struct) obj;

			if (this.anno == null) {
				if (other.anno != null)
					return false;

			} else if (!this.anno.equals(other.anno))

				return false;

			if (this.semestre == null) {
				if (other.semestre != null)
					return false;

			} else if (!this.semestre.equals(other.semestre))

				return false;

			if (this.codigo_facultad == null) {
				if (other.codigo_facultad != null)
					return false;

			} else if (!this.codigo_facultad.equals(other.codigo_facultad))

				return false;

			if (this.codigo_proyecto == null) {
				if (other.codigo_proyecto != null)
					return false;

			} else if (!this.codigo_proyecto.equals(other.codigo_proyecto))

				return false;

			return true;
		}

		public void copyDataTo(row2Struct other) {

			other.anno = this.anno;
			other.semestre = this.semestre;
			other.anno_semestre = this.anno_semestre;
			other.codigo_facultad = this.codigo_facultad;
			other.facultad = this.facultad;
			other.codigo_proyecto_snies = this.codigo_proyecto_snies;
			other.proyecto_snies = this.proyecto_snies;
			other.codigo_proyecto = this.codigo_proyecto;
			other.proyecto = this.proyecto;
			other.nivel = this.nivel;
			other.admitidos = this.admitidos;

		}

		public void copyKeysDataTo(row2Struct other) {

			other.anno = this.anno;
			other.semestre = this.semestre;
			other.codigo_facultad = this.codigo_facultad;
			other.codigo_proyecto = this.codigo_proyecto;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DMINDICADORES_cuadro_maestro_estudiantes) {

				try {

					int length = 0;

					this.anno = readInteger(dis);

					this.semestre = readInteger(dis);

					this.codigo_facultad = readInteger(dis);

					this.codigo_proyecto = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.anno, dos);

				// Integer

				writeInteger(this.semestre, dos);

				// Integer

				writeInteger(this.codigo_facultad, dos);

				// Integer

				writeInteger(this.codigo_proyecto, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.anno_semestre = readString(dis, ois);

				this.facultad = readString(dis, ois);

				this.codigo_proyecto_snies = readInteger(dis, ois);

				this.proyecto_snies = readString(dis, ois);

				this.proyecto = readString(dis, ois);

				this.nivel = readString(dis, ois);

				this.admitidos = readInteger(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.anno_semestre, dos, oos);

				writeString(this.facultad, dos, oos);

				writeInteger(this.codigo_proyecto_snies, dos, oos);

				writeString(this.proyecto_snies, dos, oos);

				writeString(this.proyecto, dos, oos);

				writeString(this.nivel, dos, oos);

				writeInteger(this.admitidos, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("anno=" + String.valueOf(anno));
			sb.append(",semestre=" + String.valueOf(semestre));
			sb.append(",anno_semestre=" + anno_semestre);
			sb.append(",codigo_facultad=" + String.valueOf(codigo_facultad));
			sb.append(",facultad=" + facultad);
			sb.append(",codigo_proyecto_snies="
					+ String.valueOf(codigo_proyecto_snies));
			sb.append(",proyecto_snies=" + proyecto_snies);
			sb.append(",codigo_proyecto=" + String.valueOf(codigo_proyecto));
			sb.append(",proyecto=" + proyecto);
			sb.append(",nivel=" + nivel);
			sb.append(",admitidos=" + String.valueOf(admitidos));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.anno, other.anno);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.semestre, other.semestre);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.codigo_facultad,
					other.codigo_facultad);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.codigo_proyecto,
					other.codigo_proyecto);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tPostgresqlInput_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlInput_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row2Struct row2 = new row2Struct();

				/**
				 * [tAdvancedHash_row2 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row2", false);
				start_Hash
						.put("tAdvancedHash_row2", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row2";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row2" + iterateId, 0, 0);

					}
				}

				int tos_count_tAdvancedHash_row2 = 0;

				// connection name:row2
				// source node:tPostgresqlInput_2 -
				// inputs:(after_tPostgresqlInput_9) outputs:(row2,row2) |
				// target node:tAdvancedHash_row2 - inputs:(row2) outputs:()
				// linked node: tMap_1 -
				// inputs:(row9,row3,row2,row1,row4,row5,row6,row7,row8,row10)
				// outputs:(cuadro_maestro)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row2 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row2Struct> getLookup(matchingModeEnum_row2);

				globalMap.put("tHash_Lookup_row2", tHash_Lookup_row2);

				/**
				 * [tAdvancedHash_row2 begin ] stop
				 */

				/**
				 * [tPostgresqlInput_2 begin ] start
				 */

				ok_Hash.put("tPostgresqlInput_2", false);
				start_Hash
						.put("tPostgresqlInput_2", System.currentTimeMillis());

				currentComponent = "tPostgresqlInput_2";

				int tos_count_tPostgresqlInput_2 = 0;

				int nb_line_tPostgresqlInput_2 = 0;
				java.sql.Connection conn_tPostgresqlInput_2 = null;
				String driverClass_tPostgresqlInput_2 = "org.postgresql.Driver";
				java.lang.Class.forName(driverClass_tPostgresqlInput_2);
				String dbUser_tPostgresqlInput_2 = "postgres";

				final String decryptedPassword_tPostgresqlInput_2 = routines.system.PasswordEncryptUtil
						.decryptPassword("610243e4ca33e325f4f7aba1746784ea");

				String dbPwd_tPostgresqlInput_2 = decryptedPassword_tPostgresqlInput_2;

				String url_tPostgresqlInput_2 = "jdbc:postgresql://"
						+ "10.20.0.88" + ":" + "5432" + "/" + "DMINDICADORES";

				conn_tPostgresqlInput_2 = java.sql.DriverManager.getConnection(
						url_tPostgresqlInput_2, dbUser_tPostgresqlInput_2,
						dbPwd_tPostgresqlInput_2);

				conn_tPostgresqlInput_2.setAutoCommit(false);

				java.sql.Statement stmt_tPostgresqlInput_2 = conn_tPostgresqlInput_2
						.createStatement();

				String dbquery_tPostgresqlInput_2 = "SELECT anno,semestre, anno||'-'||semestre anno_semestre,\n       codigo_facultad,codigo_facultad||'-'||facultad facultad"
						+ ", codigo_proyecto_snies, codigo_proyecto_snies||'-'||proyecto_snies proyecto_snies, codigo_proyecto,codigo_proyecto||'-'"
						+ "||proyecto proyecto, nivel,\n       count(documento) admitidos\n  FROM admitidos\n  GROUP BY anno,semestre, codigo_facultad"
						+ ", facultad, codigo_proyecto_snies, proyecto_snies,codigo_proyecto,proyecto, nivel \n        \n  ORDER BY anno,semestre, co"
						+ "digo_facultad, codigo_proyecto_snies";

				globalMap.put("tPostgresqlInput_2_QUERY",
						dbquery_tPostgresqlInput_2);
				java.sql.ResultSet rs_tPostgresqlInput_2 = null;

				try {
					rs_tPostgresqlInput_2 = stmt_tPostgresqlInput_2
							.executeQuery(dbquery_tPostgresqlInput_2);
					java.sql.ResultSetMetaData rsmd_tPostgresqlInput_2 = rs_tPostgresqlInput_2
							.getMetaData();
					int colQtyInRs_tPostgresqlInput_2 = rsmd_tPostgresqlInput_2
							.getColumnCount();

					String tmpContent_tPostgresqlInput_2 = null;

					while (rs_tPostgresqlInput_2.next()) {
						nb_line_tPostgresqlInput_2++;

						if (colQtyInRs_tPostgresqlInput_2 < 1) {
							row2.anno = null;
						} else {

							if (rs_tPostgresqlInput_2.getObject(1) != null) {
								row2.anno = rs_tPostgresqlInput_2.getInt(1);
							} else {
								row2.anno = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_2 < 2) {
							row2.semestre = null;
						} else {

							if (rs_tPostgresqlInput_2.getObject(2) != null) {
								row2.semestre = rs_tPostgresqlInput_2.getInt(2);
							} else {
								row2.semestre = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_2 < 3) {
							row2.anno_semestre = null;
						} else {

							row2.anno_semestre = routines.system.JDBCUtil
									.getString(rs_tPostgresqlInput_2, 3, false);
						}
						if (colQtyInRs_tPostgresqlInput_2 < 4) {
							row2.codigo_facultad = null;
						} else {

							if (rs_tPostgresqlInput_2.getObject(4) != null) {
								row2.codigo_facultad = rs_tPostgresqlInput_2
										.getInt(4);
							} else {
								row2.codigo_facultad = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_2 < 5) {
							row2.facultad = null;
						} else {

							row2.facultad = routines.system.JDBCUtil.getString(
									rs_tPostgresqlInput_2, 5, false);
						}
						if (colQtyInRs_tPostgresqlInput_2 < 6) {
							row2.codigo_proyecto_snies = null;
						} else {

							if (rs_tPostgresqlInput_2.getObject(6) != null) {
								row2.codigo_proyecto_snies = rs_tPostgresqlInput_2
										.getInt(6);
							} else {
								row2.codigo_proyecto_snies = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_2 < 7) {
							row2.proyecto_snies = null;
						} else {

							row2.proyecto_snies = routines.system.JDBCUtil
									.getString(rs_tPostgresqlInput_2, 7, false);
						}
						if (colQtyInRs_tPostgresqlInput_2 < 8) {
							row2.codigo_proyecto = null;
						} else {

							if (rs_tPostgresqlInput_2.getObject(8) != null) {
								row2.codigo_proyecto = rs_tPostgresqlInput_2
										.getInt(8);
							} else {
								row2.codigo_proyecto = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_2 < 9) {
							row2.proyecto = null;
						} else {

							row2.proyecto = routines.system.JDBCUtil.getString(
									rs_tPostgresqlInput_2, 9, false);
						}
						if (colQtyInRs_tPostgresqlInput_2 < 10) {
							row2.nivel = null;
						} else {

							row2.nivel = routines.system.JDBCUtil.getString(
									rs_tPostgresqlInput_2, 10, false);
						}
						if (colQtyInRs_tPostgresqlInput_2 < 11) {
							row2.admitidos = null;
						} else {

							if (rs_tPostgresqlInput_2.getObject(11) != null) {
								row2.admitidos = rs_tPostgresqlInput_2
										.getInt(11);
							} else {
								row2.admitidos = null;
							}
						}

						/**
						 * [tPostgresqlInput_2 begin ] stop
						 */

						/**
						 * [tPostgresqlInput_2 main ] start
						 */

						currentComponent = "tPostgresqlInput_2";

						tos_count_tPostgresqlInput_2++;

						/**
						 * [tPostgresqlInput_2 main ] stop
						 */

						/**
						 * [tPostgresqlInput_2 process_data_begin ] start
						 */

						currentComponent = "tPostgresqlInput_2";

						/**
						 * [tPostgresqlInput_2 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row2 main ] start
						 */

						currentComponent = "tAdvancedHash_row2";

						// row2
						// row2

						if (execStat) {
							runStat.updateStatOnConnection("row2" + iterateId,
									1, 1);
						}

						row2Struct row2_HashRow = new row2Struct();

						row2_HashRow.anno = row2.anno;

						row2_HashRow.semestre = row2.semestre;

						row2_HashRow.anno_semestre = row2.anno_semestre;

						row2_HashRow.codigo_facultad = row2.codigo_facultad;

						row2_HashRow.facultad = row2.facultad;

						row2_HashRow.codigo_proyecto_snies = row2.codigo_proyecto_snies;

						row2_HashRow.proyecto_snies = row2.proyecto_snies;

						row2_HashRow.codigo_proyecto = row2.codigo_proyecto;

						row2_HashRow.proyecto = row2.proyecto;

						row2_HashRow.nivel = row2.nivel;

						row2_HashRow.admitidos = row2.admitidos;

						tHash_Lookup_row2.put(row2_HashRow);

						tos_count_tAdvancedHash_row2++;

						/**
						 * [tAdvancedHash_row2 main ] stop
						 */

						/**
						 * [tAdvancedHash_row2 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_row2";

						/**
						 * [tAdvancedHash_row2 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row2 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_row2";

						/**
						 * [tAdvancedHash_row2 process_data_end ] stop
						 */

						/**
						 * [tPostgresqlInput_2 process_data_end ] start
						 */

						currentComponent = "tPostgresqlInput_2";

						/**
						 * [tPostgresqlInput_2 process_data_end ] stop
						 */

						/**
						 * [tPostgresqlInput_2 end ] start
						 */

						currentComponent = "tPostgresqlInput_2";

					}
				} finally {
					if (rs_tPostgresqlInput_2 != null) {
						rs_tPostgresqlInput_2.close();
					}
					if (stmt_tPostgresqlInput_2 != null) {
						stmt_tPostgresqlInput_2.close();
					}
					if (conn_tPostgresqlInput_2 != null
							&& !conn_tPostgresqlInput_2.isClosed()) {

						conn_tPostgresqlInput_2.commit();

						conn_tPostgresqlInput_2.close();

					}

				}
				globalMap.put("tPostgresqlInput_2_NB_LINE",
						nb_line_tPostgresqlInput_2);

				ok_Hash.put("tPostgresqlInput_2", true);
				end_Hash.put("tPostgresqlInput_2", System.currentTimeMillis());

				/**
				 * [tPostgresqlInput_2 end ] stop
				 */

				/**
				 * [tAdvancedHash_row2 end ] start
				 */

				currentComponent = "tAdvancedHash_row2";

				tHash_Lookup_row2.endPut();

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row2" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tAdvancedHash_row2", true);
				end_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row2 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tPostgresqlInput_2 finally ] start
				 */

				currentComponent = "tPostgresqlInput_2";

				/**
				 * [tPostgresqlInput_2 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row2 finally ] start
				 */

				currentComponent = "tAdvancedHash_row2";

				/**
				 * [tAdvancedHash_row2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostgresqlInput_2_SUBPROCESS_STATE", 1);
	}

	public static class row1Struct implements
			routines.system.IPersistableComparableLookupRow<row1Struct> {
		final static byte[] commonByteArrayLock_DMINDICADORES_cuadro_maestro_estudiantes = new byte[0];
		static byte[] commonByteArray_DMINDICADORES_cuadro_maestro_estudiantes = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer anno;

		public Integer getAnno() {
			return this.anno;
		}

		public Integer semestre;

		public Integer getSemestre() {
			return this.semestre;
		}

		public String anno_semestre;

		public String getAnno_semestre() {
			return this.anno_semestre;
		}

		public Integer codigo_facultad;

		public Integer getCodigo_facultad() {
			return this.codigo_facultad;
		}

		public String facultad;

		public String getFacultad() {
			return this.facultad;
		}

		public Integer codigo_proyecto_snies;

		public Integer getCodigo_proyecto_snies() {
			return this.codigo_proyecto_snies;
		}

		public String proyecto_snies;

		public String getProyecto_snies() {
			return this.proyecto_snies;
		}

		public Integer codigo_proyecto;

		public Integer getCodigo_proyecto() {
			return this.codigo_proyecto;
		}

		public String proyecto;

		public String getProyecto() {
			return this.proyecto;
		}

		public String nivel;

		public String getNivel() {
			return this.nivel;
		}

		public Integer matriculados;

		public Integer getMatriculados() {
			return this.matriculados;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.anno == null) ? 0 : this.anno.hashCode());

				result = prime
						* result
						+ ((this.semestre == null) ? 0 : this.semestre
								.hashCode());

				result = prime
						* result
						+ ((this.codigo_facultad == null) ? 0
								: this.codigo_facultad.hashCode());

				result = prime
						* result
						+ ((this.codigo_proyecto == null) ? 0
								: this.codigo_proyecto.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row1Struct other = (row1Struct) obj;

			if (this.anno == null) {
				if (other.anno != null)
					return false;

			} else if (!this.anno.equals(other.anno))

				return false;

			if (this.semestre == null) {
				if (other.semestre != null)
					return false;

			} else if (!this.semestre.equals(other.semestre))

				return false;

			if (this.codigo_facultad == null) {
				if (other.codigo_facultad != null)
					return false;

			} else if (!this.codigo_facultad.equals(other.codigo_facultad))

				return false;

			if (this.codigo_proyecto == null) {
				if (other.codigo_proyecto != null)
					return false;

			} else if (!this.codigo_proyecto.equals(other.codigo_proyecto))

				return false;

			return true;
		}

		public void copyDataTo(row1Struct other) {

			other.anno = this.anno;
			other.semestre = this.semestre;
			other.anno_semestre = this.anno_semestre;
			other.codigo_facultad = this.codigo_facultad;
			other.facultad = this.facultad;
			other.codigo_proyecto_snies = this.codigo_proyecto_snies;
			other.proyecto_snies = this.proyecto_snies;
			other.codigo_proyecto = this.codigo_proyecto;
			other.proyecto = this.proyecto;
			other.nivel = this.nivel;
			other.matriculados = this.matriculados;

		}

		public void copyKeysDataTo(row1Struct other) {

			other.anno = this.anno;
			other.semestre = this.semestre;
			other.codigo_facultad = this.codigo_facultad;
			other.codigo_proyecto = this.codigo_proyecto;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DMINDICADORES_cuadro_maestro_estudiantes) {

				try {

					int length = 0;

					this.anno = readInteger(dis);

					this.semestre = readInteger(dis);

					this.codigo_facultad = readInteger(dis);

					this.codigo_proyecto = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.anno, dos);

				// Integer

				writeInteger(this.semestre, dos);

				// Integer

				writeInteger(this.codigo_facultad, dos);

				// Integer

				writeInteger(this.codigo_proyecto, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.anno_semestre = readString(dis, ois);

				this.facultad = readString(dis, ois);

				this.codigo_proyecto_snies = readInteger(dis, ois);

				this.proyecto_snies = readString(dis, ois);

				this.proyecto = readString(dis, ois);

				this.nivel = readString(dis, ois);

				this.matriculados = readInteger(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.anno_semestre, dos, oos);

				writeString(this.facultad, dos, oos);

				writeInteger(this.codigo_proyecto_snies, dos, oos);

				writeString(this.proyecto_snies, dos, oos);

				writeString(this.proyecto, dos, oos);

				writeString(this.nivel, dos, oos);

				writeInteger(this.matriculados, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("anno=" + String.valueOf(anno));
			sb.append(",semestre=" + String.valueOf(semestre));
			sb.append(",anno_semestre=" + anno_semestre);
			sb.append(",codigo_facultad=" + String.valueOf(codigo_facultad));
			sb.append(",facultad=" + facultad);
			sb.append(",codigo_proyecto_snies="
					+ String.valueOf(codigo_proyecto_snies));
			sb.append(",proyecto_snies=" + proyecto_snies);
			sb.append(",codigo_proyecto=" + String.valueOf(codigo_proyecto));
			sb.append(",proyecto=" + proyecto);
			sb.append(",nivel=" + nivel);
			sb.append(",matriculados=" + String.valueOf(matriculados));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.anno, other.anno);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.semestre, other.semestre);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.codigo_facultad,
					other.codigo_facultad);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.codigo_proyecto,
					other.codigo_proyecto);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tPostgresqlInput_3Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlInput_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();

				/**
				 * [tAdvancedHash_row1 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row1", false);
				start_Hash
						.put("tAdvancedHash_row1", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row1" + iterateId, 0, 0);

					}
				}

				int tos_count_tAdvancedHash_row1 = 0;

				// connection name:row1
				// source node:tPostgresqlInput_3 -
				// inputs:(after_tPostgresqlInput_9) outputs:(row1,row1) |
				// target node:tAdvancedHash_row1 - inputs:(row1) outputs:()
				// linked node: tMap_1 -
				// inputs:(row9,row3,row2,row1,row4,row5,row6,row7,row8,row10)
				// outputs:(cuadro_maestro)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row1 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row1Struct> tHash_Lookup_row1 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row1Struct> getLookup(matchingModeEnum_row1);

				globalMap.put("tHash_Lookup_row1", tHash_Lookup_row1);

				/**
				 * [tAdvancedHash_row1 begin ] stop
				 */

				/**
				 * [tPostgresqlInput_3 begin ] start
				 */

				ok_Hash.put("tPostgresqlInput_3", false);
				start_Hash
						.put("tPostgresqlInput_3", System.currentTimeMillis());

				currentComponent = "tPostgresqlInput_3";

				int tos_count_tPostgresqlInput_3 = 0;

				int nb_line_tPostgresqlInput_3 = 0;
				java.sql.Connection conn_tPostgresqlInput_3 = null;
				String driverClass_tPostgresqlInput_3 = "org.postgresql.Driver";
				java.lang.Class.forName(driverClass_tPostgresqlInput_3);
				String dbUser_tPostgresqlInput_3 = "postgres";

				final String decryptedPassword_tPostgresqlInput_3 = routines.system.PasswordEncryptUtil
						.decryptPassword("610243e4ca33e325f4f7aba1746784ea");

				String dbPwd_tPostgresqlInput_3 = decryptedPassword_tPostgresqlInput_3;

				String url_tPostgresqlInput_3 = "jdbc:postgresql://"
						+ "10.20.0.88" + ":" + "5432" + "/" + "DMINDICADORES";

				conn_tPostgresqlInput_3 = java.sql.DriverManager.getConnection(
						url_tPostgresqlInput_3, dbUser_tPostgresqlInput_3,
						dbPwd_tPostgresqlInput_3);

				conn_tPostgresqlInput_3.setAutoCommit(false);

				java.sql.Statement stmt_tPostgresqlInput_3 = conn_tPostgresqlInput_3
						.createStatement();

				String dbquery_tPostgresqlInput_3 = "SELECT  anno,semestre, anno||'-'||semestre anno_semestre,codigo_facultad, \n       codigo_facultad||'-'||facultad facult"
						+ "ad, codigo_proyecto_snies,codigo_proyecto_snies||'-'||proyecto_snies proyecto_snies,codigo_proyecto, codigo_proyecto||'-"
						+ "'||proyecto proyecto,nivel, COUNT(documento) matriculados\n  FROM matriculados\n  GROUP BY  anno,semestre,codigo_facultad,"
						+ " \n       facultad, codigo_proyecto_snies, proyecto_snies, codigo_proyecto, proyecto,nivel\n       order by anno, semestre"
						+ ", codigo_facultad, codigo_proyecto_snies\n";

				globalMap.put("tPostgresqlInput_3_QUERY",
						dbquery_tPostgresqlInput_3);
				java.sql.ResultSet rs_tPostgresqlInput_3 = null;

				try {
					rs_tPostgresqlInput_3 = stmt_tPostgresqlInput_3
							.executeQuery(dbquery_tPostgresqlInput_3);
					java.sql.ResultSetMetaData rsmd_tPostgresqlInput_3 = rs_tPostgresqlInput_3
							.getMetaData();
					int colQtyInRs_tPostgresqlInput_3 = rsmd_tPostgresqlInput_3
							.getColumnCount();

					String tmpContent_tPostgresqlInput_3 = null;

					while (rs_tPostgresqlInput_3.next()) {
						nb_line_tPostgresqlInput_3++;

						if (colQtyInRs_tPostgresqlInput_3 < 1) {
							row1.anno = null;
						} else {

							if (rs_tPostgresqlInput_3.getObject(1) != null) {
								row1.anno = rs_tPostgresqlInput_3.getInt(1);
							} else {
								row1.anno = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_3 < 2) {
							row1.semestre = null;
						} else {

							if (rs_tPostgresqlInput_3.getObject(2) != null) {
								row1.semestre = rs_tPostgresqlInput_3.getInt(2);
							} else {
								row1.semestre = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_3 < 3) {
							row1.anno_semestre = null;
						} else {

							row1.anno_semestre = routines.system.JDBCUtil
									.getString(rs_tPostgresqlInput_3, 3, false);
						}
						if (colQtyInRs_tPostgresqlInput_3 < 4) {
							row1.codigo_facultad = null;
						} else {

							if (rs_tPostgresqlInput_3.getObject(4) != null) {
								row1.codigo_facultad = rs_tPostgresqlInput_3
										.getInt(4);
							} else {
								row1.codigo_facultad = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_3 < 5) {
							row1.facultad = null;
						} else {

							row1.facultad = routines.system.JDBCUtil.getString(
									rs_tPostgresqlInput_3, 5, false);
						}
						if (colQtyInRs_tPostgresqlInput_3 < 6) {
							row1.codigo_proyecto_snies = null;
						} else {

							if (rs_tPostgresqlInput_3.getObject(6) != null) {
								row1.codigo_proyecto_snies = rs_tPostgresqlInput_3
										.getInt(6);
							} else {
								row1.codigo_proyecto_snies = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_3 < 7) {
							row1.proyecto_snies = null;
						} else {

							row1.proyecto_snies = routines.system.JDBCUtil
									.getString(rs_tPostgresqlInput_3, 7, false);
						}
						if (colQtyInRs_tPostgresqlInput_3 < 8) {
							row1.codigo_proyecto = null;
						} else {

							if (rs_tPostgresqlInput_3.getObject(8) != null) {
								row1.codigo_proyecto = rs_tPostgresqlInput_3
										.getInt(8);
							} else {
								row1.codigo_proyecto = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_3 < 9) {
							row1.proyecto = null;
						} else {

							row1.proyecto = routines.system.JDBCUtil.getString(
									rs_tPostgresqlInput_3, 9, false);
						}
						if (colQtyInRs_tPostgresqlInput_3 < 10) {
							row1.nivel = null;
						} else {

							row1.nivel = routines.system.JDBCUtil.getString(
									rs_tPostgresqlInput_3, 10, false);
						}
						if (colQtyInRs_tPostgresqlInput_3 < 11) {
							row1.matriculados = null;
						} else {

							if (rs_tPostgresqlInput_3.getObject(11) != null) {
								row1.matriculados = rs_tPostgresqlInput_3
										.getInt(11);
							} else {
								row1.matriculados = null;
							}
						}

						/**
						 * [tPostgresqlInput_3 begin ] stop
						 */

						/**
						 * [tPostgresqlInput_3 main ] start
						 */

						currentComponent = "tPostgresqlInput_3";

						tos_count_tPostgresqlInput_3++;

						/**
						 * [tPostgresqlInput_3 main ] stop
						 */

						/**
						 * [tPostgresqlInput_3 process_data_begin ] start
						 */

						currentComponent = "tPostgresqlInput_3";

						/**
						 * [tPostgresqlInput_3 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row1 main ] start
						 */

						currentComponent = "tAdvancedHash_row1";

						// row1
						// row1

						if (execStat) {
							runStat.updateStatOnConnection("row1" + iterateId,
									1, 1);
						}

						row1Struct row1_HashRow = new row1Struct();

						row1_HashRow.anno = row1.anno;

						row1_HashRow.semestre = row1.semestre;

						row1_HashRow.anno_semestre = row1.anno_semestre;

						row1_HashRow.codigo_facultad = row1.codigo_facultad;

						row1_HashRow.facultad = row1.facultad;

						row1_HashRow.codigo_proyecto_snies = row1.codigo_proyecto_snies;

						row1_HashRow.proyecto_snies = row1.proyecto_snies;

						row1_HashRow.codigo_proyecto = row1.codigo_proyecto;

						row1_HashRow.proyecto = row1.proyecto;

						row1_HashRow.nivel = row1.nivel;

						row1_HashRow.matriculados = row1.matriculados;

						tHash_Lookup_row1.put(row1_HashRow);

						tos_count_tAdvancedHash_row1++;

						/**
						 * [tAdvancedHash_row1 main ] stop
						 */

						/**
						 * [tAdvancedHash_row1 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_row1";

						/**
						 * [tAdvancedHash_row1 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row1 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_row1";

						/**
						 * [tAdvancedHash_row1 process_data_end ] stop
						 */

						/**
						 * [tPostgresqlInput_3 process_data_end ] start
						 */

						currentComponent = "tPostgresqlInput_3";

						/**
						 * [tPostgresqlInput_3 process_data_end ] stop
						 */

						/**
						 * [tPostgresqlInput_3 end ] start
						 */

						currentComponent = "tPostgresqlInput_3";

					}
				} finally {
					if (rs_tPostgresqlInput_3 != null) {
						rs_tPostgresqlInput_3.close();
					}
					if (stmt_tPostgresqlInput_3 != null) {
						stmt_tPostgresqlInput_3.close();
					}
					if (conn_tPostgresqlInput_3 != null
							&& !conn_tPostgresqlInput_3.isClosed()) {

						conn_tPostgresqlInput_3.commit();

						conn_tPostgresqlInput_3.close();

					}

				}
				globalMap.put("tPostgresqlInput_3_NB_LINE",
						nb_line_tPostgresqlInput_3);

				ok_Hash.put("tPostgresqlInput_3", true);
				end_Hash.put("tPostgresqlInput_3", System.currentTimeMillis());

				/**
				 * [tPostgresqlInput_3 end ] stop
				 */

				/**
				 * [tAdvancedHash_row1 end ] start
				 */

				currentComponent = "tAdvancedHash_row1";

				tHash_Lookup_row1.endPut();

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row1" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tAdvancedHash_row1", true);
				end_Hash.put("tAdvancedHash_row1", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tPostgresqlInput_3 finally ] start
				 */

				currentComponent = "tPostgresqlInput_3";

				/**
				 * [tPostgresqlInput_3 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row1 finally ] start
				 */

				currentComponent = "tAdvancedHash_row1";

				/**
				 * [tAdvancedHash_row1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostgresqlInput_3_SUBPROCESS_STATE", 1);
	}

	public static class row4Struct implements
			routines.system.IPersistableComparableLookupRow<row4Struct> {
		final static byte[] commonByteArrayLock_DMINDICADORES_cuadro_maestro_estudiantes = new byte[0];
		static byte[] commonByteArray_DMINDICADORES_cuadro_maestro_estudiantes = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer anno;

		public Integer getAnno() {
			return this.anno;
		}

		public Integer semestre;

		public Integer getSemestre() {
			return this.semestre;
		}

		public String anno_semestre;

		public String getAnno_semestre() {
			return this.anno_semestre;
		}

		public Integer codigo_facultad;

		public Integer getCodigo_facultad() {
			return this.codigo_facultad;
		}

		public String facultad;

		public String getFacultad() {
			return this.facultad;
		}

		public Integer codigo_proyecto_snies;

		public Integer getCodigo_proyecto_snies() {
			return this.codigo_proyecto_snies;
		}

		public String proyecto_snies;

		public String getProyecto_snies() {
			return this.proyecto_snies;
		}

		public Integer codigo_proyecto;

		public Integer getCodigo_proyecto() {
			return this.codigo_proyecto;
		}

		public String proyecto;

		public String getProyecto() {
			return this.proyecto;
		}

		public Integer primiparos;

		public Integer getPrimiparos() {
			return this.primiparos;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.anno == null) ? 0 : this.anno.hashCode());

				result = prime
						* result
						+ ((this.semestre == null) ? 0 : this.semestre
								.hashCode());

				result = prime
						* result
						+ ((this.codigo_facultad == null) ? 0
								: this.codigo_facultad.hashCode());

				result = prime
						* result
						+ ((this.codigo_proyecto == null) ? 0
								: this.codigo_proyecto.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row4Struct other = (row4Struct) obj;

			if (this.anno == null) {
				if (other.anno != null)
					return false;

			} else if (!this.anno.equals(other.anno))

				return false;

			if (this.semestre == null) {
				if (other.semestre != null)
					return false;

			} else if (!this.semestre.equals(other.semestre))

				return false;

			if (this.codigo_facultad == null) {
				if (other.codigo_facultad != null)
					return false;

			} else if (!this.codigo_facultad.equals(other.codigo_facultad))

				return false;

			if (this.codigo_proyecto == null) {
				if (other.codigo_proyecto != null)
					return false;

			} else if (!this.codigo_proyecto.equals(other.codigo_proyecto))

				return false;

			return true;
		}

		public void copyDataTo(row4Struct other) {

			other.anno = this.anno;
			other.semestre = this.semestre;
			other.anno_semestre = this.anno_semestre;
			other.codigo_facultad = this.codigo_facultad;
			other.facultad = this.facultad;
			other.codigo_proyecto_snies = this.codigo_proyecto_snies;
			other.proyecto_snies = this.proyecto_snies;
			other.codigo_proyecto = this.codigo_proyecto;
			other.proyecto = this.proyecto;
			other.primiparos = this.primiparos;

		}

		public void copyKeysDataTo(row4Struct other) {

			other.anno = this.anno;
			other.semestre = this.semestre;
			other.codigo_facultad = this.codigo_facultad;
			other.codigo_proyecto = this.codigo_proyecto;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DMINDICADORES_cuadro_maestro_estudiantes) {

				try {

					int length = 0;

					this.anno = readInteger(dis);

					this.semestre = readInteger(dis);

					this.codigo_facultad = readInteger(dis);

					this.codigo_proyecto = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.anno, dos);

				// Integer

				writeInteger(this.semestre, dos);

				// Integer

				writeInteger(this.codigo_facultad, dos);

				// Integer

				writeInteger(this.codigo_proyecto, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.anno_semestre = readString(dis, ois);

				this.facultad = readString(dis, ois);

				this.codigo_proyecto_snies = readInteger(dis, ois);

				this.proyecto_snies = readString(dis, ois);

				this.proyecto = readString(dis, ois);

				this.primiparos = readInteger(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.anno_semestre, dos, oos);

				writeString(this.facultad, dos, oos);

				writeInteger(this.codigo_proyecto_snies, dos, oos);

				writeString(this.proyecto_snies, dos, oos);

				writeString(this.proyecto, dos, oos);

				writeInteger(this.primiparos, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("anno=" + String.valueOf(anno));
			sb.append(",semestre=" + String.valueOf(semestre));
			sb.append(",anno_semestre=" + anno_semestre);
			sb.append(",codigo_facultad=" + String.valueOf(codigo_facultad));
			sb.append(",facultad=" + facultad);
			sb.append(",codigo_proyecto_snies="
					+ String.valueOf(codigo_proyecto_snies));
			sb.append(",proyecto_snies=" + proyecto_snies);
			sb.append(",codigo_proyecto=" + String.valueOf(codigo_proyecto));
			sb.append(",proyecto=" + proyecto);
			sb.append(",primiparos=" + String.valueOf(primiparos));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.anno, other.anno);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.semestre, other.semestre);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.codigo_facultad,
					other.codigo_facultad);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.codigo_proyecto,
					other.codigo_proyecto);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tPostgresqlInput_4Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlInput_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row4Struct row4 = new row4Struct();

				/**
				 * [tAdvancedHash_row4 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row4", false);
				start_Hash
						.put("tAdvancedHash_row4", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row4";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row4" + iterateId, 0, 0);

					}
				}

				int tos_count_tAdvancedHash_row4 = 0;

				// connection name:row4
				// source node:tPostgresqlInput_4 -
				// inputs:(after_tPostgresqlInput_9) outputs:(row4,row4) |
				// target node:tAdvancedHash_row4 - inputs:(row4) outputs:()
				// linked node: tMap_1 -
				// inputs:(row9,row3,row2,row1,row4,row5,row6,row7,row8,row10)
				// outputs:(cuadro_maestro)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row4 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct> tHash_Lookup_row4 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row4Struct> getLookup(matchingModeEnum_row4);

				globalMap.put("tHash_Lookup_row4", tHash_Lookup_row4);

				/**
				 * [tAdvancedHash_row4 begin ] stop
				 */

				/**
				 * [tPostgresqlInput_4 begin ] start
				 */

				ok_Hash.put("tPostgresqlInput_4", false);
				start_Hash
						.put("tPostgresqlInput_4", System.currentTimeMillis());

				currentComponent = "tPostgresqlInput_4";

				int tos_count_tPostgresqlInput_4 = 0;

				int nb_line_tPostgresqlInput_4 = 0;
				java.sql.Connection conn_tPostgresqlInput_4 = null;
				String driverClass_tPostgresqlInput_4 = "org.postgresql.Driver";
				java.lang.Class.forName(driverClass_tPostgresqlInput_4);
				String dbUser_tPostgresqlInput_4 = "postgres";

				final String decryptedPassword_tPostgresqlInput_4 = routines.system.PasswordEncryptUtil
						.decryptPassword("610243e4ca33e325f4f7aba1746784ea");

				String dbPwd_tPostgresqlInput_4 = decryptedPassword_tPostgresqlInput_4;

				String url_tPostgresqlInput_4 = "jdbc:postgresql://"
						+ "10.20.0.88" + ":" + "5432" + "/" + "DMINDICADORES";

				conn_tPostgresqlInput_4 = java.sql.DriverManager.getConnection(
						url_tPostgresqlInput_4, dbUser_tPostgresqlInput_4,
						dbPwd_tPostgresqlInput_4);

				conn_tPostgresqlInput_4.setAutoCommit(false);

				java.sql.Statement stmt_tPostgresqlInput_4 = conn_tPostgresqlInput_4
						.createStatement();

				String dbquery_tPostgresqlInput_4 = "SELECT anno,semestre, anno||'-'||semestre anno_semestre,\n       codigo_facultad,codigo_facultad||'-'||facultad facultad"
						+ ", codigo_proyecto_snies, codigo_proyecto_snies||'-'||proyecto_snies proyecto_snies, codigo_proyecto,codigo_proyecto||'-'"
						+ "||proyecto proyecto,\n       count(documento) primiparos\n  FROM primiparos \n  GROUP BY anno,semestre, codigo_facultad, fa"
						+ "cultad, codigo_proyecto_snies, proyecto_snies,codigo_proyecto,proyecto\n  ORDER BY anno,semestre, codigo_facultad, codigo"
						+ "_proyecto_snies\n";

				globalMap.put("tPostgresqlInput_4_QUERY",
						dbquery_tPostgresqlInput_4);
				java.sql.ResultSet rs_tPostgresqlInput_4 = null;

				try {
					rs_tPostgresqlInput_4 = stmt_tPostgresqlInput_4
							.executeQuery(dbquery_tPostgresqlInput_4);
					java.sql.ResultSetMetaData rsmd_tPostgresqlInput_4 = rs_tPostgresqlInput_4
							.getMetaData();
					int colQtyInRs_tPostgresqlInput_4 = rsmd_tPostgresqlInput_4
							.getColumnCount();

					String tmpContent_tPostgresqlInput_4 = null;

					while (rs_tPostgresqlInput_4.next()) {
						nb_line_tPostgresqlInput_4++;

						if (colQtyInRs_tPostgresqlInput_4 < 1) {
							row4.anno = null;
						} else {

							if (rs_tPostgresqlInput_4.getObject(1) != null) {
								row4.anno = rs_tPostgresqlInput_4.getInt(1);
							} else {
								row4.anno = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_4 < 2) {
							row4.semestre = null;
						} else {

							if (rs_tPostgresqlInput_4.getObject(2) != null) {
								row4.semestre = rs_tPostgresqlInput_4.getInt(2);
							} else {
								row4.semestre = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_4 < 3) {
							row4.anno_semestre = null;
						} else {

							row4.anno_semestre = routines.system.JDBCUtil
									.getString(rs_tPostgresqlInput_4, 3, false);
						}
						if (colQtyInRs_tPostgresqlInput_4 < 4) {
							row4.codigo_facultad = null;
						} else {

							if (rs_tPostgresqlInput_4.getObject(4) != null) {
								row4.codigo_facultad = rs_tPostgresqlInput_4
										.getInt(4);
							} else {
								row4.codigo_facultad = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_4 < 5) {
							row4.facultad = null;
						} else {

							row4.facultad = routines.system.JDBCUtil.getString(
									rs_tPostgresqlInput_4, 5, false);
						}
						if (colQtyInRs_tPostgresqlInput_4 < 6) {
							row4.codigo_proyecto_snies = null;
						} else {

							if (rs_tPostgresqlInput_4.getObject(6) != null) {
								row4.codigo_proyecto_snies = rs_tPostgresqlInput_4
										.getInt(6);
							} else {
								row4.codigo_proyecto_snies = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_4 < 7) {
							row4.proyecto_snies = null;
						} else {

							row4.proyecto_snies = routines.system.JDBCUtil
									.getString(rs_tPostgresqlInput_4, 7, false);
						}
						if (colQtyInRs_tPostgresqlInput_4 < 8) {
							row4.codigo_proyecto = null;
						} else {

							if (rs_tPostgresqlInput_4.getObject(8) != null) {
								row4.codigo_proyecto = rs_tPostgresqlInput_4
										.getInt(8);
							} else {
								row4.codigo_proyecto = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_4 < 9) {
							row4.proyecto = null;
						} else {

							row4.proyecto = routines.system.JDBCUtil.getString(
									rs_tPostgresqlInput_4, 9, false);
						}
						if (colQtyInRs_tPostgresqlInput_4 < 10) {
							row4.primiparos = null;
						} else {

							if (rs_tPostgresqlInput_4.getObject(10) != null) {
								row4.primiparos = rs_tPostgresqlInput_4
										.getInt(10);
							} else {
								row4.primiparos = null;
							}
						}

						/**
						 * [tPostgresqlInput_4 begin ] stop
						 */

						/**
						 * [tPostgresqlInput_4 main ] start
						 */

						currentComponent = "tPostgresqlInput_4";

						tos_count_tPostgresqlInput_4++;

						/**
						 * [tPostgresqlInput_4 main ] stop
						 */

						/**
						 * [tPostgresqlInput_4 process_data_begin ] start
						 */

						currentComponent = "tPostgresqlInput_4";

						/**
						 * [tPostgresqlInput_4 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row4 main ] start
						 */

						currentComponent = "tAdvancedHash_row4";

						// row4
						// row4

						if (execStat) {
							runStat.updateStatOnConnection("row4" + iterateId,
									1, 1);
						}

						row4Struct row4_HashRow = new row4Struct();

						row4_HashRow.anno = row4.anno;

						row4_HashRow.semestre = row4.semestre;

						row4_HashRow.anno_semestre = row4.anno_semestre;

						row4_HashRow.codigo_facultad = row4.codigo_facultad;

						row4_HashRow.facultad = row4.facultad;

						row4_HashRow.codigo_proyecto_snies = row4.codigo_proyecto_snies;

						row4_HashRow.proyecto_snies = row4.proyecto_snies;

						row4_HashRow.codigo_proyecto = row4.codigo_proyecto;

						row4_HashRow.proyecto = row4.proyecto;

						row4_HashRow.primiparos = row4.primiparos;

						tHash_Lookup_row4.put(row4_HashRow);

						tos_count_tAdvancedHash_row4++;

						/**
						 * [tAdvancedHash_row4 main ] stop
						 */

						/**
						 * [tAdvancedHash_row4 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_row4";

						/**
						 * [tAdvancedHash_row4 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row4 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_row4";

						/**
						 * [tAdvancedHash_row4 process_data_end ] stop
						 */

						/**
						 * [tPostgresqlInput_4 process_data_end ] start
						 */

						currentComponent = "tPostgresqlInput_4";

						/**
						 * [tPostgresqlInput_4 process_data_end ] stop
						 */

						/**
						 * [tPostgresqlInput_4 end ] start
						 */

						currentComponent = "tPostgresqlInput_4";

					}
				} finally {
					if (rs_tPostgresqlInput_4 != null) {
						rs_tPostgresqlInput_4.close();
					}
					if (stmt_tPostgresqlInput_4 != null) {
						stmt_tPostgresqlInput_4.close();
					}
					if (conn_tPostgresqlInput_4 != null
							&& !conn_tPostgresqlInput_4.isClosed()) {

						conn_tPostgresqlInput_4.commit();

						conn_tPostgresqlInput_4.close();

					}

				}
				globalMap.put("tPostgresqlInput_4_NB_LINE",
						nb_line_tPostgresqlInput_4);

				ok_Hash.put("tPostgresqlInput_4", true);
				end_Hash.put("tPostgresqlInput_4", System.currentTimeMillis());

				/**
				 * [tPostgresqlInput_4 end ] stop
				 */

				/**
				 * [tAdvancedHash_row4 end ] start
				 */

				currentComponent = "tAdvancedHash_row4";

				tHash_Lookup_row4.endPut();

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row4" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tAdvancedHash_row4", true);
				end_Hash.put("tAdvancedHash_row4", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row4 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tPostgresqlInput_4 finally ] start
				 */

				currentComponent = "tPostgresqlInput_4";

				/**
				 * [tPostgresqlInput_4 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row4 finally ] start
				 */

				currentComponent = "tAdvancedHash_row4";

				/**
				 * [tAdvancedHash_row4 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostgresqlInput_4_SUBPROCESS_STATE", 1);
	}

	public static class row5Struct implements
			routines.system.IPersistableComparableLookupRow<row5Struct> {
		final static byte[] commonByteArrayLock_DMINDICADORES_cuadro_maestro_estudiantes = new byte[0];
		static byte[] commonByteArray_DMINDICADORES_cuadro_maestro_estudiantes = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer anno;

		public Integer getAnno() {
			return this.anno;
		}

		public Integer semestre;

		public Integer getSemestre() {
			return this.semestre;
		}

		public String anno_semestre;

		public String getAnno_semestre() {
			return this.anno_semestre;
		}

		public int codigo_facultad;

		public int getCodigo_facultad() {
			return this.codigo_facultad;
		}

		public String facultad;

		public String getFacultad() {
			return this.facultad;
		}

		public int codigo_proyecto_snies;

		public int getCodigo_proyecto_snies() {
			return this.codigo_proyecto_snies;
		}

		public String proyecto_snies;

		public String getProyecto_snies() {
			return this.proyecto_snies;
		}

		public int codigo_proyecto;

		public int getCodigo_proyecto() {
			return this.codigo_proyecto;
		}

		public String proyecto;

		public String getProyecto() {
			return this.proyecto;
		}

		public Integer egresados;

		public Integer getEgresados() {
			return this.egresados;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.anno == null) ? 0 : this.anno.hashCode());

				result = prime
						* result
						+ ((this.semestre == null) ? 0 : this.semestre
								.hashCode());

				result = prime * result + (int) this.codigo_facultad;

				result = prime * result + (int) this.codigo_proyecto;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row5Struct other = (row5Struct) obj;

			if (this.anno == null) {
				if (other.anno != null)
					return false;

			} else if (!this.anno.equals(other.anno))

				return false;

			if (this.semestre == null) {
				if (other.semestre != null)
					return false;

			} else if (!this.semestre.equals(other.semestre))

				return false;

			if (this.codigo_facultad != other.codigo_facultad)
				return false;

			if (this.codigo_proyecto != other.codigo_proyecto)
				return false;

			return true;
		}

		public void copyDataTo(row5Struct other) {

			other.anno = this.anno;
			other.semestre = this.semestre;
			other.anno_semestre = this.anno_semestre;
			other.codigo_facultad = this.codigo_facultad;
			other.facultad = this.facultad;
			other.codigo_proyecto_snies = this.codigo_proyecto_snies;
			other.proyecto_snies = this.proyecto_snies;
			other.codigo_proyecto = this.codigo_proyecto;
			other.proyecto = this.proyecto;
			other.egresados = this.egresados;

		}

		public void copyKeysDataTo(row5Struct other) {

			other.anno = this.anno;
			other.semestre = this.semestre;
			other.codigo_facultad = this.codigo_facultad;
			other.codigo_proyecto = this.codigo_proyecto;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DMINDICADORES_cuadro_maestro_estudiantes) {

				try {

					int length = 0;

					this.anno = readInteger(dis);

					this.semestre = readInteger(dis);

					this.codigo_facultad = dis.readInt();

					this.codigo_proyecto = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.anno, dos);

				// Integer

				writeInteger(this.semestre, dos);

				// int

				dos.writeInt(this.codigo_facultad);

				// int

				dos.writeInt(this.codigo_proyecto);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.anno_semestre = readString(dis, ois);

				this.facultad = readString(dis, ois);

				this.codigo_proyecto_snies = dis.readInt();

				this.proyecto_snies = readString(dis, ois);

				this.proyecto = readString(dis, ois);

				this.egresados = readInteger(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.anno_semestre, dos, oos);

				writeString(this.facultad, dos, oos);

				dos.writeInt(this.codigo_proyecto_snies);

				writeString(this.proyecto_snies, dos, oos);

				writeString(this.proyecto, dos, oos);

				writeInteger(this.egresados, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("anno=" + String.valueOf(anno));
			sb.append(",semestre=" + String.valueOf(semestre));
			sb.append(",anno_semestre=" + anno_semestre);
			sb.append(",codigo_facultad=" + String.valueOf(codigo_facultad));
			sb.append(",facultad=" + facultad);
			sb.append(",codigo_proyecto_snies="
					+ String.valueOf(codigo_proyecto_snies));
			sb.append(",proyecto_snies=" + proyecto_snies);
			sb.append(",codigo_proyecto=" + String.valueOf(codigo_proyecto));
			sb.append(",proyecto=" + proyecto);
			sb.append(",egresados=" + String.valueOf(egresados));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.anno, other.anno);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.semestre, other.semestre);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.codigo_facultad,
					other.codigo_facultad);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.codigo_proyecto,
					other.codigo_proyecto);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tPostgresqlInput_5Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlInput_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row5Struct row5 = new row5Struct();

				/**
				 * [tAdvancedHash_row5 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row5", false);
				start_Hash
						.put("tAdvancedHash_row5", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row5";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row5" + iterateId, 0, 0);

					}
				}

				int tos_count_tAdvancedHash_row5 = 0;

				// connection name:row5
				// source node:tPostgresqlInput_5 -
				// inputs:(after_tPostgresqlInput_9) outputs:(row5,row5) |
				// target node:tAdvancedHash_row5 - inputs:(row5) outputs:()
				// linked node: tMap_1 -
				// inputs:(row9,row3,row2,row1,row4,row5,row6,row7,row8,row10)
				// outputs:(cuadro_maestro)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row5 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct> tHash_Lookup_row5 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row5Struct> getLookup(matchingModeEnum_row5);

				globalMap.put("tHash_Lookup_row5", tHash_Lookup_row5);

				/**
				 * [tAdvancedHash_row5 begin ] stop
				 */

				/**
				 * [tPostgresqlInput_5 begin ] start
				 */

				ok_Hash.put("tPostgresqlInput_5", false);
				start_Hash
						.put("tPostgresqlInput_5", System.currentTimeMillis());

				currentComponent = "tPostgresqlInput_5";

				int tos_count_tPostgresqlInput_5 = 0;

				int nb_line_tPostgresqlInput_5 = 0;
				java.sql.Connection conn_tPostgresqlInput_5 = null;
				String driverClass_tPostgresqlInput_5 = "org.postgresql.Driver";
				java.lang.Class.forName(driverClass_tPostgresqlInput_5);
				String dbUser_tPostgresqlInput_5 = "postgres";

				final String decryptedPassword_tPostgresqlInput_5 = routines.system.PasswordEncryptUtil
						.decryptPassword("610243e4ca33e325f4f7aba1746784ea");

				String dbPwd_tPostgresqlInput_5 = decryptedPassword_tPostgresqlInput_5;

				String url_tPostgresqlInput_5 = "jdbc:postgresql://"
						+ "10.20.0.88" + ":" + "5432" + "/" + "DMINDICADORES";

				conn_tPostgresqlInput_5 = java.sql.DriverManager.getConnection(
						url_tPostgresqlInput_5, dbUser_tPostgresqlInput_5,
						dbPwd_tPostgresqlInput_5);

				conn_tPostgresqlInput_5.setAutoCommit(false);

				java.sql.Statement stmt_tPostgresqlInput_5 = conn_tPostgresqlInput_5
						.createStatement();

				String dbquery_tPostgresqlInput_5 = "SELECT anno,semestre, anno||'-'||semestre anno_semestre,\n       codigo_facultad,codigo_facultad||'-'||facultad facultad"
						+ ", codigo_proyecto_snies, codigo_proyecto_snies||'-'||proyecto_snies proyecto_snies, codigo_proyecto,codigo_proyecto||'-'"
						+ "||proyecto proyecto,\n       count(documento) egresados\n  FROM egresado\n  GROUP BY anno,semestre, codigo_facultad, facult"
						+ "ad, codigo_proyecto_snies, proyecto_snies,codigo_proyecto,proyecto\n  ORDER BY anno,semestre, codigo_facultad, codigo_pro"
						+ "yecto_snies\n";

				globalMap.put("tPostgresqlInput_5_QUERY",
						dbquery_tPostgresqlInput_5);
				java.sql.ResultSet rs_tPostgresqlInput_5 = null;

				try {
					rs_tPostgresqlInput_5 = stmt_tPostgresqlInput_5
							.executeQuery(dbquery_tPostgresqlInput_5);
					java.sql.ResultSetMetaData rsmd_tPostgresqlInput_5 = rs_tPostgresqlInput_5
							.getMetaData();
					int colQtyInRs_tPostgresqlInput_5 = rsmd_tPostgresqlInput_5
							.getColumnCount();

					String tmpContent_tPostgresqlInput_5 = null;

					while (rs_tPostgresqlInput_5.next()) {
						nb_line_tPostgresqlInput_5++;

						if (colQtyInRs_tPostgresqlInput_5 < 1) {
							row5.anno = null;
						} else {

							if (rs_tPostgresqlInput_5.getObject(1) != null) {
								row5.anno = rs_tPostgresqlInput_5.getInt(1);
							} else {
								row5.anno = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_5 < 2) {
							row5.semestre = null;
						} else {

							if (rs_tPostgresqlInput_5.getObject(2) != null) {
								row5.semestre = rs_tPostgresqlInput_5.getInt(2);
							} else {
								row5.semestre = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_5 < 3) {
							row5.anno_semestre = null;
						} else {

							row5.anno_semestre = routines.system.JDBCUtil
									.getString(rs_tPostgresqlInput_5, 3, false);
						}
						if (colQtyInRs_tPostgresqlInput_5 < 4) {
							row5.codigo_facultad = 0;
						} else {

							if (rs_tPostgresqlInput_5.getObject(4) != null) {
								row5.codigo_facultad = rs_tPostgresqlInput_5
										.getInt(4);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tPostgresqlInput_5 < 5) {
							row5.facultad = null;
						} else {

							row5.facultad = routines.system.JDBCUtil.getString(
									rs_tPostgresqlInput_5, 5, false);
						}
						if (colQtyInRs_tPostgresqlInput_5 < 6) {
							row5.codigo_proyecto_snies = 0;
						} else {

							if (rs_tPostgresqlInput_5.getObject(6) != null) {
								row5.codigo_proyecto_snies = rs_tPostgresqlInput_5
										.getInt(6);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tPostgresqlInput_5 < 7) {
							row5.proyecto_snies = null;
						} else {

							row5.proyecto_snies = routines.system.JDBCUtil
									.getString(rs_tPostgresqlInput_5, 7, false);
						}
						if (colQtyInRs_tPostgresqlInput_5 < 8) {
							row5.codigo_proyecto = 0;
						} else {

							if (rs_tPostgresqlInput_5.getObject(8) != null) {
								row5.codigo_proyecto = rs_tPostgresqlInput_5
										.getInt(8);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tPostgresqlInput_5 < 9) {
							row5.proyecto = null;
						} else {

							row5.proyecto = routines.system.JDBCUtil.getString(
									rs_tPostgresqlInput_5, 9, false);
						}
						if (colQtyInRs_tPostgresqlInput_5 < 10) {
							row5.egresados = null;
						} else {

							if (rs_tPostgresqlInput_5.getObject(10) != null) {
								row5.egresados = rs_tPostgresqlInput_5
										.getInt(10);
							} else {
								row5.egresados = null;
							}
						}

						/**
						 * [tPostgresqlInput_5 begin ] stop
						 */

						/**
						 * [tPostgresqlInput_5 main ] start
						 */

						currentComponent = "tPostgresqlInput_5";

						tos_count_tPostgresqlInput_5++;

						/**
						 * [tPostgresqlInput_5 main ] stop
						 */

						/**
						 * [tPostgresqlInput_5 process_data_begin ] start
						 */

						currentComponent = "tPostgresqlInput_5";

						/**
						 * [tPostgresqlInput_5 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row5 main ] start
						 */

						currentComponent = "tAdvancedHash_row5";

						// row5
						// row5

						if (execStat) {
							runStat.updateStatOnConnection("row5" + iterateId,
									1, 1);
						}

						row5Struct row5_HashRow = new row5Struct();

						row5_HashRow.anno = row5.anno;

						row5_HashRow.semestre = row5.semestre;

						row5_HashRow.anno_semestre = row5.anno_semestre;

						row5_HashRow.codigo_facultad = row5.codigo_facultad;

						row5_HashRow.facultad = row5.facultad;

						row5_HashRow.codigo_proyecto_snies = row5.codigo_proyecto_snies;

						row5_HashRow.proyecto_snies = row5.proyecto_snies;

						row5_HashRow.codigo_proyecto = row5.codigo_proyecto;

						row5_HashRow.proyecto = row5.proyecto;

						row5_HashRow.egresados = row5.egresados;

						tHash_Lookup_row5.put(row5_HashRow);

						tos_count_tAdvancedHash_row5++;

						/**
						 * [tAdvancedHash_row5 main ] stop
						 */

						/**
						 * [tAdvancedHash_row5 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_row5";

						/**
						 * [tAdvancedHash_row5 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row5 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_row5";

						/**
						 * [tAdvancedHash_row5 process_data_end ] stop
						 */

						/**
						 * [tPostgresqlInput_5 process_data_end ] start
						 */

						currentComponent = "tPostgresqlInput_5";

						/**
						 * [tPostgresqlInput_5 process_data_end ] stop
						 */

						/**
						 * [tPostgresqlInput_5 end ] start
						 */

						currentComponent = "tPostgresqlInput_5";

					}
				} finally {
					if (rs_tPostgresqlInput_5 != null) {
						rs_tPostgresqlInput_5.close();
					}
					if (stmt_tPostgresqlInput_5 != null) {
						stmt_tPostgresqlInput_5.close();
					}
					if (conn_tPostgresqlInput_5 != null
							&& !conn_tPostgresqlInput_5.isClosed()) {

						conn_tPostgresqlInput_5.commit();

						conn_tPostgresqlInput_5.close();

					}

				}
				globalMap.put("tPostgresqlInput_5_NB_LINE",
						nb_line_tPostgresqlInput_5);

				ok_Hash.put("tPostgresqlInput_5", true);
				end_Hash.put("tPostgresqlInput_5", System.currentTimeMillis());

				/**
				 * [tPostgresqlInput_5 end ] stop
				 */

				/**
				 * [tAdvancedHash_row5 end ] start
				 */

				currentComponent = "tAdvancedHash_row5";

				tHash_Lookup_row5.endPut();

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row5" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tAdvancedHash_row5", true);
				end_Hash.put("tAdvancedHash_row5", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row5 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tPostgresqlInput_5 finally ] start
				 */

				currentComponent = "tPostgresqlInput_5";

				/**
				 * [tPostgresqlInput_5 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row5 finally ] start
				 */

				currentComponent = "tAdvancedHash_row5";

				/**
				 * [tAdvancedHash_row5 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostgresqlInput_5_SUBPROCESS_STATE", 1);
	}

	public static class row6Struct implements
			routines.system.IPersistableComparableLookupRow<row6Struct> {
		final static byte[] commonByteArrayLock_DMINDICADORES_cuadro_maestro_estudiantes = new byte[0];
		static byte[] commonByteArray_DMINDICADORES_cuadro_maestro_estudiantes = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer anno;

		public Integer getAnno() {
			return this.anno;
		}

		public Integer semestre;

		public Integer getSemestre() {
			return this.semestre;
		}

		public String anno_semestre;

		public String getAnno_semestre() {
			return this.anno_semestre;
		}

		public Integer codigo_facultad;

		public Integer getCodigo_facultad() {
			return this.codigo_facultad;
		}

		public Integer codigo_proyecto_snies;

		public Integer getCodigo_proyecto_snies() {
			return this.codigo_proyecto_snies;
		}

		public Integer cupos;

		public Integer getCupos() {
			return this.cupos;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.anno == null) ? 0 : this.anno.hashCode());

				result = prime
						* result
						+ ((this.semestre == null) ? 0 : this.semestre
								.hashCode());

				result = prime
						* result
						+ ((this.codigo_facultad == null) ? 0
								: this.codigo_facultad.hashCode());

				result = prime
						* result
						+ ((this.codigo_proyecto_snies == null) ? 0
								: this.codigo_proyecto_snies.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row6Struct other = (row6Struct) obj;

			if (this.anno == null) {
				if (other.anno != null)
					return false;

			} else if (!this.anno.equals(other.anno))

				return false;

			if (this.semestre == null) {
				if (other.semestre != null)
					return false;

			} else if (!this.semestre.equals(other.semestre))

				return false;

			if (this.codigo_facultad == null) {
				if (other.codigo_facultad != null)
					return false;

			} else if (!this.codigo_facultad.equals(other.codigo_facultad))

				return false;

			if (this.codigo_proyecto_snies == null) {
				if (other.codigo_proyecto_snies != null)
					return false;

			} else if (!this.codigo_proyecto_snies
					.equals(other.codigo_proyecto_snies))

				return false;

			return true;
		}

		public void copyDataTo(row6Struct other) {

			other.anno = this.anno;
			other.semestre = this.semestre;
			other.anno_semestre = this.anno_semestre;
			other.codigo_facultad = this.codigo_facultad;
			other.codigo_proyecto_snies = this.codigo_proyecto_snies;
			other.cupos = this.cupos;

		}

		public void copyKeysDataTo(row6Struct other) {

			other.anno = this.anno;
			other.semestre = this.semestre;
			other.codigo_facultad = this.codigo_facultad;
			other.codigo_proyecto_snies = this.codigo_proyecto_snies;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DMINDICADORES_cuadro_maestro_estudiantes) {

				try {

					int length = 0;

					this.anno = readInteger(dis);

					this.semestre = readInteger(dis);

					this.codigo_facultad = readInteger(dis);

					this.codigo_proyecto_snies = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.anno, dos);

				// Integer

				writeInteger(this.semestre, dos);

				// Integer

				writeInteger(this.codigo_facultad, dos);

				// Integer

				writeInteger(this.codigo_proyecto_snies, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.anno_semestre = readString(dis, ois);

				this.cupos = readInteger(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.anno_semestre, dos, oos);

				writeInteger(this.cupos, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("anno=" + String.valueOf(anno));
			sb.append(",semestre=" + String.valueOf(semestre));
			sb.append(",anno_semestre=" + anno_semestre);
			sb.append(",codigo_facultad=" + String.valueOf(codigo_facultad));
			sb.append(",codigo_proyecto_snies="
					+ String.valueOf(codigo_proyecto_snies));
			sb.append(",cupos=" + String.valueOf(cupos));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.anno, other.anno);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.semestre, other.semestre);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.codigo_facultad,
					other.codigo_facultad);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.codigo_proyecto_snies,
					other.codigo_proyecto_snies);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tPostgresqlInput_6Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlInput_6_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row6Struct row6 = new row6Struct();

				/**
				 * [tAdvancedHash_row6 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row6", false);
				start_Hash
						.put("tAdvancedHash_row6", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row6";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row6" + iterateId, 0, 0);

					}
				}

				int tos_count_tAdvancedHash_row6 = 0;

				// connection name:row6
				// source node:tPostgresqlInput_6 -
				// inputs:(after_tPostgresqlInput_9) outputs:(row6,row6) |
				// target node:tAdvancedHash_row6 - inputs:(row6) outputs:()
				// linked node: tMap_1 -
				// inputs:(row9,row3,row2,row1,row4,row5,row6,row7,row8,row10)
				// outputs:(cuadro_maestro)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row6 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct> tHash_Lookup_row6 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row6Struct> getLookup(matchingModeEnum_row6);

				globalMap.put("tHash_Lookup_row6", tHash_Lookup_row6);

				/**
				 * [tAdvancedHash_row6 begin ] stop
				 */

				/**
				 * [tPostgresqlInput_6 begin ] start
				 */

				ok_Hash.put("tPostgresqlInput_6", false);
				start_Hash
						.put("tPostgresqlInput_6", System.currentTimeMillis());

				currentComponent = "tPostgresqlInput_6";

				int tos_count_tPostgresqlInput_6 = 0;

				int nb_line_tPostgresqlInput_6 = 0;
				java.sql.Connection conn_tPostgresqlInput_6 = null;
				String driverClass_tPostgresqlInput_6 = "org.postgresql.Driver";
				java.lang.Class.forName(driverClass_tPostgresqlInput_6);
				String dbUser_tPostgresqlInput_6 = "postgres";

				final String decryptedPassword_tPostgresqlInput_6 = routines.system.PasswordEncryptUtil
						.decryptPassword("610243e4ca33e325f4f7aba1746784ea");

				String dbPwd_tPostgresqlInput_6 = decryptedPassword_tPostgresqlInput_6;

				String url_tPostgresqlInput_6 = "jdbc:postgresql://"
						+ "10.20.0.88" + ":" + "5432" + "/" + "DMINDICADORES";

				conn_tPostgresqlInput_6 = java.sql.DriverManager.getConnection(
						url_tPostgresqlInput_6, dbUser_tPostgresqlInput_6,
						dbPwd_tPostgresqlInput_6);

				conn_tPostgresqlInput_6.setAutoCommit(false);

				java.sql.Statement stmt_tPostgresqlInput_6 = conn_tPostgresqlInput_6
						.createStatement();

				String dbquery_tPostgresqlInput_6 = "SELECT \"Ano\" anno, \"SEMESTRE\" semestre, \"Ano\"||'-'||\"SEMESTRE\" as anno_semestre,cod_fac  as codigo_facultad, co"
						+ "d_pro as codigo_proyecto_snies,\n    \"CUPOS\" as cupos\nfrom cupos\norder by \"Ano\", \"SEMESTRE\"";

				globalMap.put("tPostgresqlInput_6_QUERY",
						dbquery_tPostgresqlInput_6);
				java.sql.ResultSet rs_tPostgresqlInput_6 = null;

				try {
					rs_tPostgresqlInput_6 = stmt_tPostgresqlInput_6
							.executeQuery(dbquery_tPostgresqlInput_6);
					java.sql.ResultSetMetaData rsmd_tPostgresqlInput_6 = rs_tPostgresqlInput_6
							.getMetaData();
					int colQtyInRs_tPostgresqlInput_6 = rsmd_tPostgresqlInput_6
							.getColumnCount();

					String tmpContent_tPostgresqlInput_6 = null;

					while (rs_tPostgresqlInput_6.next()) {
						nb_line_tPostgresqlInput_6++;

						if (colQtyInRs_tPostgresqlInput_6 < 1) {
							row6.anno = null;
						} else {

							if (rs_tPostgresqlInput_6.getObject(1) != null) {
								row6.anno = rs_tPostgresqlInput_6.getInt(1);
							} else {
								row6.anno = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_6 < 2) {
							row6.semestre = null;
						} else {

							if (rs_tPostgresqlInput_6.getObject(2) != null) {
								row6.semestre = rs_tPostgresqlInput_6.getInt(2);
							} else {
								row6.semestre = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_6 < 3) {
							row6.anno_semestre = null;
						} else {

							row6.anno_semestre = routines.system.JDBCUtil
									.getString(rs_tPostgresqlInput_6, 3, false);
						}
						if (colQtyInRs_tPostgresqlInput_6 < 4) {
							row6.codigo_facultad = null;
						} else {

							if (rs_tPostgresqlInput_6.getObject(4) != null) {
								row6.codigo_facultad = rs_tPostgresqlInput_6
										.getInt(4);
							} else {
								row6.codigo_facultad = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_6 < 5) {
							row6.codigo_proyecto_snies = null;
						} else {

							if (rs_tPostgresqlInput_6.getObject(5) != null) {
								row6.codigo_proyecto_snies = rs_tPostgresqlInput_6
										.getInt(5);
							} else {
								row6.codigo_proyecto_snies = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_6 < 6) {
							row6.cupos = null;
						} else {

							if (rs_tPostgresqlInput_6.getObject(6) != null) {
								row6.cupos = rs_tPostgresqlInput_6.getInt(6);
							} else {
								row6.cupos = null;
							}
						}

						/**
						 * [tPostgresqlInput_6 begin ] stop
						 */

						/**
						 * [tPostgresqlInput_6 main ] start
						 */

						currentComponent = "tPostgresqlInput_6";

						tos_count_tPostgresqlInput_6++;

						/**
						 * [tPostgresqlInput_6 main ] stop
						 */

						/**
						 * [tPostgresqlInput_6 process_data_begin ] start
						 */

						currentComponent = "tPostgresqlInput_6";

						/**
						 * [tPostgresqlInput_6 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row6 main ] start
						 */

						currentComponent = "tAdvancedHash_row6";

						// row6
						// row6

						if (execStat) {
							runStat.updateStatOnConnection("row6" + iterateId,
									1, 1);
						}

						row6Struct row6_HashRow = new row6Struct();

						row6_HashRow.anno = row6.anno;

						row6_HashRow.semestre = row6.semestre;

						row6_HashRow.anno_semestre = row6.anno_semestre;

						row6_HashRow.codigo_facultad = row6.codigo_facultad;

						row6_HashRow.codigo_proyecto_snies = row6.codigo_proyecto_snies;

						row6_HashRow.cupos = row6.cupos;

						tHash_Lookup_row6.put(row6_HashRow);

						tos_count_tAdvancedHash_row6++;

						/**
						 * [tAdvancedHash_row6 main ] stop
						 */

						/**
						 * [tAdvancedHash_row6 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_row6";

						/**
						 * [tAdvancedHash_row6 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row6 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_row6";

						/**
						 * [tAdvancedHash_row6 process_data_end ] stop
						 */

						/**
						 * [tPostgresqlInput_6 process_data_end ] start
						 */

						currentComponent = "tPostgresqlInput_6";

						/**
						 * [tPostgresqlInput_6 process_data_end ] stop
						 */

						/**
						 * [tPostgresqlInput_6 end ] start
						 */

						currentComponent = "tPostgresqlInput_6";

					}
				} finally {
					if (rs_tPostgresqlInput_6 != null) {
						rs_tPostgresqlInput_6.close();
					}
					if (stmt_tPostgresqlInput_6 != null) {
						stmt_tPostgresqlInput_6.close();
					}
					if (conn_tPostgresqlInput_6 != null
							&& !conn_tPostgresqlInput_6.isClosed()) {

						conn_tPostgresqlInput_6.commit();

						conn_tPostgresqlInput_6.close();

					}

				}
				globalMap.put("tPostgresqlInput_6_NB_LINE",
						nb_line_tPostgresqlInput_6);

				ok_Hash.put("tPostgresqlInput_6", true);
				end_Hash.put("tPostgresqlInput_6", System.currentTimeMillis());

				/**
				 * [tPostgresqlInput_6 end ] stop
				 */

				/**
				 * [tAdvancedHash_row6 end ] start
				 */

				currentComponent = "tAdvancedHash_row6";

				tHash_Lookup_row6.endPut();

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row6" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tAdvancedHash_row6", true);
				end_Hash.put("tAdvancedHash_row6", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row6 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tPostgresqlInput_6 finally ] start
				 */

				currentComponent = "tPostgresqlInput_6";

				/**
				 * [tPostgresqlInput_6 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row6 finally ] start
				 */

				currentComponent = "tAdvancedHash_row6";

				/**
				 * [tAdvancedHash_row6 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostgresqlInput_6_SUBPROCESS_STATE", 1);
	}

	public static class row7Struct implements
			routines.system.IPersistableComparableLookupRow<row7Struct> {
		final static byte[] commonByteArrayLock_DMINDICADORES_cuadro_maestro_estudiantes = new byte[0];
		static byte[] commonByteArray_DMINDICADORES_cuadro_maestro_estudiantes = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer anno;

		public Integer getAnno() {
			return this.anno;
		}

		public Integer semestre;

		public Integer getSemestre() {
			return this.semestre;
		}

		public String anno_semestre;

		public String getAnno_semestre() {
			return this.anno_semestre;
		}

		public int codigo_facultad;

		public int getCodigo_facultad() {
			return this.codigo_facultad;
		}

		public String facultad;

		public String getFacultad() {
			return this.facultad;
		}

		public int codigo_proyecto_snies;

		public int getCodigo_proyecto_snies() {
			return this.codigo_proyecto_snies;
		}

		public String proyecto_snies;

		public String getProyecto_snies() {
			return this.proyecto_snies;
		}

		public int codigo_proyecto;

		public int getCodigo_proyecto() {
			return this.codigo_proyecto;
		}

		public String proyecto;

		public String getProyecto() {
			return this.proyecto;
		}

		public Integer retiros;

		public Integer getRetiros() {
			return this.retiros;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.anno == null) ? 0 : this.anno.hashCode());

				result = prime
						* result
						+ ((this.semestre == null) ? 0 : this.semestre
								.hashCode());

				result = prime * result + (int) this.codigo_facultad;

				result = prime * result + (int) this.codigo_proyecto;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row7Struct other = (row7Struct) obj;

			if (this.anno == null) {
				if (other.anno != null)
					return false;

			} else if (!this.anno.equals(other.anno))

				return false;

			if (this.semestre == null) {
				if (other.semestre != null)
					return false;

			} else if (!this.semestre.equals(other.semestre))

				return false;

			if (this.codigo_facultad != other.codigo_facultad)
				return false;

			if (this.codigo_proyecto != other.codigo_proyecto)
				return false;

			return true;
		}

		public void copyDataTo(row7Struct other) {

			other.anno = this.anno;
			other.semestre = this.semestre;
			other.anno_semestre = this.anno_semestre;
			other.codigo_facultad = this.codigo_facultad;
			other.facultad = this.facultad;
			other.codigo_proyecto_snies = this.codigo_proyecto_snies;
			other.proyecto_snies = this.proyecto_snies;
			other.codigo_proyecto = this.codigo_proyecto;
			other.proyecto = this.proyecto;
			other.retiros = this.retiros;

		}

		public void copyKeysDataTo(row7Struct other) {

			other.anno = this.anno;
			other.semestre = this.semestre;
			other.codigo_facultad = this.codigo_facultad;
			other.codigo_proyecto = this.codigo_proyecto;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DMINDICADORES_cuadro_maestro_estudiantes) {

				try {

					int length = 0;

					this.anno = readInteger(dis);

					this.semestre = readInteger(dis);

					this.codigo_facultad = dis.readInt();

					this.codigo_proyecto = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.anno, dos);

				// Integer

				writeInteger(this.semestre, dos);

				// int

				dos.writeInt(this.codigo_facultad);

				// int

				dos.writeInt(this.codigo_proyecto);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.anno_semestre = readString(dis, ois);

				this.facultad = readString(dis, ois);

				this.codigo_proyecto_snies = dis.readInt();

				this.proyecto_snies = readString(dis, ois);

				this.proyecto = readString(dis, ois);

				this.retiros = readInteger(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.anno_semestre, dos, oos);

				writeString(this.facultad, dos, oos);

				dos.writeInt(this.codigo_proyecto_snies);

				writeString(this.proyecto_snies, dos, oos);

				writeString(this.proyecto, dos, oos);

				writeInteger(this.retiros, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("anno=" + String.valueOf(anno));
			sb.append(",semestre=" + String.valueOf(semestre));
			sb.append(",anno_semestre=" + anno_semestre);
			sb.append(",codigo_facultad=" + String.valueOf(codigo_facultad));
			sb.append(",facultad=" + facultad);
			sb.append(",codigo_proyecto_snies="
					+ String.valueOf(codigo_proyecto_snies));
			sb.append(",proyecto_snies=" + proyecto_snies);
			sb.append(",codigo_proyecto=" + String.valueOf(codigo_proyecto));
			sb.append(",proyecto=" + proyecto);
			sb.append(",retiros=" + String.valueOf(retiros));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row7Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.anno, other.anno);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.semestre, other.semestre);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.codigo_facultad,
					other.codigo_facultad);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.codigo_proyecto,
					other.codigo_proyecto);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tPostgresqlInput_7Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlInput_7_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row7Struct row7 = new row7Struct();

				/**
				 * [tAdvancedHash_row7 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row7", false);
				start_Hash
						.put("tAdvancedHash_row7", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row7";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row7" + iterateId, 0, 0);

					}
				}

				int tos_count_tAdvancedHash_row7 = 0;

				// connection name:row7
				// source node:tPostgresqlInput_7 -
				// inputs:(after_tPostgresqlInput_9) outputs:(row7,row7) |
				// target node:tAdvancedHash_row7 - inputs:(row7) outputs:()
				// linked node: tMap_1 -
				// inputs:(row9,row3,row2,row1,row4,row5,row6,row7,row8,row10)
				// outputs:(cuadro_maestro)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row7 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct> tHash_Lookup_row7 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row7Struct> getLookup(matchingModeEnum_row7);

				globalMap.put("tHash_Lookup_row7", tHash_Lookup_row7);

				/**
				 * [tAdvancedHash_row7 begin ] stop
				 */

				/**
				 * [tPostgresqlInput_7 begin ] start
				 */

				ok_Hash.put("tPostgresqlInput_7", false);
				start_Hash
						.put("tPostgresqlInput_7", System.currentTimeMillis());

				currentComponent = "tPostgresqlInput_7";

				int tos_count_tPostgresqlInput_7 = 0;

				int nb_line_tPostgresqlInput_7 = 0;
				java.sql.Connection conn_tPostgresqlInput_7 = null;
				String driverClass_tPostgresqlInput_7 = "org.postgresql.Driver";
				java.lang.Class.forName(driverClass_tPostgresqlInput_7);
				String dbUser_tPostgresqlInput_7 = "postgres";

				final String decryptedPassword_tPostgresqlInput_7 = routines.system.PasswordEncryptUtil
						.decryptPassword("610243e4ca33e325f4f7aba1746784ea");

				String dbPwd_tPostgresqlInput_7 = decryptedPassword_tPostgresqlInput_7;

				String url_tPostgresqlInput_7 = "jdbc:postgresql://"
						+ "10.20.0.88" + ":" + "5432" + "/" + "DMINDICADORES";

				conn_tPostgresqlInput_7 = java.sql.DriverManager.getConnection(
						url_tPostgresqlInput_7, dbUser_tPostgresqlInput_7,
						dbPwd_tPostgresqlInput_7);

				conn_tPostgresqlInput_7.setAutoCommit(false);

				java.sql.Statement stmt_tPostgresqlInput_7 = conn_tPostgresqlInput_7
						.createStatement();

				String dbquery_tPostgresqlInput_7 = "SELECT anno,semestre, anno||'-'||semestre anno_semestre,\n       codigo_facultad,codigo_facultad||'-'||facultad facultad"
						+ ", codigo_proyecto_snies, codigo_proyecto_snies||'-'||proyecto_snies proyecto_snies, codigo_proyecto,codigo_proyecto||'-'"
						+ "||proyecto proyecto,\n       count(documento) retiros\n  FROM estudiantes_estados where  codigo_estado='R'\n  GROUP BY anno"
						+ ",semestre, codigo_facultad, facultad, codigo_proyecto_snies, proyecto_snies,codigo_proyecto,proyecto\n  ORDER BY anno,sem"
						+ "estre, codigo_facultad, codigo_proyecto_snies";

				globalMap.put("tPostgresqlInput_7_QUERY",
						dbquery_tPostgresqlInput_7);
				java.sql.ResultSet rs_tPostgresqlInput_7 = null;

				try {
					rs_tPostgresqlInput_7 = stmt_tPostgresqlInput_7
							.executeQuery(dbquery_tPostgresqlInput_7);
					java.sql.ResultSetMetaData rsmd_tPostgresqlInput_7 = rs_tPostgresqlInput_7
							.getMetaData();
					int colQtyInRs_tPostgresqlInput_7 = rsmd_tPostgresqlInput_7
							.getColumnCount();

					String tmpContent_tPostgresqlInput_7 = null;

					while (rs_tPostgresqlInput_7.next()) {
						nb_line_tPostgresqlInput_7++;

						if (colQtyInRs_tPostgresqlInput_7 < 1) {
							row7.anno = null;
						} else {

							if (rs_tPostgresqlInput_7.getObject(1) != null) {
								row7.anno = rs_tPostgresqlInput_7.getInt(1);
							} else {
								row7.anno = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_7 < 2) {
							row7.semestre = null;
						} else {

							if (rs_tPostgresqlInput_7.getObject(2) != null) {
								row7.semestre = rs_tPostgresqlInput_7.getInt(2);
							} else {
								row7.semestre = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_7 < 3) {
							row7.anno_semestre = null;
						} else {

							row7.anno_semestre = routines.system.JDBCUtil
									.getString(rs_tPostgresqlInput_7, 3, false);
						}
						if (colQtyInRs_tPostgresqlInput_7 < 4) {
							row7.codigo_facultad = 0;
						} else {

							if (rs_tPostgresqlInput_7.getObject(4) != null) {
								row7.codigo_facultad = rs_tPostgresqlInput_7
										.getInt(4);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tPostgresqlInput_7 < 5) {
							row7.facultad = null;
						} else {

							row7.facultad = routines.system.JDBCUtil.getString(
									rs_tPostgresqlInput_7, 5, false);
						}
						if (colQtyInRs_tPostgresqlInput_7 < 6) {
							row7.codigo_proyecto_snies = 0;
						} else {

							if (rs_tPostgresqlInput_7.getObject(6) != null) {
								row7.codigo_proyecto_snies = rs_tPostgresqlInput_7
										.getInt(6);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tPostgresqlInput_7 < 7) {
							row7.proyecto_snies = null;
						} else {

							row7.proyecto_snies = routines.system.JDBCUtil
									.getString(rs_tPostgresqlInput_7, 7, false);
						}
						if (colQtyInRs_tPostgresqlInput_7 < 8) {
							row7.codigo_proyecto = 0;
						} else {

							if (rs_tPostgresqlInput_7.getObject(8) != null) {
								row7.codigo_proyecto = rs_tPostgresqlInput_7
										.getInt(8);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tPostgresqlInput_7 < 9) {
							row7.proyecto = null;
						} else {

							row7.proyecto = routines.system.JDBCUtil.getString(
									rs_tPostgresqlInput_7, 9, false);
						}
						if (colQtyInRs_tPostgresqlInput_7 < 10) {
							row7.retiros = null;
						} else {

							if (rs_tPostgresqlInput_7.getObject(10) != null) {
								row7.retiros = rs_tPostgresqlInput_7.getInt(10);
							} else {
								row7.retiros = null;
							}
						}

						/**
						 * [tPostgresqlInput_7 begin ] stop
						 */

						/**
						 * [tPostgresqlInput_7 main ] start
						 */

						currentComponent = "tPostgresqlInput_7";

						tos_count_tPostgresqlInput_7++;

						/**
						 * [tPostgresqlInput_7 main ] stop
						 */

						/**
						 * [tPostgresqlInput_7 process_data_begin ] start
						 */

						currentComponent = "tPostgresqlInput_7";

						/**
						 * [tPostgresqlInput_7 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row7 main ] start
						 */

						currentComponent = "tAdvancedHash_row7";

						// row7
						// row7

						if (execStat) {
							runStat.updateStatOnConnection("row7" + iterateId,
									1, 1);
						}

						row7Struct row7_HashRow = new row7Struct();

						row7_HashRow.anno = row7.anno;

						row7_HashRow.semestre = row7.semestre;

						row7_HashRow.anno_semestre = row7.anno_semestre;

						row7_HashRow.codigo_facultad = row7.codigo_facultad;

						row7_HashRow.facultad = row7.facultad;

						row7_HashRow.codigo_proyecto_snies = row7.codigo_proyecto_snies;

						row7_HashRow.proyecto_snies = row7.proyecto_snies;

						row7_HashRow.codigo_proyecto = row7.codigo_proyecto;

						row7_HashRow.proyecto = row7.proyecto;

						row7_HashRow.retiros = row7.retiros;

						tHash_Lookup_row7.put(row7_HashRow);

						tos_count_tAdvancedHash_row7++;

						/**
						 * [tAdvancedHash_row7 main ] stop
						 */

						/**
						 * [tAdvancedHash_row7 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_row7";

						/**
						 * [tAdvancedHash_row7 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row7 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_row7";

						/**
						 * [tAdvancedHash_row7 process_data_end ] stop
						 */

						/**
						 * [tPostgresqlInput_7 process_data_end ] start
						 */

						currentComponent = "tPostgresqlInput_7";

						/**
						 * [tPostgresqlInput_7 process_data_end ] stop
						 */

						/**
						 * [tPostgresqlInput_7 end ] start
						 */

						currentComponent = "tPostgresqlInput_7";

					}
				} finally {
					if (rs_tPostgresqlInput_7 != null) {
						rs_tPostgresqlInput_7.close();
					}
					if (stmt_tPostgresqlInput_7 != null) {
						stmt_tPostgresqlInput_7.close();
					}
					if (conn_tPostgresqlInput_7 != null
							&& !conn_tPostgresqlInput_7.isClosed()) {

						conn_tPostgresqlInput_7.commit();

						conn_tPostgresqlInput_7.close();

					}

				}
				globalMap.put("tPostgresqlInput_7_NB_LINE",
						nb_line_tPostgresqlInput_7);

				ok_Hash.put("tPostgresqlInput_7", true);
				end_Hash.put("tPostgresqlInput_7", System.currentTimeMillis());

				/**
				 * [tPostgresqlInput_7 end ] stop
				 */

				/**
				 * [tAdvancedHash_row7 end ] start
				 */

				currentComponent = "tAdvancedHash_row7";

				tHash_Lookup_row7.endPut();

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row7" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tAdvancedHash_row7", true);
				end_Hash.put("tAdvancedHash_row7", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row7 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tPostgresqlInput_7 finally ] start
				 */

				currentComponent = "tPostgresqlInput_7";

				/**
				 * [tPostgresqlInput_7 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row7 finally ] start
				 */

				currentComponent = "tAdvancedHash_row7";

				/**
				 * [tAdvancedHash_row7 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostgresqlInput_7_SUBPROCESS_STATE", 1);
	}

	public static class row8Struct implements
			routines.system.IPersistableComparableLookupRow<row8Struct> {
		final static byte[] commonByteArrayLock_DMINDICADORES_cuadro_maestro_estudiantes = new byte[0];
		static byte[] commonByteArray_DMINDICADORES_cuadro_maestro_estudiantes = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer anno;

		public Integer getAnno() {
			return this.anno;
		}

		public Integer semestre;

		public Integer getSemestre() {
			return this.semestre;
		}

		public String anno_semestre;

		public String getAnno_semestre() {
			return this.anno_semestre;
		}

		public Integer codigo_facultad;

		public Integer getCodigo_facultad() {
			return this.codigo_facultad;
		}

		public String facultad;

		public String getFacultad() {
			return this.facultad;
		}

		public Integer codigo_proyecto_snies;

		public Integer getCodigo_proyecto_snies() {
			return this.codigo_proyecto_snies;
		}

		public String proyecto_snies;

		public String getProyecto_snies() {
			return this.proyecto_snies;
		}

		public Integer codigo_proyecto;

		public Integer getCodigo_proyecto() {
			return this.codigo_proyecto;
		}

		public String proyecto;

		public String getProyecto() {
			return this.proyecto;
		}

		public Integer graduados;

		public Integer getGraduados() {
			return this.graduados;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.anno == null) ? 0 : this.anno.hashCode());

				result = prime
						* result
						+ ((this.semestre == null) ? 0 : this.semestre
								.hashCode());

				result = prime
						* result
						+ ((this.codigo_facultad == null) ? 0
								: this.codigo_facultad.hashCode());

				result = prime
						* result
						+ ((this.codigo_proyecto == null) ? 0
								: this.codigo_proyecto.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row8Struct other = (row8Struct) obj;

			if (this.anno == null) {
				if (other.anno != null)
					return false;

			} else if (!this.anno.equals(other.anno))

				return false;

			if (this.semestre == null) {
				if (other.semestre != null)
					return false;

			} else if (!this.semestre.equals(other.semestre))

				return false;

			if (this.codigo_facultad == null) {
				if (other.codigo_facultad != null)
					return false;

			} else if (!this.codigo_facultad.equals(other.codigo_facultad))

				return false;

			if (this.codigo_proyecto == null) {
				if (other.codigo_proyecto != null)
					return false;

			} else if (!this.codigo_proyecto.equals(other.codigo_proyecto))

				return false;

			return true;
		}

		public void copyDataTo(row8Struct other) {

			other.anno = this.anno;
			other.semestre = this.semestre;
			other.anno_semestre = this.anno_semestre;
			other.codigo_facultad = this.codigo_facultad;
			other.facultad = this.facultad;
			other.codigo_proyecto_snies = this.codigo_proyecto_snies;
			other.proyecto_snies = this.proyecto_snies;
			other.codigo_proyecto = this.codigo_proyecto;
			other.proyecto = this.proyecto;
			other.graduados = this.graduados;

		}

		public void copyKeysDataTo(row8Struct other) {

			other.anno = this.anno;
			other.semestre = this.semestre;
			other.codigo_facultad = this.codigo_facultad;
			other.codigo_proyecto = this.codigo_proyecto;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DMINDICADORES_cuadro_maestro_estudiantes) {

				try {

					int length = 0;

					this.anno = readInteger(dis);

					this.semestre = readInteger(dis);

					this.codigo_facultad = readInteger(dis);

					this.codigo_proyecto = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.anno, dos);

				// Integer

				writeInteger(this.semestre, dos);

				// Integer

				writeInteger(this.codigo_facultad, dos);

				// Integer

				writeInteger(this.codigo_proyecto, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.anno_semestre = readString(dis, ois);

				this.facultad = readString(dis, ois);

				this.codigo_proyecto_snies = readInteger(dis, ois);

				this.proyecto_snies = readString(dis, ois);

				this.proyecto = readString(dis, ois);

				this.graduados = readInteger(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.anno_semestre, dos, oos);

				writeString(this.facultad, dos, oos);

				writeInteger(this.codigo_proyecto_snies, dos, oos);

				writeString(this.proyecto_snies, dos, oos);

				writeString(this.proyecto, dos, oos);

				writeInteger(this.graduados, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("anno=" + String.valueOf(anno));
			sb.append(",semestre=" + String.valueOf(semestre));
			sb.append(",anno_semestre=" + anno_semestre);
			sb.append(",codigo_facultad=" + String.valueOf(codigo_facultad));
			sb.append(",facultad=" + facultad);
			sb.append(",codigo_proyecto_snies="
					+ String.valueOf(codigo_proyecto_snies));
			sb.append(",proyecto_snies=" + proyecto_snies);
			sb.append(",codigo_proyecto=" + String.valueOf(codigo_proyecto));
			sb.append(",proyecto=" + proyecto);
			sb.append(",graduados=" + String.valueOf(graduados));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row8Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.anno, other.anno);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.semestre, other.semestre);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.codigo_facultad,
					other.codigo_facultad);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.codigo_proyecto,
					other.codigo_proyecto);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tPostgresqlInput_8Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlInput_8_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row8Struct row8 = new row8Struct();

				/**
				 * [tAdvancedHash_row8 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row8", false);
				start_Hash
						.put("tAdvancedHash_row8", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row8";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row8" + iterateId, 0, 0);

					}
				}

				int tos_count_tAdvancedHash_row8 = 0;

				// connection name:row8
				// source node:tPostgresqlInput_8 -
				// inputs:(after_tPostgresqlInput_9) outputs:(row8,row8) |
				// target node:tAdvancedHash_row8 - inputs:(row8) outputs:()
				// linked node: tMap_1 -
				// inputs:(row9,row3,row2,row1,row4,row5,row6,row7,row8,row10)
				// outputs:(cuadro_maestro)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row8 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct> tHash_Lookup_row8 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row8Struct> getLookup(matchingModeEnum_row8);

				globalMap.put("tHash_Lookup_row8", tHash_Lookup_row8);

				/**
				 * [tAdvancedHash_row8 begin ] stop
				 */

				/**
				 * [tPostgresqlInput_8 begin ] start
				 */

				ok_Hash.put("tPostgresqlInput_8", false);
				start_Hash
						.put("tPostgresqlInput_8", System.currentTimeMillis());

				currentComponent = "tPostgresqlInput_8";

				int tos_count_tPostgresqlInput_8 = 0;

				int nb_line_tPostgresqlInput_8 = 0;
				java.sql.Connection conn_tPostgresqlInput_8 = null;
				String driverClass_tPostgresqlInput_8 = "org.postgresql.Driver";
				java.lang.Class.forName(driverClass_tPostgresqlInput_8);
				String dbUser_tPostgresqlInput_8 = "postgres";

				final String decryptedPassword_tPostgresqlInput_8 = routines.system.PasswordEncryptUtil
						.decryptPassword("610243e4ca33e325f4f7aba1746784ea");

				String dbPwd_tPostgresqlInput_8 = decryptedPassword_tPostgresqlInput_8;

				String url_tPostgresqlInput_8 = "jdbc:postgresql://"
						+ "10.20.0.88" + ":" + "5432" + "/" + "DMINDICADORES";

				conn_tPostgresqlInput_8 = java.sql.DriverManager.getConnection(
						url_tPostgresqlInput_8, dbUser_tPostgresqlInput_8,
						dbPwd_tPostgresqlInput_8);

				conn_tPostgresqlInput_8.setAutoCommit(false);

				java.sql.Statement stmt_tPostgresqlInput_8 = conn_tPostgresqlInput_8
						.createStatement();

				String dbquery_tPostgresqlInput_8 = "SELECT anno,semestre, anno||'-'||semestre anno_semestre,\n       codigo_facultad,codigo_facultad||'-'||facultad facultad"
						+ ", codigo_proyecto_snies, codigo_proyecto_snies||'-'||proyecto_snies proyecto_snies, codigo_proyecto,codigo_proyecto||'-'"
						+ "||proyecto proyecto,\n       count(documento) graduados\n  FROM graduados_basico\n  GROUP BY anno,semestre, codigo_facultad"
						+ ", facultad, codigo_proyecto_snies, proyecto_snies,codigo_proyecto,proyecto \n  ORDER BY anno,semestre, codigo_facultad, c"
						+ "odigo_proyecto_snies";

				globalMap.put("tPostgresqlInput_8_QUERY",
						dbquery_tPostgresqlInput_8);
				java.sql.ResultSet rs_tPostgresqlInput_8 = null;

				try {
					rs_tPostgresqlInput_8 = stmt_tPostgresqlInput_8
							.executeQuery(dbquery_tPostgresqlInput_8);
					java.sql.ResultSetMetaData rsmd_tPostgresqlInput_8 = rs_tPostgresqlInput_8
							.getMetaData();
					int colQtyInRs_tPostgresqlInput_8 = rsmd_tPostgresqlInput_8
							.getColumnCount();

					String tmpContent_tPostgresqlInput_8 = null;

					while (rs_tPostgresqlInput_8.next()) {
						nb_line_tPostgresqlInput_8++;

						if (colQtyInRs_tPostgresqlInput_8 < 1) {
							row8.anno = null;
						} else {

							if (rs_tPostgresqlInput_8.getObject(1) != null) {
								row8.anno = rs_tPostgresqlInput_8.getInt(1);
							} else {
								row8.anno = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_8 < 2) {
							row8.semestre = null;
						} else {

							if (rs_tPostgresqlInput_8.getObject(2) != null) {
								row8.semestre = rs_tPostgresqlInput_8.getInt(2);
							} else {
								row8.semestre = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_8 < 3) {
							row8.anno_semestre = null;
						} else {

							row8.anno_semestre = routines.system.JDBCUtil
									.getString(rs_tPostgresqlInput_8, 3, false);
						}
						if (colQtyInRs_tPostgresqlInput_8 < 4) {
							row8.codigo_facultad = null;
						} else {

							if (rs_tPostgresqlInput_8.getObject(4) != null) {
								row8.codigo_facultad = rs_tPostgresqlInput_8
										.getInt(4);
							} else {
								row8.codigo_facultad = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_8 < 5) {
							row8.facultad = null;
						} else {

							row8.facultad = routines.system.JDBCUtil.getString(
									rs_tPostgresqlInput_8, 5, false);
						}
						if (colQtyInRs_tPostgresqlInput_8 < 6) {
							row8.codigo_proyecto_snies = null;
						} else {

							if (rs_tPostgresqlInput_8.getObject(6) != null) {
								row8.codigo_proyecto_snies = rs_tPostgresqlInput_8
										.getInt(6);
							} else {
								row8.codigo_proyecto_snies = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_8 < 7) {
							row8.proyecto_snies = null;
						} else {

							row8.proyecto_snies = routines.system.JDBCUtil
									.getString(rs_tPostgresqlInput_8, 7, false);
						}
						if (colQtyInRs_tPostgresqlInput_8 < 8) {
							row8.codigo_proyecto = null;
						} else {

							if (rs_tPostgresqlInput_8.getObject(8) != null) {
								row8.codigo_proyecto = rs_tPostgresqlInput_8
										.getInt(8);
							} else {
								row8.codigo_proyecto = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_8 < 9) {
							row8.proyecto = null;
						} else {

							row8.proyecto = routines.system.JDBCUtil.getString(
									rs_tPostgresqlInput_8, 9, false);
						}
						if (colQtyInRs_tPostgresqlInput_8 < 10) {
							row8.graduados = null;
						} else {

							if (rs_tPostgresqlInput_8.getObject(10) != null) {
								row8.graduados = rs_tPostgresqlInput_8
										.getInt(10);
							} else {
								row8.graduados = null;
							}
						}

						/**
						 * [tPostgresqlInput_8 begin ] stop
						 */

						/**
						 * [tPostgresqlInput_8 main ] start
						 */

						currentComponent = "tPostgresqlInput_8";

						tos_count_tPostgresqlInput_8++;

						/**
						 * [tPostgresqlInput_8 main ] stop
						 */

						/**
						 * [tPostgresqlInput_8 process_data_begin ] start
						 */

						currentComponent = "tPostgresqlInput_8";

						/**
						 * [tPostgresqlInput_8 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row8 main ] start
						 */

						currentComponent = "tAdvancedHash_row8";

						// row8
						// row8

						if (execStat) {
							runStat.updateStatOnConnection("row8" + iterateId,
									1, 1);
						}

						row8Struct row8_HashRow = new row8Struct();

						row8_HashRow.anno = row8.anno;

						row8_HashRow.semestre = row8.semestre;

						row8_HashRow.anno_semestre = row8.anno_semestre;

						row8_HashRow.codigo_facultad = row8.codigo_facultad;

						row8_HashRow.facultad = row8.facultad;

						row8_HashRow.codigo_proyecto_snies = row8.codigo_proyecto_snies;

						row8_HashRow.proyecto_snies = row8.proyecto_snies;

						row8_HashRow.codigo_proyecto = row8.codigo_proyecto;

						row8_HashRow.proyecto = row8.proyecto;

						row8_HashRow.graduados = row8.graduados;

						tHash_Lookup_row8.put(row8_HashRow);

						tos_count_tAdvancedHash_row8++;

						/**
						 * [tAdvancedHash_row8 main ] stop
						 */

						/**
						 * [tAdvancedHash_row8 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_row8";

						/**
						 * [tAdvancedHash_row8 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row8 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_row8";

						/**
						 * [tAdvancedHash_row8 process_data_end ] stop
						 */

						/**
						 * [tPostgresqlInput_8 process_data_end ] start
						 */

						currentComponent = "tPostgresqlInput_8";

						/**
						 * [tPostgresqlInput_8 process_data_end ] stop
						 */

						/**
						 * [tPostgresqlInput_8 end ] start
						 */

						currentComponent = "tPostgresqlInput_8";

					}
				} finally {
					if (rs_tPostgresqlInput_8 != null) {
						rs_tPostgresqlInput_8.close();
					}
					if (stmt_tPostgresqlInput_8 != null) {
						stmt_tPostgresqlInput_8.close();
					}
					if (conn_tPostgresqlInput_8 != null
							&& !conn_tPostgresqlInput_8.isClosed()) {

						conn_tPostgresqlInput_8.commit();

						conn_tPostgresqlInput_8.close();

					}

				}
				globalMap.put("tPostgresqlInput_8_NB_LINE",
						nb_line_tPostgresqlInput_8);

				ok_Hash.put("tPostgresqlInput_8", true);
				end_Hash.put("tPostgresqlInput_8", System.currentTimeMillis());

				/**
				 * [tPostgresqlInput_8 end ] stop
				 */

				/**
				 * [tAdvancedHash_row8 end ] start
				 */

				currentComponent = "tAdvancedHash_row8";

				tHash_Lookup_row8.endPut();

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row8" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tAdvancedHash_row8", true);
				end_Hash.put("tAdvancedHash_row8", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row8 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tPostgresqlInput_8 finally ] start
				 */

				currentComponent = "tPostgresqlInput_8";

				/**
				 * [tPostgresqlInput_8 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row8 finally ] start
				 */

				currentComponent = "tAdvancedHash_row8";

				/**
				 * [tAdvancedHash_row8 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostgresqlInput_8_SUBPROCESS_STATE", 1);
	}

	public static class row10Struct implements
			routines.system.IPersistableComparableLookupRow<row10Struct> {
		final static byte[] commonByteArrayLock_DMINDICADORES_cuadro_maestro_estudiantes = new byte[0];
		static byte[] commonByteArray_DMINDICADORES_cuadro_maestro_estudiantes = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String periodo;

		public String getPeriodo() {
			return this.periodo;
		}

		public String proyecto;

		public String getProyecto() {
			return this.proyecto;
		}

		public Integer no_graduados;

		public Integer getNo_graduados() {
			return this.no_graduados;
		}

		public Integer desertores;

		public Integer getDesertores() {
			return this.desertores;
		}

		public Double desercion;

		public Double getDesercion() {
			return this.desercion;
		}

		public Double retencion;

		public Double getRetencion() {
			return this.retencion;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.periodo == null) ? 0 : this.periodo.hashCode());

				result = prime
						* result
						+ ((this.proyecto == null) ? 0 : this.proyecto
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row10Struct other = (row10Struct) obj;

			if (this.periodo == null) {
				if (other.periodo != null)
					return false;

			} else if (!this.periodo.equals(other.periodo))

				return false;

			if (this.proyecto == null) {
				if (other.proyecto != null)
					return false;

			} else if (!this.proyecto.equals(other.proyecto))

				return false;

			return true;
		}

		public void copyDataTo(row10Struct other) {

			other.periodo = this.periodo;
			other.proyecto = this.proyecto;
			other.no_graduados = this.no_graduados;
			other.desertores = this.desertores;
			other.desercion = this.desercion;
			other.retencion = this.retencion;

		}

		public void copyKeysDataTo(row10Struct other) {

			other.periodo = this.periodo;
			other.proyecto = this.proyecto;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DMINDICADORES_cuadro_maestro_estudiantes.length) {
					if (length < 1024
							&& commonByteArray_DMINDICADORES_cuadro_maestro_estudiantes.length == 0) {
						commonByteArray_DMINDICADORES_cuadro_maestro_estudiantes = new byte[1024];
					} else {
						commonByteArray_DMINDICADORES_cuadro_maestro_estudiantes = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_DMINDICADORES_cuadro_maestro_estudiantes,
						0, length);
				strReturn = new String(
						commonByteArray_DMINDICADORES_cuadro_maestro_estudiantes,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DMINDICADORES_cuadro_maestro_estudiantes) {

				try {

					int length = 0;

					this.periodo = readString(dis);

					this.proyecto = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.periodo, dos);

				// String

				writeString(this.proyecto, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.no_graduados = readInteger(dis, ois);

				this.desertores = readInteger(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.desercion = null;
				} else {
					this.desercion = dis.readDouble();
				}

				length = dis.readByte();
				if (length == -1) {
					this.retencion = null;
				} else {
					this.retencion = dis.readDouble();
				}

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeInteger(this.no_graduados, dos, oos);

				writeInteger(this.desertores, dos, oos);

				if (this.desercion == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.desercion);
				}

				if (this.retencion == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.retencion);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("periodo=" + periodo);
			sb.append(",proyecto=" + proyecto);
			sb.append(",no_graduados=" + String.valueOf(no_graduados));
			sb.append(",desertores=" + String.valueOf(desertores));
			sb.append(",desercion=" + String.valueOf(desercion));
			sb.append(",retencion=" + String.valueOf(retencion));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row10Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.periodo, other.periodo);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.proyecto, other.proyecto);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tPostgresqlInput_10Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlInput_10_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row10Struct row10 = new row10Struct();

				/**
				 * [tAdvancedHash_row10 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row10", false);
				start_Hash.put("tAdvancedHash_row10",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row10";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row10" + iterateId, 0,
								0);

					}
				}

				int tos_count_tAdvancedHash_row10 = 0;

				// connection name:row10
				// source node:tPostgresqlInput_10 -
				// inputs:(after_tPostgresqlInput_9) outputs:(row10,row10) |
				// target node:tAdvancedHash_row10 - inputs:(row10) outputs:()
				// linked node: tMap_1 -
				// inputs:(row9,row3,row2,row1,row4,row5,row6,row7,row8,row10)
				// outputs:(cuadro_maestro)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row10 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row10Struct> tHash_Lookup_row10 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row10Struct> getLookup(matchingModeEnum_row10);

				globalMap.put("tHash_Lookup_row10", tHash_Lookup_row10);

				/**
				 * [tAdvancedHash_row10 begin ] stop
				 */

				/**
				 * [tPostgresqlInput_10 begin ] start
				 */

				ok_Hash.put("tPostgresqlInput_10", false);
				start_Hash.put("tPostgresqlInput_10",
						System.currentTimeMillis());

				currentComponent = "tPostgresqlInput_10";

				int tos_count_tPostgresqlInput_10 = 0;

				int nb_line_tPostgresqlInput_10 = 0;
				java.sql.Connection conn_tPostgresqlInput_10 = null;
				String driverClass_tPostgresqlInput_10 = "org.postgresql.Driver";
				java.lang.Class.forName(driverClass_tPostgresqlInput_10);
				String dbUser_tPostgresqlInput_10 = "postgres";

				final String decryptedPassword_tPostgresqlInput_10 = routines.system.PasswordEncryptUtil
						.decryptPassword("610243e4ca33e325f4f7aba1746784ea");

				String dbPwd_tPostgresqlInput_10 = decryptedPassword_tPostgresqlInput_10;

				String url_tPostgresqlInput_10 = "jdbc:postgresql://"
						+ "10.20.0.88" + ":" + "5432" + "/" + "DMINDICADORES";

				conn_tPostgresqlInput_10 = java.sql.DriverManager
						.getConnection(url_tPostgresqlInput_10,
								dbUser_tPostgresqlInput_10,
								dbPwd_tPostgresqlInput_10);

				conn_tPostgresqlInput_10.setAutoCommit(false);

				java.sql.Statement stmt_tPostgresqlInput_10 = conn_tPostgresqlInput_10
						.createStatement();

				String dbquery_tPostgresqlInput_10 = "SELECT periodo, proyecto, no_graduados, desertores, desercion, retencion\n  FROM spadies_desercion_proyectos";

				globalMap.put("tPostgresqlInput_10_QUERY",
						dbquery_tPostgresqlInput_10);
				java.sql.ResultSet rs_tPostgresqlInput_10 = null;

				try {
					rs_tPostgresqlInput_10 = stmt_tPostgresqlInput_10
							.executeQuery(dbquery_tPostgresqlInput_10);
					java.sql.ResultSetMetaData rsmd_tPostgresqlInput_10 = rs_tPostgresqlInput_10
							.getMetaData();
					int colQtyInRs_tPostgresqlInput_10 = rsmd_tPostgresqlInput_10
							.getColumnCount();

					String tmpContent_tPostgresqlInput_10 = null;

					while (rs_tPostgresqlInput_10.next()) {
						nb_line_tPostgresqlInput_10++;

						if (colQtyInRs_tPostgresqlInput_10 < 1) {
							row10.periodo = null;
						} else {

							row10.periodo = routines.system.JDBCUtil.getString(
									rs_tPostgresqlInput_10, 1, false);
						}
						if (colQtyInRs_tPostgresqlInput_10 < 2) {
							row10.proyecto = null;
						} else {

							row10.proyecto = routines.system.JDBCUtil
									.getString(rs_tPostgresqlInput_10, 2, false);
						}
						if (colQtyInRs_tPostgresqlInput_10 < 3) {
							row10.no_graduados = null;
						} else {

							if (rs_tPostgresqlInput_10.getObject(3) != null) {
								row10.no_graduados = rs_tPostgresqlInput_10
										.getInt(3);
							} else {
								row10.no_graduados = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_10 < 4) {
							row10.desertores = null;
						} else {

							if (rs_tPostgresqlInput_10.getObject(4) != null) {
								row10.desertores = rs_tPostgresqlInput_10
										.getInt(4);
							} else {
								row10.desertores = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_10 < 5) {
							row10.desercion = null;
						} else {

							if (rs_tPostgresqlInput_10.getObject(5) != null) {
								row10.desercion = rs_tPostgresqlInput_10
										.getDouble(5);
							} else {
								row10.desercion = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_10 < 6) {
							row10.retencion = null;
						} else {

							if (rs_tPostgresqlInput_10.getObject(6) != null) {
								row10.retencion = rs_tPostgresqlInput_10
										.getDouble(6);
							} else {
								row10.retencion = null;
							}
						}

						/**
						 * [tPostgresqlInput_10 begin ] stop
						 */

						/**
						 * [tPostgresqlInput_10 main ] start
						 */

						currentComponent = "tPostgresqlInput_10";

						tos_count_tPostgresqlInput_10++;

						/**
						 * [tPostgresqlInput_10 main ] stop
						 */

						/**
						 * [tPostgresqlInput_10 process_data_begin ] start
						 */

						currentComponent = "tPostgresqlInput_10";

						/**
						 * [tPostgresqlInput_10 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row10 main ] start
						 */

						currentComponent = "tAdvancedHash_row10";

						// row10
						// row10

						if (execStat) {
							runStat.updateStatOnConnection("row10" + iterateId,
									1, 1);
						}

						row10Struct row10_HashRow = new row10Struct();

						row10_HashRow.periodo = row10.periodo;

						row10_HashRow.proyecto = row10.proyecto;

						row10_HashRow.no_graduados = row10.no_graduados;

						row10_HashRow.desertores = row10.desertores;

						row10_HashRow.desercion = row10.desercion;

						row10_HashRow.retencion = row10.retencion;

						tHash_Lookup_row10.put(row10_HashRow);

						tos_count_tAdvancedHash_row10++;

						/**
						 * [tAdvancedHash_row10 main ] stop
						 */

						/**
						 * [tAdvancedHash_row10 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_row10";

						/**
						 * [tAdvancedHash_row10 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row10 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_row10";

						/**
						 * [tAdvancedHash_row10 process_data_end ] stop
						 */

						/**
						 * [tPostgresqlInput_10 process_data_end ] start
						 */

						currentComponent = "tPostgresqlInput_10";

						/**
						 * [tPostgresqlInput_10 process_data_end ] stop
						 */

						/**
						 * [tPostgresqlInput_10 end ] start
						 */

						currentComponent = "tPostgresqlInput_10";

					}
				} finally {
					if (rs_tPostgresqlInput_10 != null) {
						rs_tPostgresqlInput_10.close();
					}
					if (stmt_tPostgresqlInput_10 != null) {
						stmt_tPostgresqlInput_10.close();
					}
					if (conn_tPostgresqlInput_10 != null
							&& !conn_tPostgresqlInput_10.isClosed()) {

						conn_tPostgresqlInput_10.commit();

						conn_tPostgresqlInput_10.close();

					}

				}
				globalMap.put("tPostgresqlInput_10_NB_LINE",
						nb_line_tPostgresqlInput_10);

				ok_Hash.put("tPostgresqlInput_10", true);
				end_Hash.put("tPostgresqlInput_10", System.currentTimeMillis());

				/**
				 * [tPostgresqlInput_10 end ] stop
				 */

				/**
				 * [tAdvancedHash_row10 end ] start
				 */

				currentComponent = "tAdvancedHash_row10";

				tHash_Lookup_row10.endPut();

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row10" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tAdvancedHash_row10", true);
				end_Hash.put("tAdvancedHash_row10", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row10 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tPostgresqlInput_10 finally ] start
				 */

				currentComponent = "tPostgresqlInput_10";

				/**
				 * [tPostgresqlInput_10 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row10 finally ] start
				 */

				currentComponent = "tAdvancedHash_row10";

				/**
				 * [tAdvancedHash_row10 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostgresqlInput_10_SUBPROCESS_STATE", 1);
	}

	public void connectionStatsLogs_CommitProcess(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("connectionStatsLogs_Commit_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [connectionStatsLogs_Commit begin ] start
				 */

				ok_Hash.put("connectionStatsLogs_Commit", false);
				start_Hash.put("connectionStatsLogs_Commit",
						System.currentTimeMillis());

				currentComponent = "connectionStatsLogs_Commit";

				int tos_count_connectionStatsLogs_Commit = 0;

				/**
				 * [connectionStatsLogs_Commit begin ] stop
				 */

				/**
				 * [connectionStatsLogs_Commit main ] start
				 */

				currentComponent = "connectionStatsLogs_Commit";

				java.sql.Connection conn_connectionStatsLogs_Commit = (java.sql.Connection) globalMap
						.get("conn_connectionStatsLogs");
				if (conn_connectionStatsLogs_Commit != null
						&& !conn_connectionStatsLogs_Commit.isClosed()) {

					conn_connectionStatsLogs_Commit.commit();

				}

				tos_count_connectionStatsLogs_Commit++;

				/**
				 * [connectionStatsLogs_Commit main ] stop
				 */

				/**
				 * [connectionStatsLogs_Commit process_data_begin ] start
				 */

				currentComponent = "connectionStatsLogs_Commit";

				/**
				 * [connectionStatsLogs_Commit process_data_begin ] stop
				 */

				/**
				 * [connectionStatsLogs_Commit process_data_end ] start
				 */

				currentComponent = "connectionStatsLogs_Commit";

				/**
				 * [connectionStatsLogs_Commit process_data_end ] stop
				 */

				/**
				 * [connectionStatsLogs_Commit end ] start
				 */

				currentComponent = "connectionStatsLogs_Commit";

				ok_Hash.put("connectionStatsLogs_Commit", true);
				end_Hash.put("connectionStatsLogs_Commit",
						System.currentTimeMillis());

				/**
				 * [connectionStatsLogs_Commit end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [connectionStatsLogs_Commit finally ] start
				 */

				currentComponent = "connectionStatsLogs_Commit";

				/**
				 * [connectionStatsLogs_Commit finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("connectionStatsLogs_Commit_SUBPROCESS_STATE", 1);
	}

	public void connectionStatsLogsProcess(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("connectionStatsLogs_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [connectionStatsLogs begin ] start
				 */

				ok_Hash.put("connectionStatsLogs", false);
				start_Hash.put("connectionStatsLogs",
						System.currentTimeMillis());

				currentComponent = "connectionStatsLogs";

				int tos_count_connectionStatsLogs = 0;

				String url_connectionStatsLogs = "jdbc:postgresql://"
						+ "10.20.0.88" + ":" + "5432" + "/"
						+ "co_udistrital_log";

				String dbUser_connectionStatsLogs = "spagobi";

				final String decryptedPassword_connectionStatsLogs = routines.system.PasswordEncryptUtil
						.decryptPassword("9f576344a61564d0da9981c3c148b27a24da144fced1fd2b");
				String dbPwd_connectionStatsLogs = decryptedPassword_connectionStatsLogs;

				java.sql.Connection conn_connectionStatsLogs = null;

				java.util.Enumeration<java.sql.Driver> drivers_connectionStatsLogs = java.sql.DriverManager
						.getDrivers();
				while (drivers_connectionStatsLogs.hasMoreElements()) {
					java.sql.Driver d_connectionStatsLogs = drivers_connectionStatsLogs
							.nextElement();
					java.util.List<String> driverList_connectionStatsLogs = java.util.Arrays
							.<String> asList("com.amazon.redshift.jdbc.Driver",
									"com.amazon.redshift.jdbc41.Driver");
					if (driverList_connectionStatsLogs
							.contains(d_connectionStatsLogs.getClass()
									.getName())) {
						try {
							java.sql.DriverManager
									.deregisterDriver(d_connectionStatsLogs);
							java.sql.DriverManager
									.registerDriver(d_connectionStatsLogs);
						} catch (java.lang.Exception e_connectionStatsLogs) {
							// do nothing
						}
					}
				}

				String sharedConnectionName_connectionStatsLogs = "StatsAndLog_Shared_Connection";
				conn_connectionStatsLogs = SharedDBConnection.getDBConnection(
						"org.postgresql.Driver", url_connectionStatsLogs,
						dbUser_connectionStatsLogs, dbPwd_connectionStatsLogs,
						sharedConnectionName_connectionStatsLogs);
				if (null != conn_connectionStatsLogs) {

					conn_connectionStatsLogs.setAutoCommit(false);
				}

				globalMap.put("schema_" + "connectionStatsLogs", "public");

				globalMap.put("conn_" + "connectionStatsLogs",
						conn_connectionStatsLogs);

				/**
				 * [connectionStatsLogs begin ] stop
				 */

				/**
				 * [connectionStatsLogs main ] start
				 */

				currentComponent = "connectionStatsLogs";

				tos_count_connectionStatsLogs++;

				/**
				 * [connectionStatsLogs main ] stop
				 */

				/**
				 * [connectionStatsLogs process_data_begin ] start
				 */

				currentComponent = "connectionStatsLogs";

				/**
				 * [connectionStatsLogs process_data_begin ] stop
				 */

				/**
				 * [connectionStatsLogs process_data_end ] start
				 */

				currentComponent = "connectionStatsLogs";

				/**
				 * [connectionStatsLogs process_data_end ] stop
				 */

				/**
				 * [connectionStatsLogs end ] start
				 */

				currentComponent = "connectionStatsLogs";

				ok_Hash.put("connectionStatsLogs", true);
				end_Hash.put("connectionStatsLogs", System.currentTimeMillis());

				/**
				 * [connectionStatsLogs end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [connectionStatsLogs finally ] start
				 */

				currentComponent = "connectionStatsLogs";

				/**
				 * [connectionStatsLogs finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("connectionStatsLogs_SUBPROCESS_STATE", 1);
	}

	public static class row_talendStats_STATSStruct implements
			routines.system.IPersistableRow<row_talendStats_STATSStruct> {
		final static byte[] commonByteArrayLock_DMINDICADORES_cuadro_maestro_estudiantes = new byte[0];
		static byte[] commonByteArray_DMINDICADORES_cuadro_maestro_estudiantes = new byte[0];

		public java.util.Date moment;

		public java.util.Date getMoment() {
			return this.moment;
		}

		public String pid;

		public String getPid() {
			return this.pid;
		}

		public String father_pid;

		public String getFather_pid() {
			return this.father_pid;
		}

		public String root_pid;

		public String getRoot_pid() {
			return this.root_pid;
		}

		public Long system_pid;

		public Long getSystem_pid() {
			return this.system_pid;
		}

		public String project;

		public String getProject() {
			return this.project;
		}

		public String job;

		public String getJob() {
			return this.job;
		}

		public String job_repository_id;

		public String getJob_repository_id() {
			return this.job_repository_id;
		}

		public String job_version;

		public String getJob_version() {
			return this.job_version;
		}

		public String context;

		public String getContext() {
			return this.context;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public String message_type;

		public String getMessage_type() {
			return this.message_type;
		}

		public String message;

		public String getMessage() {
			return this.message;
		}

		public Long duration;

		public Long getDuration() {
			return this.duration;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DMINDICADORES_cuadro_maestro_estudiantes.length) {
					if (length < 1024
							&& commonByteArray_DMINDICADORES_cuadro_maestro_estudiantes.length == 0) {
						commonByteArray_DMINDICADORES_cuadro_maestro_estudiantes = new byte[1024];
					} else {
						commonByteArray_DMINDICADORES_cuadro_maestro_estudiantes = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_DMINDICADORES_cuadro_maestro_estudiantes,
						0, length);
				strReturn = new String(
						commonByteArray_DMINDICADORES_cuadro_maestro_estudiantes,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DMINDICADORES_cuadro_maestro_estudiantes) {

				try {

					int length = 0;

					this.moment = readDate(dis);

					this.pid = readString(dis);

					this.father_pid = readString(dis);

					this.root_pid = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.system_pid = null;
					} else {
						this.system_pid = dis.readLong();
					}

					this.project = readString(dis);

					this.job = readString(dis);

					this.job_repository_id = readString(dis);

					this.job_version = readString(dis);

					this.context = readString(dis);

					this.origin = readString(dis);

					this.message_type = readString(dis);

					this.message = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.duration = null;
					} else {
						this.duration = dis.readLong();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.moment, dos);

				// String

				writeString(this.pid, dos);

				// String

				writeString(this.father_pid, dos);

				// String

				writeString(this.root_pid, dos);

				// Long

				if (this.system_pid == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.system_pid);
				}

				// String

				writeString(this.project, dos);

				// String

				writeString(this.job, dos);

				// String

				writeString(this.job_repository_id, dos);

				// String

				writeString(this.job_version, dos);

				// String

				writeString(this.context, dos);

				// String

				writeString(this.origin, dos);

				// String

				writeString(this.message_type, dos);

				// String

				writeString(this.message, dos);

				// Long

				if (this.duration == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.duration);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("moment=" + String.valueOf(moment));
			sb.append(",pid=" + pid);
			sb.append(",father_pid=" + father_pid);
			sb.append(",root_pid=" + root_pid);
			sb.append(",system_pid=" + String.valueOf(system_pid));
			sb.append(",project=" + project);
			sb.append(",job=" + job);
			sb.append(",job_repository_id=" + job_repository_id);
			sb.append(",job_version=" + job_version);
			sb.append(",context=" + context);
			sb.append(",origin=" + origin);
			sb.append(",message_type=" + message_type);
			sb.append(",message=" + message);
			sb.append(",duration=" + String.valueOf(duration));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_talendStats_STATSStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void talendStats_STATSProcess(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("talendStats_STATS_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row_talendStats_STATSStruct row_talendStats_STATS = new row_talendStats_STATSStruct();

				/**
				 * [talendStats_DB begin ] start
				 */

				ok_Hash.put("talendStats_DB", false);
				start_Hash.put("talendStats_DB", System.currentTimeMillis());

				currentVirtualComponent = "talendStats_DB";

				currentComponent = "talendStats_DB";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("Main" + iterateId, 0, 0);

					}
				}

				int tos_count_talendStats_DB = 0;

				String dbschema_talendStats_DB = null;
				dbschema_talendStats_DB = (String) globalMap.get("schema_"
						+ "connectionStatsLogs");

				String tableName_talendStats_DB = null;
				if (dbschema_talendStats_DB == null
						|| dbschema_talendStats_DB.trim().length() == 0) {
					tableName_talendStats_DB = "statcatcher";
				} else {
					tableName_talendStats_DB = dbschema_talendStats_DB
							+ "\".\"" + "statcatcher";
				}

				int nb_line_talendStats_DB = 0;
				int nb_line_update_talendStats_DB = 0;
				int nb_line_inserted_talendStats_DB = 0;
				int nb_line_deleted_talendStats_DB = 0;
				int nb_line_rejected_talendStats_DB = 0;

				int deletedCount_talendStats_DB = 0;
				int updatedCount_talendStats_DB = 0;
				int insertedCount_talendStats_DB = 0;
				int rejectedCount_talendStats_DB = 0;

				boolean whetherReject_talendStats_DB = false;

				java.sql.Connection conn_talendStats_DB = null;
				String dbUser_talendStats_DB = null;

				conn_talendStats_DB = (java.sql.Connection) globalMap
						.get("conn_connectionStatsLogs");

				int batchSize_talendStats_DB = 10000;
				int batchSizeCounter_talendStats_DB = 0;

				int count_talendStats_DB = 0;

				// [%connection%][checktable][tableName]
				String keyCheckTable_talendStats_DB = conn_talendStats_DB
						+ "[checktable]" + "[" + "statcatcher" + "]";

				if (GlobalResource.resourceMap
						.get(keyCheckTable_talendStats_DB) == null) {// }

					synchronized (GlobalResource.resourceLockMap
							.get(keyCheckTable_talendStats_DB)) {// }
						if (GlobalResource.resourceMap
								.get(keyCheckTable_talendStats_DB) == null) {// }
							java.sql.DatabaseMetaData dbMetaData_talendStats_DB = conn_talendStats_DB
									.getMetaData();
							boolean whetherExist_talendStats_DB = false;
							try (java.sql.ResultSet rsTable_talendStats_DB = dbMetaData_talendStats_DB
									.getTables(null, null, null,
											new String[] { "TABLE" })) {
								String defaultSchema_talendStats_DB = "public";
								if (dbschema_talendStats_DB == null
										|| dbschema_talendStats_DB.trim()
												.length() == 0) {
									try (java.sql.Statement stmtSchema_talendStats_DB = conn_talendStats_DB
											.createStatement();
											java.sql.ResultSet rsSchema_talendStats_DB = stmtSchema_talendStats_DB
													.executeQuery("select current_schema() ")) {
										while (rsSchema_talendStats_DB.next()) {
											defaultSchema_talendStats_DB = rsSchema_talendStats_DB
													.getString("current_schema");
										}
									}
								}
								while (rsTable_talendStats_DB.next()) {
									String table_talendStats_DB = rsTable_talendStats_DB
											.getString("TABLE_NAME");
									String schema_talendStats_DB = rsTable_talendStats_DB
											.getString("TABLE_SCHEM");
									if (table_talendStats_DB
											.equals("statcatcher")
											&& (schema_talendStats_DB
													.equals(dbschema_talendStats_DB) || ((dbschema_talendStats_DB == null || dbschema_talendStats_DB
													.trim().length() == 0) && defaultSchema_talendStats_DB
													.equals(schema_talendStats_DB)))) {
										whetherExist_talendStats_DB = true;
										break;
									}
								}
							}
							if (!whetherExist_talendStats_DB) {
								try (java.sql.Statement stmtCreate_talendStats_DB = conn_talendStats_DB
										.createStatement()) {
									stmtCreate_talendStats_DB
											.execute("CREATE TABLE \""
													+ tableName_talendStats_DB
													+ "\"(\"moment\" TIMESTAMP(0)  ,\"pid\" VARCHAR(20)  ,\"father_pid\" VARCHAR(20)  ,\"root_pid\" VARCHAR(20)  ,\"system_pid\" INT8 ,\"project\" VARCHAR(50)  ,\"job\" VARCHAR(255)  ,\"job_repository_id\" VARCHAR(255)  ,\"job_version\" VARCHAR(255)  ,\"context\" VARCHAR(50)  ,\"origin\" VARCHAR(255)  ,\"message_type\" VARCHAR(255)  ,\"message\" VARCHAR(255)  ,\"duration\" INT8 )");
								}
							}
							GlobalResource.resourceMap.put(
									keyCheckTable_talendStats_DB, true);
							// {{{
						} // end of if
					} // end synchronized
				}
				String insert_talendStats_DB = "INSERT INTO \""
						+ tableName_talendStats_DB
						+ "\" (\"moment\",\"pid\",\"father_pid\",\"root_pid\",\"system_pid\",\"project\",\"job\",\"job_repository_id\",\"job_version\",\"context\",\"origin\",\"message_type\",\"message\",\"duration\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_talendStats_DB = null;
				String keyPsmt_talendStats_DB = conn_talendStats_DB + "[psmt]"
						+ "[" + "statcatcher" + "]";
				pstmt_talendStats_DB = SharedDBPreparedStatement
						.getSharedPreparedStatement(conn_talendStats_DB,
								insert_talendStats_DB, keyPsmt_talendStats_DB);
				resourceMap.put("pstmt_talendStats_DB", pstmt_talendStats_DB);

				/**
				 * [talendStats_DB begin ] stop
				 */

				/**
				 * [talendStats_STATS begin ] start
				 */

				ok_Hash.put("talendStats_STATS", false);
				start_Hash.put("talendStats_STATS", System.currentTimeMillis());

				currentVirtualComponent = "talendStats_STATS";

				currentComponent = "talendStats_STATS";

				int tos_count_talendStats_STATS = 0;

				for (StatCatcherUtils.StatCatcherMessage scm : talendStats_STATS
						.getMessages()) {
					row_talendStats_STATS.pid = pid;
					row_talendStats_STATS.root_pid = rootPid;
					row_talendStats_STATS.father_pid = fatherPid;
					row_talendStats_STATS.project = projectName;
					row_talendStats_STATS.job = jobName;
					row_talendStats_STATS.context = contextStr;
					row_talendStats_STATS.origin = (scm.getOrigin() == null
							|| scm.getOrigin().length() < 1 ? null : scm
							.getOrigin());
					row_talendStats_STATS.message = scm.getMessage();
					row_talendStats_STATS.duration = scm.getDuration();
					row_talendStats_STATS.moment = scm.getMoment();
					row_talendStats_STATS.message_type = scm.getMessageType();
					row_talendStats_STATS.job_version = scm.getJobVersion();
					row_talendStats_STATS.job_repository_id = scm.getJobId();
					row_talendStats_STATS.system_pid = scm.getSystemPid();

					/**
					 * [talendStats_STATS begin ] stop
					 */

					/**
					 * [talendStats_STATS main ] start
					 */

					currentVirtualComponent = "talendStats_STATS";

					currentComponent = "talendStats_STATS";

					tos_count_talendStats_STATS++;

					/**
					 * [talendStats_STATS main ] stop
					 */

					/**
					 * [talendStats_STATS process_data_begin ] start
					 */

					currentVirtualComponent = "talendStats_STATS";

					currentComponent = "talendStats_STATS";

					/**
					 * [talendStats_STATS process_data_begin ] stop
					 */

					/**
					 * [talendStats_DB main ] start
					 */

					currentVirtualComponent = "talendStats_DB";

					currentComponent = "talendStats_DB";

					// Main
					// row_talendStats_STATS

					if (execStat) {
						runStat.updateStatOnConnection("Main" + iterateId, 1, 1);
					}

					whetherReject_talendStats_DB = false;
					if (row_talendStats_STATS.moment != null) {
						pstmt_talendStats_DB
								.setTimestamp(1, new java.sql.Timestamp(
										row_talendStats_STATS.moment.getTime()));
					} else {
						pstmt_talendStats_DB.setNull(1,
								java.sql.Types.TIMESTAMP);
					}

					if (row_talendStats_STATS.pid == null) {
						pstmt_talendStats_DB.setNull(2, java.sql.Types.VARCHAR);
					} else {
						pstmt_talendStats_DB.setString(2,
								row_talendStats_STATS.pid);
					}

					if (row_talendStats_STATS.father_pid == null) {
						pstmt_talendStats_DB.setNull(3, java.sql.Types.VARCHAR);
					} else {
						pstmt_talendStats_DB.setString(3,
								row_talendStats_STATS.father_pid);
					}

					if (row_talendStats_STATS.root_pid == null) {
						pstmt_talendStats_DB.setNull(4, java.sql.Types.VARCHAR);
					} else {
						pstmt_talendStats_DB.setString(4,
								row_talendStats_STATS.root_pid);
					}

					if (row_talendStats_STATS.system_pid == null) {
						pstmt_talendStats_DB.setNull(5, java.sql.Types.INTEGER);
					} else {
						pstmt_talendStats_DB.setLong(5,
								row_talendStats_STATS.system_pid);
					}

					if (row_talendStats_STATS.project == null) {
						pstmt_talendStats_DB.setNull(6, java.sql.Types.VARCHAR);
					} else {
						pstmt_talendStats_DB.setString(6,
								row_talendStats_STATS.project);
					}

					if (row_talendStats_STATS.job == null) {
						pstmt_talendStats_DB.setNull(7, java.sql.Types.VARCHAR);
					} else {
						pstmt_talendStats_DB.setString(7,
								row_talendStats_STATS.job);
					}

					if (row_talendStats_STATS.job_repository_id == null) {
						pstmt_talendStats_DB.setNull(8, java.sql.Types.VARCHAR);
					} else {
						pstmt_talendStats_DB.setString(8,
								row_talendStats_STATS.job_repository_id);
					}

					if (row_talendStats_STATS.job_version == null) {
						pstmt_talendStats_DB.setNull(9, java.sql.Types.VARCHAR);
					} else {
						pstmt_talendStats_DB.setString(9,
								row_talendStats_STATS.job_version);
					}

					if (row_talendStats_STATS.context == null) {
						pstmt_talendStats_DB
								.setNull(10, java.sql.Types.VARCHAR);
					} else {
						pstmt_talendStats_DB.setString(10,
								row_talendStats_STATS.context);
					}

					if (row_talendStats_STATS.origin == null) {
						pstmt_talendStats_DB
								.setNull(11, java.sql.Types.VARCHAR);
					} else {
						pstmt_talendStats_DB.setString(11,
								row_talendStats_STATS.origin);
					}

					if (row_talendStats_STATS.message_type == null) {
						pstmt_talendStats_DB
								.setNull(12, java.sql.Types.VARCHAR);
					} else {
						pstmt_talendStats_DB.setString(12,
								row_talendStats_STATS.message_type);
					}

					if (row_talendStats_STATS.message == null) {
						pstmt_talendStats_DB
								.setNull(13, java.sql.Types.VARCHAR);
					} else {
						pstmt_talendStats_DB.setString(13,
								row_talendStats_STATS.message);
					}

					if (row_talendStats_STATS.duration == null) {
						pstmt_talendStats_DB
								.setNull(14, java.sql.Types.INTEGER);
					} else {
						pstmt_talendStats_DB.setLong(14,
								row_talendStats_STATS.duration);
					}

					pstmt_talendStats_DB.addBatch();
					nb_line_talendStats_DB++;

					batchSizeCounter_talendStats_DB++;

					if ((batchSize_talendStats_DB > 0)
							&& (batchSize_talendStats_DB <= batchSizeCounter_talendStats_DB)) {
						try {
							int countSum_talendStats_DB = 0;

							for (int countEach_talendStats_DB : pstmt_talendStats_DB
									.executeBatch()) {
								countSum_talendStats_DB += (countEach_talendStats_DB < 0 ? 0
										: countEach_talendStats_DB);
							}

							insertedCount_talendStats_DB += countSum_talendStats_DB;

							batchSizeCounter_talendStats_DB = 0;
						} catch (java.sql.BatchUpdateException e_talendStats_DB) {
							java.sql.SQLException ne_talendStats_DB = e_talendStats_DB
									.getNextException(), sqle_talendStats_DB = null;
							String errormessage_talendStats_DB;
							if (ne_talendStats_DB != null) {
								// build new exception to provide the original
								// cause
								sqle_talendStats_DB = new java.sql.SQLException(
										e_talendStats_DB.getMessage()
												+ "\ncaused by: "
												+ ne_talendStats_DB
														.getMessage(),
										ne_talendStats_DB.getSQLState(),
										ne_talendStats_DB.getErrorCode(),
										ne_talendStats_DB);
								errormessage_talendStats_DB = sqle_talendStats_DB
										.getMessage();
							} else {
								errormessage_talendStats_DB = e_talendStats_DB
										.getMessage();
							}

							int countSum_talendStats_DB = 0;
							for (int countEach_talendStats_DB : e_talendStats_DB
									.getUpdateCounts()) {
								countSum_talendStats_DB += (countEach_talendStats_DB < 0 ? 0
										: countEach_talendStats_DB);
							}

							insertedCount_talendStats_DB += countSum_talendStats_DB;

							System.err.println(errormessage_talendStats_DB);

						}
					}

					tos_count_talendStats_DB++;

					/**
					 * [talendStats_DB main ] stop
					 */

					/**
					 * [talendStats_DB process_data_begin ] start
					 */

					currentVirtualComponent = "talendStats_DB";

					currentComponent = "talendStats_DB";

					/**
					 * [talendStats_DB process_data_begin ] stop
					 */

					/**
					 * [talendStats_DB process_data_end ] start
					 */

					currentVirtualComponent = "talendStats_DB";

					currentComponent = "talendStats_DB";

					/**
					 * [talendStats_DB process_data_end ] stop
					 */

					/**
					 * [talendStats_STATS process_data_end ] start
					 */

					currentVirtualComponent = "talendStats_STATS";

					currentComponent = "talendStats_STATS";

					/**
					 * [talendStats_STATS process_data_end ] stop
					 */

					/**
					 * [talendStats_STATS end ] start
					 */

					currentVirtualComponent = "talendStats_STATS";

					currentComponent = "talendStats_STATS";

				}

				ok_Hash.put("talendStats_STATS", true);
				end_Hash.put("talendStats_STATS", System.currentTimeMillis());

				/**
				 * [talendStats_STATS end ] stop
				 */

				/**
				 * [talendStats_DB end ] start
				 */

				currentVirtualComponent = "talendStats_DB";

				currentComponent = "talendStats_DB";

				try {
					int countSum_talendStats_DB = 0;
					if (pstmt_talendStats_DB != null
							&& batchSizeCounter_talendStats_DB > 0) {

						for (int countEach_talendStats_DB : pstmt_talendStats_DB
								.executeBatch()) {
							countSum_talendStats_DB += (countEach_talendStats_DB < 0 ? 0
									: countEach_talendStats_DB);
						}

					}

					insertedCount_talendStats_DB += countSum_talendStats_DB;

				} catch (java.sql.BatchUpdateException e_talendStats_DB) {
					java.sql.SQLException ne_talendStats_DB = e_talendStats_DB
							.getNextException(), sqle_talendStats_DB = null;
					String errormessage_talendStats_DB;
					if (ne_talendStats_DB != null) {
						// build new exception to provide the original cause
						sqle_talendStats_DB = new java.sql.SQLException(
								e_talendStats_DB.getMessage() + "\ncaused by: "
										+ ne_talendStats_DB.getMessage(),
								ne_talendStats_DB.getSQLState(),
								ne_talendStats_DB.getErrorCode(),
								ne_talendStats_DB);
						errormessage_talendStats_DB = sqle_talendStats_DB
								.getMessage();
					} else {
						errormessage_talendStats_DB = e_talendStats_DB
								.getMessage();
					}

					int countSum_talendStats_DB = 0;
					for (int countEach_talendStats_DB : e_talendStats_DB
							.getUpdateCounts()) {
						countSum_talendStats_DB += (countEach_talendStats_DB < 0 ? 0
								: countEach_talendStats_DB);
					}

					insertedCount_talendStats_DB += countSum_talendStats_DB;

					System.err.println(errormessage_talendStats_DB);

				}

				if (pstmt_talendStats_DB != null) {

					SharedDBPreparedStatement
							.releasePreparedStatement(keyPsmt_talendStats_DB);
				}
				resourceMap.put("statementClosed_talendStats_DB", true);

				nb_line_deleted_talendStats_DB = nb_line_deleted_talendStats_DB
						+ deletedCount_talendStats_DB;
				nb_line_update_talendStats_DB = nb_line_update_talendStats_DB
						+ updatedCount_talendStats_DB;
				nb_line_inserted_talendStats_DB = nb_line_inserted_talendStats_DB
						+ insertedCount_talendStats_DB;
				nb_line_rejected_talendStats_DB = nb_line_rejected_talendStats_DB
						+ rejectedCount_talendStats_DB;

				globalMap.put("talendStats_DB_NB_LINE", nb_line_talendStats_DB);
				globalMap.put("talendStats_DB_NB_LINE_UPDATED",
						nb_line_update_talendStats_DB);
				globalMap.put("talendStats_DB_NB_LINE_INSERTED",
						nb_line_inserted_talendStats_DB);
				globalMap.put("talendStats_DB_NB_LINE_DELETED",
						nb_line_deleted_talendStats_DB);
				globalMap.put("talendStats_DB_NB_LINE_REJECTED",
						nb_line_rejected_talendStats_DB);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("Main" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("talendStats_DB", true);
				end_Hash.put("talendStats_DB", System.currentTimeMillis());

				/**
				 * [talendStats_DB end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:talendStats_STATS:sub_ok_talendStats_connectionStatsLogs_Commit",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection(
						"sub_ok_talendStats_connectionStatsLogs_Commit", 0,
						"ok");
			}

			connectionStatsLogs_CommitProcess(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [talendStats_STATS finally ] start
				 */

				currentVirtualComponent = "talendStats_STATS";

				currentComponent = "talendStats_STATS";

				/**
				 * [talendStats_STATS finally ] stop
				 */

				/**
				 * [talendStats_DB finally ] start
				 */

				currentVirtualComponent = "talendStats_DB";

				currentComponent = "talendStats_DB";

				if (resourceMap.get("statementClosed_talendStats_DB") == null) {
					java.sql.PreparedStatement pstmtToClose_talendStats_DB = null;
					if ((pstmtToClose_talendStats_DB = (java.sql.PreparedStatement) resourceMap
							.remove("pstmt_talendStats_DB")) != null) {
						pstmtToClose_talendStats_DB.close();
					}
				}

				/**
				 * [talendStats_DB finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("talendStats_STATS_SUBPROCESS_STATE", 1);
	}

	public static class row_talendLogs_LOGSStruct implements
			routines.system.IPersistableRow<row_talendLogs_LOGSStruct> {
		final static byte[] commonByteArrayLock_DMINDICADORES_cuadro_maestro_estudiantes = new byte[0];
		static byte[] commonByteArray_DMINDICADORES_cuadro_maestro_estudiantes = new byte[0];

		public java.util.Date moment;

		public java.util.Date getMoment() {
			return this.moment;
		}

		public String pid;

		public String getPid() {
			return this.pid;
		}

		public String root_pid;

		public String getRoot_pid() {
			return this.root_pid;
		}

		public String father_pid;

		public String getFather_pid() {
			return this.father_pid;
		}

		public String project;

		public String getProject() {
			return this.project;
		}

		public String job;

		public String getJob() {
			return this.job;
		}

		public String context;

		public String getContext() {
			return this.context;
		}

		public Integer priority;

		public Integer getPriority() {
			return this.priority;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public String message;

		public String getMessage() {
			return this.message;
		}

		public Integer code;

		public Integer getCode() {
			return this.code;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DMINDICADORES_cuadro_maestro_estudiantes.length) {
					if (length < 1024
							&& commonByteArray_DMINDICADORES_cuadro_maestro_estudiantes.length == 0) {
						commonByteArray_DMINDICADORES_cuadro_maestro_estudiantes = new byte[1024];
					} else {
						commonByteArray_DMINDICADORES_cuadro_maestro_estudiantes = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_DMINDICADORES_cuadro_maestro_estudiantes,
						0, length);
				strReturn = new String(
						commonByteArray_DMINDICADORES_cuadro_maestro_estudiantes,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DMINDICADORES_cuadro_maestro_estudiantes) {

				try {

					int length = 0;

					this.moment = readDate(dis);

					this.pid = readString(dis);

					this.root_pid = readString(dis);

					this.father_pid = readString(dis);

					this.project = readString(dis);

					this.job = readString(dis);

					this.context = readString(dis);

					this.priority = readInteger(dis);

					this.type = readString(dis);

					this.origin = readString(dis);

					this.message = readString(dis);

					this.code = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.moment, dos);

				// String

				writeString(this.pid, dos);

				// String

				writeString(this.root_pid, dos);

				// String

				writeString(this.father_pid, dos);

				// String

				writeString(this.project, dos);

				// String

				writeString(this.job, dos);

				// String

				writeString(this.context, dos);

				// Integer

				writeInteger(this.priority, dos);

				// String

				writeString(this.type, dos);

				// String

				writeString(this.origin, dos);

				// String

				writeString(this.message, dos);

				// Integer

				writeInteger(this.code, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("moment=" + String.valueOf(moment));
			sb.append(",pid=" + pid);
			sb.append(",root_pid=" + root_pid);
			sb.append(",father_pid=" + father_pid);
			sb.append(",project=" + project);
			sb.append(",job=" + job);
			sb.append(",context=" + context);
			sb.append(",priority=" + String.valueOf(priority));
			sb.append(",type=" + type);
			sb.append(",origin=" + origin);
			sb.append(",message=" + message);
			sb.append(",code=" + String.valueOf(code));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_talendLogs_LOGSStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void talendLogs_LOGSProcess(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("talendLogs_LOGS_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row_talendLogs_LOGSStruct row_talendLogs_LOGS = new row_talendLogs_LOGSStruct();

				/**
				 * [talendLogs_DB begin ] start
				 */

				ok_Hash.put("talendLogs_DB", false);
				start_Hash.put("talendLogs_DB", System.currentTimeMillis());

				currentVirtualComponent = "talendLogs_DB";

				currentComponent = "talendLogs_DB";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("Main" + iterateId, 0, 0);

					}
				}

				int tos_count_talendLogs_DB = 0;

				String dbschema_talendLogs_DB = null;
				dbschema_talendLogs_DB = (String) globalMap.get("schema_"
						+ "connectionStatsLogs");

				String tableName_talendLogs_DB = null;
				if (dbschema_talendLogs_DB == null
						|| dbschema_talendLogs_DB.trim().length() == 0) {
					tableName_talendLogs_DB = "logcatcher";
				} else {
					tableName_talendLogs_DB = dbschema_talendLogs_DB + "\".\""
							+ "logcatcher";
				}

				int nb_line_talendLogs_DB = 0;
				int nb_line_update_talendLogs_DB = 0;
				int nb_line_inserted_talendLogs_DB = 0;
				int nb_line_deleted_talendLogs_DB = 0;
				int nb_line_rejected_talendLogs_DB = 0;

				int deletedCount_talendLogs_DB = 0;
				int updatedCount_talendLogs_DB = 0;
				int insertedCount_talendLogs_DB = 0;
				int rejectedCount_talendLogs_DB = 0;

				boolean whetherReject_talendLogs_DB = false;

				java.sql.Connection conn_talendLogs_DB = null;
				String dbUser_talendLogs_DB = null;

				conn_talendLogs_DB = (java.sql.Connection) globalMap
						.get("conn_connectionStatsLogs");

				int batchSize_talendLogs_DB = 10000;
				int batchSizeCounter_talendLogs_DB = 0;

				int count_talendLogs_DB = 0;

				// [%connection%][checktable][tableName]
				String keyCheckTable_talendLogs_DB = conn_talendLogs_DB
						+ "[checktable]" + "[" + "logcatcher" + "]";

				if (GlobalResource.resourceMap.get(keyCheckTable_talendLogs_DB) == null) {// }

					synchronized (GlobalResource.resourceLockMap
							.get(keyCheckTable_talendLogs_DB)) {// }
						if (GlobalResource.resourceMap
								.get(keyCheckTable_talendLogs_DB) == null) {// }
							java.sql.DatabaseMetaData dbMetaData_talendLogs_DB = conn_talendLogs_DB
									.getMetaData();
							boolean whetherExist_talendLogs_DB = false;
							try (java.sql.ResultSet rsTable_talendLogs_DB = dbMetaData_talendLogs_DB
									.getTables(null, null, null,
											new String[] { "TABLE" })) {
								String defaultSchema_talendLogs_DB = "public";
								if (dbschema_talendLogs_DB == null
										|| dbschema_talendLogs_DB.trim()
												.length() == 0) {
									try (java.sql.Statement stmtSchema_talendLogs_DB = conn_talendLogs_DB
											.createStatement();
											java.sql.ResultSet rsSchema_talendLogs_DB = stmtSchema_talendLogs_DB
													.executeQuery("select current_schema() ")) {
										while (rsSchema_talendLogs_DB.next()) {
											defaultSchema_talendLogs_DB = rsSchema_talendLogs_DB
													.getString("current_schema");
										}
									}
								}
								while (rsTable_talendLogs_DB.next()) {
									String table_talendLogs_DB = rsTable_talendLogs_DB
											.getString("TABLE_NAME");
									String schema_talendLogs_DB = rsTable_talendLogs_DB
											.getString("TABLE_SCHEM");
									if (table_talendLogs_DB
											.equals("logcatcher")
											&& (schema_talendLogs_DB
													.equals(dbschema_talendLogs_DB) || ((dbschema_talendLogs_DB == null || dbschema_talendLogs_DB
													.trim().length() == 0) && defaultSchema_talendLogs_DB
													.equals(schema_talendLogs_DB)))) {
										whetherExist_talendLogs_DB = true;
										break;
									}
								}
							}
							if (!whetherExist_talendLogs_DB) {
								try (java.sql.Statement stmtCreate_talendLogs_DB = conn_talendLogs_DB
										.createStatement()) {
									stmtCreate_talendLogs_DB
											.execute("CREATE TABLE \""
													+ tableName_talendLogs_DB
													+ "\"(\"moment\" TIMESTAMP(0)  ,\"pid\" VARCHAR(20)  ,\"root_pid\" VARCHAR(20)  ,\"father_pid\" VARCHAR(20)  ,\"project\" VARCHAR(50)  ,\"job\" VARCHAR(255)  ,\"context\" VARCHAR(50)  ,\"priority\" INT4 ,\"type\" VARCHAR(255)  ,\"origin\" VARCHAR(255)  ,\"message\" VARCHAR(255)  ,\"code\" INT4 )");
								}
							}
							GlobalResource.resourceMap.put(
									keyCheckTable_talendLogs_DB, true);
							// {{{
						} // end of if
					} // end synchronized
				}
				String insert_talendLogs_DB = "INSERT INTO \""
						+ tableName_talendLogs_DB
						+ "\" (\"moment\",\"pid\",\"root_pid\",\"father_pid\",\"project\",\"job\",\"context\",\"priority\",\"type\",\"origin\",\"message\",\"code\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_talendLogs_DB = null;
				String keyPsmt_talendLogs_DB = conn_talendLogs_DB + "[psmt]"
						+ "[" + "logcatcher" + "]";
				pstmt_talendLogs_DB = SharedDBPreparedStatement
						.getSharedPreparedStatement(conn_talendLogs_DB,
								insert_talendLogs_DB, keyPsmt_talendLogs_DB);
				resourceMap.put("pstmt_talendLogs_DB", pstmt_talendLogs_DB);

				/**
				 * [talendLogs_DB begin ] stop
				 */

				/**
				 * [talendLogs_LOGS begin ] start
				 */

				ok_Hash.put("talendLogs_LOGS", false);
				start_Hash.put("talendLogs_LOGS", System.currentTimeMillis());

				currentVirtualComponent = "talendLogs_LOGS";

				currentComponent = "talendLogs_LOGS";

				int tos_count_talendLogs_LOGS = 0;

				try {
					for (LogCatcherUtils.LogCatcherMessage lcm : talendLogs_LOGS
							.getMessages()) {
						row_talendLogs_LOGS.type = lcm.getType();
						row_talendLogs_LOGS.origin = (lcm.getOrigin() == null
								|| lcm.getOrigin().length() < 1 ? null : lcm
								.getOrigin());
						row_talendLogs_LOGS.priority = lcm.getPriority();
						row_talendLogs_LOGS.message = lcm.getMessage();
						row_talendLogs_LOGS.code = lcm.getCode();

						row_talendLogs_LOGS.moment = java.util.Calendar
								.getInstance().getTime();

						row_talendLogs_LOGS.pid = pid;
						row_talendLogs_LOGS.root_pid = rootPid;
						row_talendLogs_LOGS.father_pid = fatherPid;

						row_talendLogs_LOGS.project = projectName;
						row_talendLogs_LOGS.job = jobName;
						row_talendLogs_LOGS.context = contextStr;

						/**
						 * [talendLogs_LOGS begin ] stop
						 */

						/**
						 * [talendLogs_LOGS main ] start
						 */

						currentVirtualComponent = "talendLogs_LOGS";

						currentComponent = "talendLogs_LOGS";

						tos_count_talendLogs_LOGS++;

						/**
						 * [talendLogs_LOGS main ] stop
						 */

						/**
						 * [talendLogs_LOGS process_data_begin ] start
						 */

						currentVirtualComponent = "talendLogs_LOGS";

						currentComponent = "talendLogs_LOGS";

						/**
						 * [talendLogs_LOGS process_data_begin ] stop
						 */

						/**
						 * [talendLogs_DB main ] start
						 */

						currentVirtualComponent = "talendLogs_DB";

						currentComponent = "talendLogs_DB";

						// Main
						// row_talendLogs_LOGS

						if (execStat) {
							runStat.updateStatOnConnection("Main" + iterateId,
									1, 1);
						}

						whetherReject_talendLogs_DB = false;
						if (row_talendLogs_LOGS.moment != null) {
							pstmt_talendLogs_DB.setTimestamp(
									1,
									new java.sql.Timestamp(
											row_talendLogs_LOGS.moment
													.getTime()));
						} else {
							pstmt_talendLogs_DB.setNull(1,
									java.sql.Types.TIMESTAMP);
						}

						if (row_talendLogs_LOGS.pid == null) {
							pstmt_talendLogs_DB.setNull(2,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_talendLogs_DB.setString(2,
									row_talendLogs_LOGS.pid);
						}

						if (row_talendLogs_LOGS.root_pid == null) {
							pstmt_talendLogs_DB.setNull(3,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_talendLogs_DB.setString(3,
									row_talendLogs_LOGS.root_pid);
						}

						if (row_talendLogs_LOGS.father_pid == null) {
							pstmt_talendLogs_DB.setNull(4,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_talendLogs_DB.setString(4,
									row_talendLogs_LOGS.father_pid);
						}

						if (row_talendLogs_LOGS.project == null) {
							pstmt_talendLogs_DB.setNull(5,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_talendLogs_DB.setString(5,
									row_talendLogs_LOGS.project);
						}

						if (row_talendLogs_LOGS.job == null) {
							pstmt_talendLogs_DB.setNull(6,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_talendLogs_DB.setString(6,
									row_talendLogs_LOGS.job);
						}

						if (row_talendLogs_LOGS.context == null) {
							pstmt_talendLogs_DB.setNull(7,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_talendLogs_DB.setString(7,
									row_talendLogs_LOGS.context);
						}

						if (row_talendLogs_LOGS.priority == null) {
							pstmt_talendLogs_DB.setNull(8,
									java.sql.Types.INTEGER);
						} else {
							pstmt_talendLogs_DB.setInt(8,
									row_talendLogs_LOGS.priority);
						}

						if (row_talendLogs_LOGS.type == null) {
							pstmt_talendLogs_DB.setNull(9,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_talendLogs_DB.setString(9,
									row_talendLogs_LOGS.type);
						}

						if (row_talendLogs_LOGS.origin == null) {
							pstmt_talendLogs_DB.setNull(10,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_talendLogs_DB.setString(10,
									row_talendLogs_LOGS.origin);
						}

						if (row_talendLogs_LOGS.message == null) {
							pstmt_talendLogs_DB.setNull(11,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_talendLogs_DB.setString(11,
									row_talendLogs_LOGS.message);
						}

						if (row_talendLogs_LOGS.code == null) {
							pstmt_talendLogs_DB.setNull(12,
									java.sql.Types.INTEGER);
						} else {
							pstmt_talendLogs_DB.setInt(12,
									row_talendLogs_LOGS.code);
						}

						pstmt_talendLogs_DB.addBatch();
						nb_line_talendLogs_DB++;

						batchSizeCounter_talendLogs_DB++;

						if ((batchSize_talendLogs_DB > 0)
								&& (batchSize_talendLogs_DB <= batchSizeCounter_talendLogs_DB)) {
							try {
								int countSum_talendLogs_DB = 0;

								for (int countEach_talendLogs_DB : pstmt_talendLogs_DB
										.executeBatch()) {
									countSum_talendLogs_DB += (countEach_talendLogs_DB < 0 ? 0
											: countEach_talendLogs_DB);
								}

								insertedCount_talendLogs_DB += countSum_talendLogs_DB;

								batchSizeCounter_talendLogs_DB = 0;
							} catch (java.sql.BatchUpdateException e_talendLogs_DB) {
								java.sql.SQLException ne_talendLogs_DB = e_talendLogs_DB
										.getNextException(), sqle_talendLogs_DB = null;
								String errormessage_talendLogs_DB;
								if (ne_talendLogs_DB != null) {
									// build new exception to provide the
									// original cause
									sqle_talendLogs_DB = new java.sql.SQLException(
											e_talendLogs_DB.getMessage()
													+ "\ncaused by: "
													+ ne_talendLogs_DB
															.getMessage(),
											ne_talendLogs_DB.getSQLState(),
											ne_talendLogs_DB.getErrorCode(),
											ne_talendLogs_DB);
									errormessage_talendLogs_DB = sqle_talendLogs_DB
											.getMessage();
								} else {
									errormessage_talendLogs_DB = e_talendLogs_DB
											.getMessage();
								}

								int countSum_talendLogs_DB = 0;
								for (int countEach_talendLogs_DB : e_talendLogs_DB
										.getUpdateCounts()) {
									countSum_talendLogs_DB += (countEach_talendLogs_DB < 0 ? 0
											: countEach_talendLogs_DB);
								}

								insertedCount_talendLogs_DB += countSum_talendLogs_DB;

								System.err.println(errormessage_talendLogs_DB);

							}
						}

						tos_count_talendLogs_DB++;

						/**
						 * [talendLogs_DB main ] stop
						 */

						/**
						 * [talendLogs_DB process_data_begin ] start
						 */

						currentVirtualComponent = "talendLogs_DB";

						currentComponent = "talendLogs_DB";

						/**
						 * [talendLogs_DB process_data_begin ] stop
						 */

						/**
						 * [talendLogs_DB process_data_end ] start
						 */

						currentVirtualComponent = "talendLogs_DB";

						currentComponent = "talendLogs_DB";

						/**
						 * [talendLogs_DB process_data_end ] stop
						 */

						/**
						 * [talendLogs_LOGS process_data_end ] start
						 */

						currentVirtualComponent = "talendLogs_LOGS";

						currentComponent = "talendLogs_LOGS";

						/**
						 * [talendLogs_LOGS process_data_end ] stop
						 */

						/**
						 * [talendLogs_LOGS end ] start
						 */

						currentVirtualComponent = "talendLogs_LOGS";

						currentComponent = "talendLogs_LOGS";

					}
				} catch (Exception e_talendLogs_LOGS) {
					logIgnoredError(
							String.format(
									"talendLogs_LOGS - tLogCatcher failed to process log message(s) due to internal error: %s",
									e_talendLogs_LOGS), e_talendLogs_LOGS);
				}

				ok_Hash.put("talendLogs_LOGS", true);
				end_Hash.put("talendLogs_LOGS", System.currentTimeMillis());

				/**
				 * [talendLogs_LOGS end ] stop
				 */

				/**
				 * [talendLogs_DB end ] start
				 */

				currentVirtualComponent = "talendLogs_DB";

				currentComponent = "talendLogs_DB";

				try {
					int countSum_talendLogs_DB = 0;
					if (pstmt_talendLogs_DB != null
							&& batchSizeCounter_talendLogs_DB > 0) {

						for (int countEach_talendLogs_DB : pstmt_talendLogs_DB
								.executeBatch()) {
							countSum_talendLogs_DB += (countEach_talendLogs_DB < 0 ? 0
									: countEach_talendLogs_DB);
						}

					}

					insertedCount_talendLogs_DB += countSum_talendLogs_DB;

				} catch (java.sql.BatchUpdateException e_talendLogs_DB) {
					java.sql.SQLException ne_talendLogs_DB = e_talendLogs_DB
							.getNextException(), sqle_talendLogs_DB = null;
					String errormessage_talendLogs_DB;
					if (ne_talendLogs_DB != null) {
						// build new exception to provide the original cause
						sqle_talendLogs_DB = new java.sql.SQLException(
								e_talendLogs_DB.getMessage() + "\ncaused by: "
										+ ne_talendLogs_DB.getMessage(),
								ne_talendLogs_DB.getSQLState(),
								ne_talendLogs_DB.getErrorCode(),
								ne_talendLogs_DB);
						errormessage_talendLogs_DB = sqle_talendLogs_DB
								.getMessage();
					} else {
						errormessage_talendLogs_DB = e_talendLogs_DB
								.getMessage();
					}

					int countSum_talendLogs_DB = 0;
					for (int countEach_talendLogs_DB : e_talendLogs_DB
							.getUpdateCounts()) {
						countSum_talendLogs_DB += (countEach_talendLogs_DB < 0 ? 0
								: countEach_talendLogs_DB);
					}

					insertedCount_talendLogs_DB += countSum_talendLogs_DB;

					System.err.println(errormessage_talendLogs_DB);

				}

				if (pstmt_talendLogs_DB != null) {

					SharedDBPreparedStatement
							.releasePreparedStatement(keyPsmt_talendLogs_DB);
				}
				resourceMap.put("statementClosed_talendLogs_DB", true);

				nb_line_deleted_talendLogs_DB = nb_line_deleted_talendLogs_DB
						+ deletedCount_talendLogs_DB;
				nb_line_update_talendLogs_DB = nb_line_update_talendLogs_DB
						+ updatedCount_talendLogs_DB;
				nb_line_inserted_talendLogs_DB = nb_line_inserted_talendLogs_DB
						+ insertedCount_talendLogs_DB;
				nb_line_rejected_talendLogs_DB = nb_line_rejected_talendLogs_DB
						+ rejectedCount_talendLogs_DB;

				globalMap.put("talendLogs_DB_NB_LINE", nb_line_talendLogs_DB);
				globalMap.put("talendLogs_DB_NB_LINE_UPDATED",
						nb_line_update_talendLogs_DB);
				globalMap.put("talendLogs_DB_NB_LINE_INSERTED",
						nb_line_inserted_talendLogs_DB);
				globalMap.put("talendLogs_DB_NB_LINE_DELETED",
						nb_line_deleted_talendLogs_DB);
				globalMap.put("talendLogs_DB_NB_LINE_REJECTED",
						nb_line_rejected_talendLogs_DB);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("Main" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("talendLogs_DB", true);
				end_Hash.put("talendLogs_DB", System.currentTimeMillis());

				/**
				 * [talendLogs_DB end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:talendLogs_LOGS:sub_ok_talendLogs_connectionStatsLogs_Commit",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection(
						"sub_ok_talendLogs_connectionStatsLogs_Commit", 0, "ok");
			}

			connectionStatsLogs_CommitProcess(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [talendLogs_LOGS finally ] start
				 */

				currentVirtualComponent = "talendLogs_LOGS";

				currentComponent = "talendLogs_LOGS";

				/**
				 * [talendLogs_LOGS finally ] stop
				 */

				/**
				 * [talendLogs_DB finally ] start
				 */

				currentVirtualComponent = "talendLogs_DB";

				currentComponent = "talendLogs_DB";

				if (resourceMap.get("statementClosed_talendLogs_DB") == null) {
					java.sql.PreparedStatement pstmtToClose_talendLogs_DB = null;
					if ((pstmtToClose_talendLogs_DB = (java.sql.PreparedStatement) resourceMap
							.remove("pstmt_talendLogs_DB")) != null) {
						pstmtToClose_talendLogs_DB.close();
					}
				}

				/**
				 * [talendLogs_DB finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("talendLogs_LOGS_SUBPROCESS_STATE", 1);
	}

	public static class row_talendMeter_METTERStruct implements
			routines.system.IPersistableRow<row_talendMeter_METTERStruct> {
		final static byte[] commonByteArrayLock_DMINDICADORES_cuadro_maestro_estudiantes = new byte[0];
		static byte[] commonByteArray_DMINDICADORES_cuadro_maestro_estudiantes = new byte[0];

		public java.util.Date moment;

		public java.util.Date getMoment() {
			return this.moment;
		}

		public String pid;

		public String getPid() {
			return this.pid;
		}

		public String father_pid;

		public String getFather_pid() {
			return this.father_pid;
		}

		public String root_pid;

		public String getRoot_pid() {
			return this.root_pid;
		}

		public Long system_pid;

		public Long getSystem_pid() {
			return this.system_pid;
		}

		public String project;

		public String getProject() {
			return this.project;
		}

		public String job;

		public String getJob() {
			return this.job;
		}

		public String job_repository_id;

		public String getJob_repository_id() {
			return this.job_repository_id;
		}

		public String job_version;

		public String getJob_version() {
			return this.job_version;
		}

		public String context;

		public String getContext() {
			return this.context;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public String label;

		public String getLabel() {
			return this.label;
		}

		public Integer count;

		public Integer getCount() {
			return this.count;
		}

		public Integer reference;

		public Integer getReference() {
			return this.reference;
		}

		public String thresholds;

		public String getThresholds() {
			return this.thresholds;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DMINDICADORES_cuadro_maestro_estudiantes.length) {
					if (length < 1024
							&& commonByteArray_DMINDICADORES_cuadro_maestro_estudiantes.length == 0) {
						commonByteArray_DMINDICADORES_cuadro_maestro_estudiantes = new byte[1024];
					} else {
						commonByteArray_DMINDICADORES_cuadro_maestro_estudiantes = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_DMINDICADORES_cuadro_maestro_estudiantes,
						0, length);
				strReturn = new String(
						commonByteArray_DMINDICADORES_cuadro_maestro_estudiantes,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DMINDICADORES_cuadro_maestro_estudiantes) {

				try {

					int length = 0;

					this.moment = readDate(dis);

					this.pid = readString(dis);

					this.father_pid = readString(dis);

					this.root_pid = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.system_pid = null;
					} else {
						this.system_pid = dis.readLong();
					}

					this.project = readString(dis);

					this.job = readString(dis);

					this.job_repository_id = readString(dis);

					this.job_version = readString(dis);

					this.context = readString(dis);

					this.origin = readString(dis);

					this.label = readString(dis);

					this.count = readInteger(dis);

					this.reference = readInteger(dis);

					this.thresholds = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.moment, dos);

				// String

				writeString(this.pid, dos);

				// String

				writeString(this.father_pid, dos);

				// String

				writeString(this.root_pid, dos);

				// Long

				if (this.system_pid == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.system_pid);
				}

				// String

				writeString(this.project, dos);

				// String

				writeString(this.job, dos);

				// String

				writeString(this.job_repository_id, dos);

				// String

				writeString(this.job_version, dos);

				// String

				writeString(this.context, dos);

				// String

				writeString(this.origin, dos);

				// String

				writeString(this.label, dos);

				// Integer

				writeInteger(this.count, dos);

				// Integer

				writeInteger(this.reference, dos);

				// String

				writeString(this.thresholds, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("moment=" + String.valueOf(moment));
			sb.append(",pid=" + pid);
			sb.append(",father_pid=" + father_pid);
			sb.append(",root_pid=" + root_pid);
			sb.append(",system_pid=" + String.valueOf(system_pid));
			sb.append(",project=" + project);
			sb.append(",job=" + job);
			sb.append(",job_repository_id=" + job_repository_id);
			sb.append(",job_version=" + job_version);
			sb.append(",context=" + context);
			sb.append(",origin=" + origin);
			sb.append(",label=" + label);
			sb.append(",count=" + String.valueOf(count));
			sb.append(",reference=" + String.valueOf(reference));
			sb.append(",thresholds=" + thresholds);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_talendMeter_METTERStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void talendMeter_METTERProcess(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("talendMeter_METTER_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row_talendMeter_METTERStruct row_talendMeter_METTER = new row_talendMeter_METTERStruct();

				/**
				 * [talendMeter_DB begin ] start
				 */

				ok_Hash.put("talendMeter_DB", false);
				start_Hash.put("talendMeter_DB", System.currentTimeMillis());

				currentVirtualComponent = "talendMeter_DB";

				currentComponent = "talendMeter_DB";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("Main" + iterateId, 0, 0);

					}
				}

				int tos_count_talendMeter_DB = 0;

				String dbschema_talendMeter_DB = null;
				dbschema_talendMeter_DB = (String) globalMap.get("schema_"
						+ "connectionStatsLogs");

				String tableName_talendMeter_DB = null;
				if (dbschema_talendMeter_DB == null
						|| dbschema_talendMeter_DB.trim().length() == 0) {
					tableName_talendMeter_DB = "flowmetercatcher";
				} else {
					tableName_talendMeter_DB = dbschema_talendMeter_DB
							+ "\".\"" + "flowmetercatcher";
				}

				int nb_line_talendMeter_DB = 0;
				int nb_line_update_talendMeter_DB = 0;
				int nb_line_inserted_talendMeter_DB = 0;
				int nb_line_deleted_talendMeter_DB = 0;
				int nb_line_rejected_talendMeter_DB = 0;

				int deletedCount_talendMeter_DB = 0;
				int updatedCount_talendMeter_DB = 0;
				int insertedCount_talendMeter_DB = 0;
				int rejectedCount_talendMeter_DB = 0;

				boolean whetherReject_talendMeter_DB = false;

				java.sql.Connection conn_talendMeter_DB = null;
				String dbUser_talendMeter_DB = null;

				conn_talendMeter_DB = (java.sql.Connection) globalMap
						.get("conn_connectionStatsLogs");

				int batchSize_talendMeter_DB = 10000;
				int batchSizeCounter_talendMeter_DB = 0;

				int count_talendMeter_DB = 0;

				// [%connection%][checktable][tableName]
				String keyCheckTable_talendMeter_DB = conn_talendMeter_DB
						+ "[checktable]" + "[" + "flowmetercatcher" + "]";

				if (GlobalResource.resourceMap
						.get(keyCheckTable_talendMeter_DB) == null) {// }

					synchronized (GlobalResource.resourceLockMap
							.get(keyCheckTable_talendMeter_DB)) {// }
						if (GlobalResource.resourceMap
								.get(keyCheckTable_talendMeter_DB) == null) {// }
							java.sql.DatabaseMetaData dbMetaData_talendMeter_DB = conn_talendMeter_DB
									.getMetaData();
							boolean whetherExist_talendMeter_DB = false;
							try (java.sql.ResultSet rsTable_talendMeter_DB = dbMetaData_talendMeter_DB
									.getTables(null, null, null,
											new String[] { "TABLE" })) {
								String defaultSchema_talendMeter_DB = "public";
								if (dbschema_talendMeter_DB == null
										|| dbschema_talendMeter_DB.trim()
												.length() == 0) {
									try (java.sql.Statement stmtSchema_talendMeter_DB = conn_talendMeter_DB
											.createStatement();
											java.sql.ResultSet rsSchema_talendMeter_DB = stmtSchema_talendMeter_DB
													.executeQuery("select current_schema() ")) {
										while (rsSchema_talendMeter_DB.next()) {
											defaultSchema_talendMeter_DB = rsSchema_talendMeter_DB
													.getString("current_schema");
										}
									}
								}
								while (rsTable_talendMeter_DB.next()) {
									String table_talendMeter_DB = rsTable_talendMeter_DB
											.getString("TABLE_NAME");
									String schema_talendMeter_DB = rsTable_talendMeter_DB
											.getString("TABLE_SCHEM");
									if (table_talendMeter_DB
											.equals("flowmetercatcher")
											&& (schema_talendMeter_DB
													.equals(dbschema_talendMeter_DB) || ((dbschema_talendMeter_DB == null || dbschema_talendMeter_DB
													.trim().length() == 0) && defaultSchema_talendMeter_DB
													.equals(schema_talendMeter_DB)))) {
										whetherExist_talendMeter_DB = true;
										break;
									}
								}
							}
							if (!whetherExist_talendMeter_DB) {
								try (java.sql.Statement stmtCreate_talendMeter_DB = conn_talendMeter_DB
										.createStatement()) {
									stmtCreate_talendMeter_DB
											.execute("CREATE TABLE \""
													+ tableName_talendMeter_DB
													+ "\"(\"moment\" TIMESTAMP(0)  ,\"pid\" VARCHAR(20)  ,\"father_pid\" VARCHAR(20)  ,\"root_pid\" VARCHAR(20)  ,\"system_pid\" INT8 ,\"project\" VARCHAR(50)  ,\"job\" VARCHAR(255)  ,\"job_repository_id\" VARCHAR(255)  ,\"job_version\" VARCHAR(255)  ,\"context\" VARCHAR(50)  ,\"origin\" VARCHAR(255)  ,\"label\" VARCHAR(255)  ,\"count\" INT4 ,\"reference\" INT4 ,\"thresholds\" VARCHAR(255)  )");
								}
							}
							GlobalResource.resourceMap.put(
									keyCheckTable_talendMeter_DB, true);
							// {{{
						} // end of if
					} // end synchronized
				}
				String insert_talendMeter_DB = "INSERT INTO \""
						+ tableName_talendMeter_DB
						+ "\" (\"moment\",\"pid\",\"father_pid\",\"root_pid\",\"system_pid\",\"project\",\"job\",\"job_repository_id\",\"job_version\",\"context\",\"origin\",\"label\",\"count\",\"reference\",\"thresholds\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_talendMeter_DB = null;
				String keyPsmt_talendMeter_DB = conn_talendMeter_DB + "[psmt]"
						+ "[" + "flowmetercatcher" + "]";
				pstmt_talendMeter_DB = SharedDBPreparedStatement
						.getSharedPreparedStatement(conn_talendMeter_DB,
								insert_talendMeter_DB, keyPsmt_talendMeter_DB);
				resourceMap.put("pstmt_talendMeter_DB", pstmt_talendMeter_DB);

				/**
				 * [talendMeter_DB begin ] stop
				 */

				/**
				 * [talendMeter_METTER begin ] start
				 */

				ok_Hash.put("talendMeter_METTER", false);
				start_Hash
						.put("talendMeter_METTER", System.currentTimeMillis());

				currentVirtualComponent = "talendMeter_METTER";

				currentComponent = "talendMeter_METTER";

				int tos_count_talendMeter_METTER = 0;

				for (MetterCatcherUtils.MetterCatcherMessage mcm : talendMeter_METTER
						.getMessages()) {
					row_talendMeter_METTER.pid = pid;
					row_talendMeter_METTER.root_pid = rootPid;
					row_talendMeter_METTER.father_pid = fatherPid;
					row_talendMeter_METTER.project = projectName;
					row_talendMeter_METTER.job = jobName;
					row_talendMeter_METTER.context = contextStr;
					row_talendMeter_METTER.origin = (mcm.getOrigin() == null
							|| mcm.getOrigin().length() < 1 ? null : mcm
							.getOrigin());
					row_talendMeter_METTER.moment = mcm.getMoment();
					row_talendMeter_METTER.job_version = mcm.getJobVersion();
					row_talendMeter_METTER.job_repository_id = mcm.getJobId();
					row_talendMeter_METTER.system_pid = mcm.getSystemPid();
					row_talendMeter_METTER.label = mcm.getLabel();
					row_talendMeter_METTER.count = mcm.getCount();
					row_talendMeter_METTER.reference = talendMeter_METTER
							.getConnLinesCount(mcm.getReferense() + "_count");
					row_talendMeter_METTER.thresholds = mcm.getThresholds();

					/**
					 * [talendMeter_METTER begin ] stop
					 */

					/**
					 * [talendMeter_METTER main ] start
					 */

					currentVirtualComponent = "talendMeter_METTER";

					currentComponent = "talendMeter_METTER";

					tos_count_talendMeter_METTER++;

					/**
					 * [talendMeter_METTER main ] stop
					 */

					/**
					 * [talendMeter_METTER process_data_begin ] start
					 */

					currentVirtualComponent = "talendMeter_METTER";

					currentComponent = "talendMeter_METTER";

					/**
					 * [talendMeter_METTER process_data_begin ] stop
					 */

					/**
					 * [talendMeter_DB main ] start
					 */

					currentVirtualComponent = "talendMeter_DB";

					currentComponent = "talendMeter_DB";

					// Main
					// row_talendMeter_METTER

					if (execStat) {
						runStat.updateStatOnConnection("Main" + iterateId, 1, 1);
					}

					whetherReject_talendMeter_DB = false;
					if (row_talendMeter_METTER.moment != null) {
						pstmt_talendMeter_DB
								.setTimestamp(
										1,
										new java.sql.Timestamp(
												row_talendMeter_METTER.moment
														.getTime()));
					} else {
						pstmt_talendMeter_DB.setNull(1,
								java.sql.Types.TIMESTAMP);
					}

					if (row_talendMeter_METTER.pid == null) {
						pstmt_talendMeter_DB.setNull(2, java.sql.Types.VARCHAR);
					} else {
						pstmt_talendMeter_DB.setString(2,
								row_talendMeter_METTER.pid);
					}

					if (row_talendMeter_METTER.father_pid == null) {
						pstmt_talendMeter_DB.setNull(3, java.sql.Types.VARCHAR);
					} else {
						pstmt_talendMeter_DB.setString(3,
								row_talendMeter_METTER.father_pid);
					}

					if (row_talendMeter_METTER.root_pid == null) {
						pstmt_talendMeter_DB.setNull(4, java.sql.Types.VARCHAR);
					} else {
						pstmt_talendMeter_DB.setString(4,
								row_talendMeter_METTER.root_pid);
					}

					if (row_talendMeter_METTER.system_pid == null) {
						pstmt_talendMeter_DB.setNull(5, java.sql.Types.INTEGER);
					} else {
						pstmt_talendMeter_DB.setLong(5,
								row_talendMeter_METTER.system_pid);
					}

					if (row_talendMeter_METTER.project == null) {
						pstmt_talendMeter_DB.setNull(6, java.sql.Types.VARCHAR);
					} else {
						pstmt_talendMeter_DB.setString(6,
								row_talendMeter_METTER.project);
					}

					if (row_talendMeter_METTER.job == null) {
						pstmt_talendMeter_DB.setNull(7, java.sql.Types.VARCHAR);
					} else {
						pstmt_talendMeter_DB.setString(7,
								row_talendMeter_METTER.job);
					}

					if (row_talendMeter_METTER.job_repository_id == null) {
						pstmt_talendMeter_DB.setNull(8, java.sql.Types.VARCHAR);
					} else {
						pstmt_talendMeter_DB.setString(8,
								row_talendMeter_METTER.job_repository_id);
					}

					if (row_talendMeter_METTER.job_version == null) {
						pstmt_talendMeter_DB.setNull(9, java.sql.Types.VARCHAR);
					} else {
						pstmt_talendMeter_DB.setString(9,
								row_talendMeter_METTER.job_version);
					}

					if (row_talendMeter_METTER.context == null) {
						pstmt_talendMeter_DB
								.setNull(10, java.sql.Types.VARCHAR);
					} else {
						pstmt_talendMeter_DB.setString(10,
								row_talendMeter_METTER.context);
					}

					if (row_talendMeter_METTER.origin == null) {
						pstmt_talendMeter_DB
								.setNull(11, java.sql.Types.VARCHAR);
					} else {
						pstmt_talendMeter_DB.setString(11,
								row_talendMeter_METTER.origin);
					}

					if (row_talendMeter_METTER.label == null) {
						pstmt_talendMeter_DB
								.setNull(12, java.sql.Types.VARCHAR);
					} else {
						pstmt_talendMeter_DB.setString(12,
								row_talendMeter_METTER.label);
					}

					if (row_talendMeter_METTER.count == null) {
						pstmt_talendMeter_DB
								.setNull(13, java.sql.Types.INTEGER);
					} else {
						pstmt_talendMeter_DB.setInt(13,
								row_talendMeter_METTER.count);
					}

					if (row_talendMeter_METTER.reference == null) {
						pstmt_talendMeter_DB
								.setNull(14, java.sql.Types.INTEGER);
					} else {
						pstmt_talendMeter_DB.setInt(14,
								row_talendMeter_METTER.reference);
					}

					if (row_talendMeter_METTER.thresholds == null) {
						pstmt_talendMeter_DB
								.setNull(15, java.sql.Types.VARCHAR);
					} else {
						pstmt_talendMeter_DB.setString(15,
								row_talendMeter_METTER.thresholds);
					}

					pstmt_talendMeter_DB.addBatch();
					nb_line_talendMeter_DB++;

					batchSizeCounter_talendMeter_DB++;

					if ((batchSize_talendMeter_DB > 0)
							&& (batchSize_talendMeter_DB <= batchSizeCounter_talendMeter_DB)) {
						try {
							int countSum_talendMeter_DB = 0;

							for (int countEach_talendMeter_DB : pstmt_talendMeter_DB
									.executeBatch()) {
								countSum_talendMeter_DB += (countEach_talendMeter_DB < 0 ? 0
										: countEach_talendMeter_DB);
							}

							insertedCount_talendMeter_DB += countSum_talendMeter_DB;

							batchSizeCounter_talendMeter_DB = 0;
						} catch (java.sql.BatchUpdateException e_talendMeter_DB) {
							java.sql.SQLException ne_talendMeter_DB = e_talendMeter_DB
									.getNextException(), sqle_talendMeter_DB = null;
							String errormessage_talendMeter_DB;
							if (ne_talendMeter_DB != null) {
								// build new exception to provide the original
								// cause
								sqle_talendMeter_DB = new java.sql.SQLException(
										e_talendMeter_DB.getMessage()
												+ "\ncaused by: "
												+ ne_talendMeter_DB
														.getMessage(),
										ne_talendMeter_DB.getSQLState(),
										ne_talendMeter_DB.getErrorCode(),
										ne_talendMeter_DB);
								errormessage_talendMeter_DB = sqle_talendMeter_DB
										.getMessage();
							} else {
								errormessage_talendMeter_DB = e_talendMeter_DB
										.getMessage();
							}

							int countSum_talendMeter_DB = 0;
							for (int countEach_talendMeter_DB : e_talendMeter_DB
									.getUpdateCounts()) {
								countSum_talendMeter_DB += (countEach_talendMeter_DB < 0 ? 0
										: countEach_talendMeter_DB);
							}

							insertedCount_talendMeter_DB += countSum_talendMeter_DB;

							System.err.println(errormessage_talendMeter_DB);

						}
					}

					tos_count_talendMeter_DB++;

					/**
					 * [talendMeter_DB main ] stop
					 */

					/**
					 * [talendMeter_DB process_data_begin ] start
					 */

					currentVirtualComponent = "talendMeter_DB";

					currentComponent = "talendMeter_DB";

					/**
					 * [talendMeter_DB process_data_begin ] stop
					 */

					/**
					 * [talendMeter_DB process_data_end ] start
					 */

					currentVirtualComponent = "talendMeter_DB";

					currentComponent = "talendMeter_DB";

					/**
					 * [talendMeter_DB process_data_end ] stop
					 */

					/**
					 * [talendMeter_METTER process_data_end ] start
					 */

					currentVirtualComponent = "talendMeter_METTER";

					currentComponent = "talendMeter_METTER";

					/**
					 * [talendMeter_METTER process_data_end ] stop
					 */

					/**
					 * [talendMeter_METTER end ] start
					 */

					currentVirtualComponent = "talendMeter_METTER";

					currentComponent = "talendMeter_METTER";

				}

				ok_Hash.put("talendMeter_METTER", true);
				end_Hash.put("talendMeter_METTER", System.currentTimeMillis());

				/**
				 * [talendMeter_METTER end ] stop
				 */

				/**
				 * [talendMeter_DB end ] start
				 */

				currentVirtualComponent = "talendMeter_DB";

				currentComponent = "talendMeter_DB";

				try {
					int countSum_talendMeter_DB = 0;
					if (pstmt_talendMeter_DB != null
							&& batchSizeCounter_talendMeter_DB > 0) {

						for (int countEach_talendMeter_DB : pstmt_talendMeter_DB
								.executeBatch()) {
							countSum_talendMeter_DB += (countEach_talendMeter_DB < 0 ? 0
									: countEach_talendMeter_DB);
						}

					}

					insertedCount_talendMeter_DB += countSum_talendMeter_DB;

				} catch (java.sql.BatchUpdateException e_talendMeter_DB) {
					java.sql.SQLException ne_talendMeter_DB = e_talendMeter_DB
							.getNextException(), sqle_talendMeter_DB = null;
					String errormessage_talendMeter_DB;
					if (ne_talendMeter_DB != null) {
						// build new exception to provide the original cause
						sqle_talendMeter_DB = new java.sql.SQLException(
								e_talendMeter_DB.getMessage() + "\ncaused by: "
										+ ne_talendMeter_DB.getMessage(),
								ne_talendMeter_DB.getSQLState(),
								ne_talendMeter_DB.getErrorCode(),
								ne_talendMeter_DB);
						errormessage_talendMeter_DB = sqle_talendMeter_DB
								.getMessage();
					} else {
						errormessage_talendMeter_DB = e_talendMeter_DB
								.getMessage();
					}

					int countSum_talendMeter_DB = 0;
					for (int countEach_talendMeter_DB : e_talendMeter_DB
							.getUpdateCounts()) {
						countSum_talendMeter_DB += (countEach_talendMeter_DB < 0 ? 0
								: countEach_talendMeter_DB);
					}

					insertedCount_talendMeter_DB += countSum_talendMeter_DB;

					System.err.println(errormessage_talendMeter_DB);

				}

				if (pstmt_talendMeter_DB != null) {

					SharedDBPreparedStatement
							.releasePreparedStatement(keyPsmt_talendMeter_DB);
				}
				resourceMap.put("statementClosed_talendMeter_DB", true);

				nb_line_deleted_talendMeter_DB = nb_line_deleted_talendMeter_DB
						+ deletedCount_talendMeter_DB;
				nb_line_update_talendMeter_DB = nb_line_update_talendMeter_DB
						+ updatedCount_talendMeter_DB;
				nb_line_inserted_talendMeter_DB = nb_line_inserted_talendMeter_DB
						+ insertedCount_talendMeter_DB;
				nb_line_rejected_talendMeter_DB = nb_line_rejected_talendMeter_DB
						+ rejectedCount_talendMeter_DB;

				globalMap.put("talendMeter_DB_NB_LINE", nb_line_talendMeter_DB);
				globalMap.put("talendMeter_DB_NB_LINE_UPDATED",
						nb_line_update_talendMeter_DB);
				globalMap.put("talendMeter_DB_NB_LINE_INSERTED",
						nb_line_inserted_talendMeter_DB);
				globalMap.put("talendMeter_DB_NB_LINE_DELETED",
						nb_line_deleted_talendMeter_DB);
				globalMap.put("talendMeter_DB_NB_LINE_REJECTED",
						nb_line_rejected_talendMeter_DB);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("Main" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("talendMeter_DB", true);
				end_Hash.put("talendMeter_DB", System.currentTimeMillis());

				/**
				 * [talendMeter_DB end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:talendMeter_METTER:sub_ok_talendMeter_connectionStatsLogs_Commit",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection(
						"sub_ok_talendMeter_connectionStatsLogs_Commit", 0,
						"ok");
			}

			connectionStatsLogs_CommitProcess(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [talendMeter_METTER finally ] start
				 */

				currentVirtualComponent = "talendMeter_METTER";

				currentComponent = "talendMeter_METTER";

				/**
				 * [talendMeter_METTER finally ] stop
				 */

				/**
				 * [talendMeter_DB finally ] start
				 */

				currentVirtualComponent = "talendMeter_DB";

				currentComponent = "talendMeter_DB";

				if (resourceMap.get("statementClosed_talendMeter_DB") == null) {
					java.sql.PreparedStatement pstmtToClose_talendMeter_DB = null;
					if ((pstmtToClose_talendMeter_DB = (java.sql.PreparedStatement) resourceMap
							.remove("pstmt_talendMeter_DB")) != null) {
						pstmtToClose_talendMeter_DB.close();
					}
				}

				/**
				 * [talendMeter_DB finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("talendMeter_METTER_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final cuadro_maestro_estudiantes cuadro_maestro_estudiantesClass = new cuadro_maestro_estudiantes();

		int exitCode = cuadro_maestro_estudiantesClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket
				// can't open
				System.err.println("The statistics socket port " + portStats
						+ " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = cuadro_maestro_estudiantes.class
					.getClassLoader().getResourceAsStream(
							"dmindicadores/cuadro_maestro_estudiantes_0_1/contexts/"
									+ contextStr + ".properties");
			if (inContext == null) {
				inContext = cuadro_maestro_estudiantes.class
						.getClassLoader()
						.getResourceAsStream(
								"config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				defaultProps.load(inContext);
				inContext.close();
				context = new ContextProperties(defaultProps);
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param
				// is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param
							.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "",
				resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();
		talendStats_STATS.addMessage("begin");

		this.globalResumeTicket = true;// to run tPreJob

		try {
			errorCode = null;
			preStaLogConProcess(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_preStaLogCon) {
			globalMap.put("preStaLogCon_SUBPROCESS_STATE", -1);

			e_preStaLogCon.printStackTrace();

		}

		try {
			talendStats_STATSProcess(globalMap);
		} catch (java.lang.Exception e) {
			e.printStackTrace();
		}

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tPostgresqlInput_9Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tPostgresqlInput_9) {
			globalMap.put("tPostgresqlInput_9_SUBPROCESS_STATE", -1);

			e_tPostgresqlInput_9.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out
					.println((endUsedMemory - startUsedMemory)
							+ " bytes memory increase when running : cuadro_maestro_estudiantes");
		}
		talendStats_STATS.addMessage(status == "" ? "end" : status,
				(end - startTime));
		try {
			talendStats_STATSProcess(globalMap);
		} catch (java.lang.Exception e) {
			e.printStackTrace();
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {
		closeSqlDbConnections();

	}

	private void closeSqlDbConnections() {
		try {
			Object obj_conn;
			obj_conn = globalMap.remove("conn_connectionStatsLogs");
			if (null != obj_conn) {
				((java.sql.Connection) obj_conn).close();
			}
		} catch (java.lang.Exception e) {
		}
	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		connections.put("conn_connectionStatsLogs",
				globalMap.get("conn_connectionStatsLogs"));

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 408592 characters generated by Talend Open Studio for Data Integration on the
 * 19 de septiembre de 2018 06:36:36 PM COT
 ************************************************************************************************/
