// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package dmindicadores.jovenes_accion_cruce_reporte_dos_0_1;

import routines.DataOperation;
import routines.OpenStreetMap;
import routines.TalendDataGenerator;
import routines.Relational;
import routines.Mathematical;
import routines.GeometryUtility;
import routines.Numeric;
import routines.GeoOperation;
import routines.GeometryOperation;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.TalendDate;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")
/**
 * Job: jovenes_accion_cruce_reporte_dos Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 7.1.1.20180829_1603-M3
 * @status 
 */
public class jovenes_accion_cruce_reporte_dos implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "jovenes_accion_cruce_reporte_dos";
	private final String projectName = "DMINDICADORES";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap
				.put(KEY_DB_DATASOURCES_RAW,
						new java.util.HashMap<String, javax.sql.DataSource>(
								dataSources));
	}

	LogCatcherUtils talendLogs_LOGS = new LogCatcherUtils();
	StatCatcherUtils talendStats_STATS = new StatCatcherUtils(
			"_azQe4ECZEeWtZvLC0fbslQ", "0.1");
	MetterCatcherUtils talendMeter_METTER = new MetterCatcherUtils(
			"_azQe4ECZEeWtZvLC0fbslQ", "0.1");

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent
						+ " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					jovenes_accion_cruce_reporte_dos.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(jovenes_accion_cruce_reporte_dos.this,
									new Object[] { e, currentComponent,
											globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
						talendLogs_LOGS.addMessage("Java Exception",
								currentComponent, 6, e.getClass().getName()
										+ ":" + e.getMessage(), 1);
						talendLogs_LOGSProcess(globalMap);
					}
				} catch (TalendException e) {
					// do nothing

				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void preStaLogCon_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		preStaLogCon_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlConnection_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlConnection_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tPostgresqlInput_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlOutput_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tOracleInput_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostjob_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostjob_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tOracleClose_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tOracleClose_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlClose_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlClose_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void connectionStatsLogs_Commit_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		connectionStatsLogs_Commit_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void connectionStatsLogs_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		connectionStatsLogs_onSubJobError(exception, errorComponent, globalMap);
	}

	public void talendStats_STATS_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		talendStats_DB_error(exception, errorComponent, globalMap);

	}

	public void talendStats_DB_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		talendStats_STATS_onSubJobError(exception, errorComponent, globalMap);
	}

	public void talendLogs_LOGS_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		talendLogs_DB_error(exception, errorComponent, globalMap);

	}

	public void talendLogs_DB_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		talendLogs_LOGS_onSubJobError(exception, errorComponent, globalMap);
	}

	public void talendMeter_METTER_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		talendMeter_DB_error(exception, errorComponent, globalMap);

	}

	public void talendMeter_DB_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		talendMeter_METTER_onSubJobError(exception, errorComponent, globalMap);
	}

	public void preStaLogCon_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlConnection_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlInput_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tOracleInput_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostjob_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tOracleClose_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlClose_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void connectionStatsLogs_Commit_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void connectionStatsLogs_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void talendStats_STATS_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void talendLogs_LOGS_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void talendMeter_METTER_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void preStaLogConProcess(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("preStaLogCon_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [preStaLogCon begin ] start
				 */

				ok_Hash.put("preStaLogCon", false);
				start_Hash.put("preStaLogCon", System.currentTimeMillis());

				currentComponent = "preStaLogCon";

				int tos_count_preStaLogCon = 0;

				/**
				 * [preStaLogCon begin ] stop
				 */

				/**
				 * [preStaLogCon main ] start
				 */

				currentComponent = "preStaLogCon";

				tos_count_preStaLogCon++;

				/**
				 * [preStaLogCon main ] stop
				 */

				/**
				 * [preStaLogCon process_data_begin ] start
				 */

				currentComponent = "preStaLogCon";

				/**
				 * [preStaLogCon process_data_begin ] stop
				 */

				/**
				 * [preStaLogCon process_data_end ] start
				 */

				currentComponent = "preStaLogCon";

				/**
				 * [preStaLogCon process_data_end ] stop
				 */

				/**
				 * [preStaLogCon end ] start
				 */

				currentComponent = "preStaLogCon";

				ok_Hash.put("preStaLogCon", true);
				end_Hash.put("preStaLogCon", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection(
							"after_preStaLogCon_connectionStatsLogs", 0, "ok");
				}
				connectionStatsLogsProcess(globalMap);

				/**
				 * [preStaLogCon end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [preStaLogCon finally ] start
				 */

				currentComponent = "preStaLogCon";

				/**
				 * [preStaLogCon finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("preStaLogCon_SUBPROCESS_STATE", 1);
	}

	public void tPostgresqlConnection_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlConnection_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tPostgresqlConnection_1 begin ] start
				 */

				ok_Hash.put("tPostgresqlConnection_1", false);
				start_Hash.put("tPostgresqlConnection_1",
						System.currentTimeMillis());

				currentComponent = "tPostgresqlConnection_1";

				int tos_count_tPostgresqlConnection_1 = 0;

				String url_tPostgresqlConnection_1 = "jdbc:postgresql://"
						+ "10.20.0.88" + ":" + "5432" + "/" + "DMINDICADORES";

				String dbUser_tPostgresqlConnection_1 = "postgres";

				final String decryptedPassword_tPostgresqlConnection_1 = routines.system.PasswordEncryptUtil
						.decryptPassword("610243e4ca33e325f4f7aba1746784ea");
				String dbPwd_tPostgresqlConnection_1 = decryptedPassword_tPostgresqlConnection_1;

				java.sql.Connection conn_tPostgresqlConnection_1 = null;

				java.util.Enumeration<java.sql.Driver> drivers_tPostgresqlConnection_1 = java.sql.DriverManager
						.getDrivers();
				while (drivers_tPostgresqlConnection_1.hasMoreElements()) {
					java.sql.Driver d_tPostgresqlConnection_1 = drivers_tPostgresqlConnection_1
							.nextElement();
					java.util.List<String> driverList_tPostgresqlConnection_1 = java.util.Arrays
							.<String> asList("com.amazon.redshift.jdbc.Driver",
									"com.amazon.redshift.jdbc41.Driver");
					if (driverList_tPostgresqlConnection_1
							.contains(d_tPostgresqlConnection_1.getClass()
									.getName())) {
						try {
							java.sql.DriverManager
									.deregisterDriver(d_tPostgresqlConnection_1);
							java.sql.DriverManager
									.registerDriver(d_tPostgresqlConnection_1);
						} catch (java.lang.Exception e_tPostgresqlConnection_1) {
							// do nothing
						}
					}
				}
				String driverClass_tPostgresqlConnection_1 = "org.postgresql.Driver";
				java.lang.Class.forName(driverClass_tPostgresqlConnection_1);

				conn_tPostgresqlConnection_1 = java.sql.DriverManager
						.getConnection(url_tPostgresqlConnection_1,
								dbUser_tPostgresqlConnection_1,
								dbPwd_tPostgresqlConnection_1);

				globalMap.put("conn_tPostgresqlConnection_1",
						conn_tPostgresqlConnection_1);
				if (null != conn_tPostgresqlConnection_1) {

					conn_tPostgresqlConnection_1.setAutoCommit(true);
				}

				globalMap.put("schema_" + "tPostgresqlConnection_1", "public");

				globalMap.put("conn_" + "tPostgresqlConnection_1",
						conn_tPostgresqlConnection_1);

				/**
				 * [tPostgresqlConnection_1 begin ] stop
				 */

				/**
				 * [tPostgresqlConnection_1 main ] start
				 */

				currentComponent = "tPostgresqlConnection_1";

				tos_count_tPostgresqlConnection_1++;

				/**
				 * [tPostgresqlConnection_1 main ] stop
				 */

				/**
				 * [tPostgresqlConnection_1 process_data_begin ] start
				 */

				currentComponent = "tPostgresqlConnection_1";

				/**
				 * [tPostgresqlConnection_1 process_data_begin ] stop
				 */

				/**
				 * [tPostgresqlConnection_1 process_data_end ] start
				 */

				currentComponent = "tPostgresqlConnection_1";

				/**
				 * [tPostgresqlConnection_1 process_data_end ] stop
				 */

				/**
				 * [tPostgresqlConnection_1 end ] start
				 */

				currentComponent = "tPostgresqlConnection_1";

				ok_Hash.put("tPostgresqlConnection_1", true);
				end_Hash.put("tPostgresqlConnection_1",
						System.currentTimeMillis());

				/**
				 * [tPostgresqlConnection_1 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tPostgresqlConnection_1:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk2", 0, "ok");
			}

			tPostgresqlInput_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tPostgresqlConnection_1 finally ] start
				 */

				currentComponent = "tPostgresqlConnection_1";

				/**
				 * [tPostgresqlConnection_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostgresqlConnection_1_SUBPROCESS_STATE", 1);
	}

	public static class jovenes_accionStruct implements
			routines.system.IPersistableRow<jovenes_accionStruct> {
		final static byte[] commonByteArrayLock_DMINDICADORES_jovenes_accion_cruce_reporte_dos = new byte[0];
		static byte[] commonByteArray_DMINDICADORES_jovenes_accion_cruce_reporte_dos = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int consecutivo;

		public int getConsecutivo() {
			return this.consecutivo;
		}

		public int CODIGO_PROYECTO_SNIES;

		public int getCODIGO_PROYECTO_SNIES() {
			return this.CODIGO_PROYECTO_SNIES;
		}

		public String PROYECTO_SNIES;

		public String getPROYECTO_SNIES() {
			return this.PROYECTO_SNIES;
		}

		public Long codigo_estudiante;

		public Long getCodigo_estudiante() {
			return this.codigo_estudiante;
		}

		public String tipo_identificacion_estudiante;

		public String getTipo_identificacion_estudiante() {
			return this.tipo_identificacion_estudiante;
		}

		public Long numero_identificacion;

		public Long getNumero_identificacion() {
			return this.numero_identificacion;
		}

		public String primer_nombre;

		public String getPrimer_nombre() {
			return this.primer_nombre;
		}

		public String segundo_nombre;

		public String getSegundo_nombre() {
			return this.segundo_nombre;
		}

		public String primer_apellido;

		public String getPrimer_apellido() {
			return this.primer_apellido;
		}

		public String segundo_apellido;

		public String getSegundo_apellido() {
			return this.segundo_apellido;
		}

		public String sexo;

		public String getSexo() {
			return this.sexo;
		}

		public String fecha_nacimiento;

		public String getFecha_nacimiento() {
			return this.fecha_nacimiento;
		}

		public String municipio_estudio_joven;

		public String getMunicipio_estudio_joven() {
			return this.municipio_estudio_joven;
		}

		public String correo_electronico;

		public String getCorreo_electronico() {
			return this.correo_electronico;
		}

		public Long telefono_1;

		public Long getTelefono_1() {
			return this.telefono_1;
		}

		public String telefono_2;

		public String getTelefono_2() {
			return this.telefono_2;
		}

		public String periodo_academico_ingreso;

		public String getPeriodo_academico_ingreso() {
			return this.periodo_academico_ingreso;
		}

		public String promedio_periodo;

		public String getPromedio_periodo() {
			return this.promedio_periodo;
		}

		public Integer numero_periodos_cursados;

		public Integer getNumero_periodos_cursados() {
			return this.numero_periodos_cursados;
		}

		public String estado_estudiante;

		public String getEstado_estudiante() {
			return this.estado_estudiante;
		}

		public String joven_en_accion;

		public String getJoven_en_accion() {
			return this.joven_en_accion;
		}

		public String CODBENEFICIARIO;

		public String getCODBENEFICIARIO() {
			return this.CODBENEFICIARIO;
		}

		public String TIPO_DE_DOCUMENTO;

		public String getTIPO_DE_DOCUMENTO() {
			return this.TIPO_DE_DOCUMENTO;
		}

		public Long NUMERO_DE_DOCUMENTO;

		public Long getNUMERO_DE_DOCUMENTO() {
			return this.NUMERO_DE_DOCUMENTO;
		}

		public String PRIMER_NOMBRE;

		public String getPRIMER_NOMBRE() {
			return this.PRIMER_NOMBRE;
		}

		public String SEGUNDO_NOMBRE;

		public String getSEGUNDO_NOMBRE() {
			return this.SEGUNDO_NOMBRE;
		}

		public String PRIMER_APELLIDO;

		public String getPRIMER_APELLIDO() {
			return this.PRIMER_APELLIDO;
		}

		public String SEGUNDO_APELLIDO;

		public String getSEGUNDO_APELLIDO() {
			return this.SEGUNDO_APELLIDO;
		}

		public String CODIGOCONVENIO;

		public String getCODIGOCONVENIO() {
			return this.CODIGOCONVENIO;
		}

		public String NOMBRE_IES;

		public String getNOMBRE_IES() {
			return this.NOMBRE_IES;
		}

		public Double SNIESPROGRAMA;

		public Double getSNIESPROGRAMA() {
			return this.SNIESPROGRAMA;
		}

		public String INGRESO_DEL_PARTICIPANTE;

		public String getINGRESO_DEL_PARTICIPANTE() {
			return this.INGRESO_DEL_PARTICIPANTE;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.consecutivo;

				result = prime
						* result
						+ ((this.codigo_estudiante == null) ? 0
								: this.codigo_estudiante.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final jovenes_accionStruct other = (jovenes_accionStruct) obj;

			if (this.consecutivo != other.consecutivo)
				return false;

			if (this.codigo_estudiante == null) {
				if (other.codigo_estudiante != null)
					return false;

			} else if (!this.codigo_estudiante.equals(other.codigo_estudiante))

				return false;

			return true;
		}

		public void copyDataTo(jovenes_accionStruct other) {

			other.consecutivo = this.consecutivo;
			other.CODIGO_PROYECTO_SNIES = this.CODIGO_PROYECTO_SNIES;
			other.PROYECTO_SNIES = this.PROYECTO_SNIES;
			other.codigo_estudiante = this.codigo_estudiante;
			other.tipo_identificacion_estudiante = this.tipo_identificacion_estudiante;
			other.numero_identificacion = this.numero_identificacion;
			other.primer_nombre = this.primer_nombre;
			other.segundo_nombre = this.segundo_nombre;
			other.primer_apellido = this.primer_apellido;
			other.segundo_apellido = this.segundo_apellido;
			other.sexo = this.sexo;
			other.fecha_nacimiento = this.fecha_nacimiento;
			other.municipio_estudio_joven = this.municipio_estudio_joven;
			other.correo_electronico = this.correo_electronico;
			other.telefono_1 = this.telefono_1;
			other.telefono_2 = this.telefono_2;
			other.periodo_academico_ingreso = this.periodo_academico_ingreso;
			other.promedio_periodo = this.promedio_periodo;
			other.numero_periodos_cursados = this.numero_periodos_cursados;
			other.estado_estudiante = this.estado_estudiante;
			other.joven_en_accion = this.joven_en_accion;
			other.CODBENEFICIARIO = this.CODBENEFICIARIO;
			other.TIPO_DE_DOCUMENTO = this.TIPO_DE_DOCUMENTO;
			other.NUMERO_DE_DOCUMENTO = this.NUMERO_DE_DOCUMENTO;
			other.PRIMER_NOMBRE = this.PRIMER_NOMBRE;
			other.SEGUNDO_NOMBRE = this.SEGUNDO_NOMBRE;
			other.PRIMER_APELLIDO = this.PRIMER_APELLIDO;
			other.SEGUNDO_APELLIDO = this.SEGUNDO_APELLIDO;
			other.CODIGOCONVENIO = this.CODIGOCONVENIO;
			other.NOMBRE_IES = this.NOMBRE_IES;
			other.SNIESPROGRAMA = this.SNIESPROGRAMA;
			other.INGRESO_DEL_PARTICIPANTE = this.INGRESO_DEL_PARTICIPANTE;

		}

		public void copyKeysDataTo(jovenes_accionStruct other) {

			other.consecutivo = this.consecutivo;
			other.codigo_estudiante = this.codigo_estudiante;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DMINDICADORES_jovenes_accion_cruce_reporte_dos.length) {
					if (length < 1024
							&& commonByteArray_DMINDICADORES_jovenes_accion_cruce_reporte_dos.length == 0) {
						commonByteArray_DMINDICADORES_jovenes_accion_cruce_reporte_dos = new byte[1024];
					} else {
						commonByteArray_DMINDICADORES_jovenes_accion_cruce_reporte_dos = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_DMINDICADORES_jovenes_accion_cruce_reporte_dos,
						0, length);
				strReturn = new String(
						commonByteArray_DMINDICADORES_jovenes_accion_cruce_reporte_dos,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DMINDICADORES_jovenes_accion_cruce_reporte_dos) {

				try {

					int length = 0;

					this.consecutivo = dis.readInt();

					this.CODIGO_PROYECTO_SNIES = dis.readInt();

					this.PROYECTO_SNIES = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.codigo_estudiante = null;
					} else {
						this.codigo_estudiante = dis.readLong();
					}

					this.tipo_identificacion_estudiante = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.numero_identificacion = null;
					} else {
						this.numero_identificacion = dis.readLong();
					}

					this.primer_nombre = readString(dis);

					this.segundo_nombre = readString(dis);

					this.primer_apellido = readString(dis);

					this.segundo_apellido = readString(dis);

					this.sexo = readString(dis);

					this.fecha_nacimiento = readString(dis);

					this.municipio_estudio_joven = readString(dis);

					this.correo_electronico = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.telefono_1 = null;
					} else {
						this.telefono_1 = dis.readLong();
					}

					this.telefono_2 = readString(dis);

					this.periodo_academico_ingreso = readString(dis);

					this.promedio_periodo = readString(dis);

					this.numero_periodos_cursados = readInteger(dis);

					this.estado_estudiante = readString(dis);

					this.joven_en_accion = readString(dis);

					this.CODBENEFICIARIO = readString(dis);

					this.TIPO_DE_DOCUMENTO = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.NUMERO_DE_DOCUMENTO = null;
					} else {
						this.NUMERO_DE_DOCUMENTO = dis.readLong();
					}

					this.PRIMER_NOMBRE = readString(dis);

					this.SEGUNDO_NOMBRE = readString(dis);

					this.PRIMER_APELLIDO = readString(dis);

					this.SEGUNDO_APELLIDO = readString(dis);

					this.CODIGOCONVENIO = readString(dis);

					this.NOMBRE_IES = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.SNIESPROGRAMA = null;
					} else {
						this.SNIESPROGRAMA = dis.readDouble();
					}

					this.INGRESO_DEL_PARTICIPANTE = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.consecutivo);

				// int

				dos.writeInt(this.CODIGO_PROYECTO_SNIES);

				// String

				writeString(this.PROYECTO_SNIES, dos);

				// Long

				if (this.codigo_estudiante == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.codigo_estudiante);
				}

				// String

				writeString(this.tipo_identificacion_estudiante, dos);

				// Long

				if (this.numero_identificacion == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.numero_identificacion);
				}

				// String

				writeString(this.primer_nombre, dos);

				// String

				writeString(this.segundo_nombre, dos);

				// String

				writeString(this.primer_apellido, dos);

				// String

				writeString(this.segundo_apellido, dos);

				// String

				writeString(this.sexo, dos);

				// String

				writeString(this.fecha_nacimiento, dos);

				// String

				writeString(this.municipio_estudio_joven, dos);

				// String

				writeString(this.correo_electronico, dos);

				// Long

				if (this.telefono_1 == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.telefono_1);
				}

				// String

				writeString(this.telefono_2, dos);

				// String

				writeString(this.periodo_academico_ingreso, dos);

				// String

				writeString(this.promedio_periodo, dos);

				// Integer

				writeInteger(this.numero_periodos_cursados, dos);

				// String

				writeString(this.estado_estudiante, dos);

				// String

				writeString(this.joven_en_accion, dos);

				// String

				writeString(this.CODBENEFICIARIO, dos);

				// String

				writeString(this.TIPO_DE_DOCUMENTO, dos);

				// Long

				if (this.NUMERO_DE_DOCUMENTO == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.NUMERO_DE_DOCUMENTO);
				}

				// String

				writeString(this.PRIMER_NOMBRE, dos);

				// String

				writeString(this.SEGUNDO_NOMBRE, dos);

				// String

				writeString(this.PRIMER_APELLIDO, dos);

				// String

				writeString(this.SEGUNDO_APELLIDO, dos);

				// String

				writeString(this.CODIGOCONVENIO, dos);

				// String

				writeString(this.NOMBRE_IES, dos);

				// Double

				if (this.SNIESPROGRAMA == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.SNIESPROGRAMA);
				}

				// String

				writeString(this.INGRESO_DEL_PARTICIPANTE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("consecutivo=" + String.valueOf(consecutivo));
			sb.append(",CODIGO_PROYECTO_SNIES="
					+ String.valueOf(CODIGO_PROYECTO_SNIES));
			sb.append(",PROYECTO_SNIES=" + PROYECTO_SNIES);
			sb.append(",codigo_estudiante=" + String.valueOf(codigo_estudiante));
			sb.append(",tipo_identificacion_estudiante="
					+ tipo_identificacion_estudiante);
			sb.append(",numero_identificacion="
					+ String.valueOf(numero_identificacion));
			sb.append(",primer_nombre=" + primer_nombre);
			sb.append(",segundo_nombre=" + segundo_nombre);
			sb.append(",primer_apellido=" + primer_apellido);
			sb.append(",segundo_apellido=" + segundo_apellido);
			sb.append(",sexo=" + sexo);
			sb.append(",fecha_nacimiento=" + fecha_nacimiento);
			sb.append(",municipio_estudio_joven=" + municipio_estudio_joven);
			sb.append(",correo_electronico=" + correo_electronico);
			sb.append(",telefono_1=" + String.valueOf(telefono_1));
			sb.append(",telefono_2=" + telefono_2);
			sb.append(",periodo_academico_ingreso=" + periodo_academico_ingreso);
			sb.append(",promedio_periodo=" + promedio_periodo);
			sb.append(",numero_periodos_cursados="
					+ String.valueOf(numero_periodos_cursados));
			sb.append(",estado_estudiante=" + estado_estudiante);
			sb.append(",joven_en_accion=" + joven_en_accion);
			sb.append(",CODBENEFICIARIO=" + CODBENEFICIARIO);
			sb.append(",TIPO_DE_DOCUMENTO=" + TIPO_DE_DOCUMENTO);
			sb.append(",NUMERO_DE_DOCUMENTO="
					+ String.valueOf(NUMERO_DE_DOCUMENTO));
			sb.append(",PRIMER_NOMBRE=" + PRIMER_NOMBRE);
			sb.append(",SEGUNDO_NOMBRE=" + SEGUNDO_NOMBRE);
			sb.append(",PRIMER_APELLIDO=" + PRIMER_APELLIDO);
			sb.append(",SEGUNDO_APELLIDO=" + SEGUNDO_APELLIDO);
			sb.append(",CODIGOCONVENIO=" + CODIGOCONVENIO);
			sb.append(",NOMBRE_IES=" + NOMBRE_IES);
			sb.append(",SNIESPROGRAMA=" + String.valueOf(SNIESPROGRAMA));
			sb.append(",INGRESO_DEL_PARTICIPANTE=" + INGRESO_DEL_PARTICIPANTE);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(jovenes_accionStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.consecutivo,
					other.consecutivo);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.codigo_estudiante,
					other.codigo_estudiante);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row3Struct implements
			routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_DMINDICADORES_jovenes_accion_cruce_reporte_dos = new byte[0];
		static byte[] commonByteArray_DMINDICADORES_jovenes_accion_cruce_reporte_dos = new byte[0];

		public int consecutivo;

		public int getConsecutivo() {
			return this.consecutivo;
		}

		public int CODIGO_PROYECTO_SNIES;

		public int getCODIGO_PROYECTO_SNIES() {
			return this.CODIGO_PROYECTO_SNIES;
		}

		public String PROYECTO_SNIES;

		public String getPROYECTO_SNIES() {
			return this.PROYECTO_SNIES;
		}

		public Long codigo_estudiante;

		public Long getCodigo_estudiante() {
			return this.codigo_estudiante;
		}

		public String tipo_identificacion_estudiante;

		public String getTipo_identificacion_estudiante() {
			return this.tipo_identificacion_estudiante;
		}

		public Long numero_identificacion;

		public Long getNumero_identificacion() {
			return this.numero_identificacion;
		}

		public String primer_nombre;

		public String getPrimer_nombre() {
			return this.primer_nombre;
		}

		public String segundo_nombre;

		public String getSegundo_nombre() {
			return this.segundo_nombre;
		}

		public String primer_apellido;

		public String getPrimer_apellido() {
			return this.primer_apellido;
		}

		public String segundo_apellido;

		public String getSegundo_apellido() {
			return this.segundo_apellido;
		}

		public String sexo;

		public String getSexo() {
			return this.sexo;
		}

		public String fecha_nacimiento;

		public String getFecha_nacimiento() {
			return this.fecha_nacimiento;
		}

		public String municipio_estudio_joven;

		public String getMunicipio_estudio_joven() {
			return this.municipio_estudio_joven;
		}

		public String correo_electronico;

		public String getCorreo_electronico() {
			return this.correo_electronico;
		}

		public Long telefono_1;

		public Long getTelefono_1() {
			return this.telefono_1;
		}

		public String telefono_2;

		public String getTelefono_2() {
			return this.telefono_2;
		}

		public String periodo_academico_ingreso;

		public String getPeriodo_academico_ingreso() {
			return this.periodo_academico_ingreso;
		}

		public Double promedio_periodo;

		public Double getPromedio_periodo() {
			return this.promedio_periodo;
		}

		public Integer numero_periodos_cursados;

		public Integer getNumero_periodos_cursados() {
			return this.numero_periodos_cursados;
		}

		public String estado_estudiante;

		public String getEstado_estudiante() {
			return this.estado_estudiante;
		}

		public String joven_en_accion;

		public String getJoven_en_accion() {
			return this.joven_en_accion;
		}

		public String CODBENEFICIARIO;

		public String getCODBENEFICIARIO() {
			return this.CODBENEFICIARIO;
		}

		public String TIPO_DE_DOCUMENTO;

		public String getTIPO_DE_DOCUMENTO() {
			return this.TIPO_DE_DOCUMENTO;
		}

		public Long NUMERO_DE_DOCUMENTO;

		public Long getNUMERO_DE_DOCUMENTO() {
			return this.NUMERO_DE_DOCUMENTO;
		}

		public String PRIMER_NOMBRE;

		public String getPRIMER_NOMBRE() {
			return this.PRIMER_NOMBRE;
		}

		public String SEGUNDO_NOMBRE;

		public String getSEGUNDO_NOMBRE() {
			return this.SEGUNDO_NOMBRE;
		}

		public String PRIMER_APELLIDO;

		public String getPRIMER_APELLIDO() {
			return this.PRIMER_APELLIDO;
		}

		public String SEGUNDO_APELLIDO;

		public String getSEGUNDO_APELLIDO() {
			return this.SEGUNDO_APELLIDO;
		}

		public String CODIGOCONVENIO;

		public String getCODIGOCONVENIO() {
			return this.CODIGOCONVENIO;
		}

		public String NOMBRE_IES;

		public String getNOMBRE_IES() {
			return this.NOMBRE_IES;
		}

		public Double SNIESPROGRAMA;

		public Double getSNIESPROGRAMA() {
			return this.SNIESPROGRAMA;
		}

		public String INGRESO_DEL_PARTICIPANTE;

		public String getINGRESO_DEL_PARTICIPANTE() {
			return this.INGRESO_DEL_PARTICIPANTE;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DMINDICADORES_jovenes_accion_cruce_reporte_dos.length) {
					if (length < 1024
							&& commonByteArray_DMINDICADORES_jovenes_accion_cruce_reporte_dos.length == 0) {
						commonByteArray_DMINDICADORES_jovenes_accion_cruce_reporte_dos = new byte[1024];
					} else {
						commonByteArray_DMINDICADORES_jovenes_accion_cruce_reporte_dos = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_DMINDICADORES_jovenes_accion_cruce_reporte_dos,
						0, length);
				strReturn = new String(
						commonByteArray_DMINDICADORES_jovenes_accion_cruce_reporte_dos,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DMINDICADORES_jovenes_accion_cruce_reporte_dos) {

				try {

					int length = 0;

					this.consecutivo = dis.readInt();

					this.CODIGO_PROYECTO_SNIES = dis.readInt();

					this.PROYECTO_SNIES = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.codigo_estudiante = null;
					} else {
						this.codigo_estudiante = dis.readLong();
					}

					this.tipo_identificacion_estudiante = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.numero_identificacion = null;
					} else {
						this.numero_identificacion = dis.readLong();
					}

					this.primer_nombre = readString(dis);

					this.segundo_nombre = readString(dis);

					this.primer_apellido = readString(dis);

					this.segundo_apellido = readString(dis);

					this.sexo = readString(dis);

					this.fecha_nacimiento = readString(dis);

					this.municipio_estudio_joven = readString(dis);

					this.correo_electronico = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.telefono_1 = null;
					} else {
						this.telefono_1 = dis.readLong();
					}

					this.telefono_2 = readString(dis);

					this.periodo_academico_ingreso = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.promedio_periodo = null;
					} else {
						this.promedio_periodo = dis.readDouble();
					}

					this.numero_periodos_cursados = readInteger(dis);

					this.estado_estudiante = readString(dis);

					this.joven_en_accion = readString(dis);

					this.CODBENEFICIARIO = readString(dis);

					this.TIPO_DE_DOCUMENTO = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.NUMERO_DE_DOCUMENTO = null;
					} else {
						this.NUMERO_DE_DOCUMENTO = dis.readLong();
					}

					this.PRIMER_NOMBRE = readString(dis);

					this.SEGUNDO_NOMBRE = readString(dis);

					this.PRIMER_APELLIDO = readString(dis);

					this.SEGUNDO_APELLIDO = readString(dis);

					this.CODIGOCONVENIO = readString(dis);

					this.NOMBRE_IES = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.SNIESPROGRAMA = null;
					} else {
						this.SNIESPROGRAMA = dis.readDouble();
					}

					this.INGRESO_DEL_PARTICIPANTE = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.consecutivo);

				// int

				dos.writeInt(this.CODIGO_PROYECTO_SNIES);

				// String

				writeString(this.PROYECTO_SNIES, dos);

				// Long

				if (this.codigo_estudiante == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.codigo_estudiante);
				}

				// String

				writeString(this.tipo_identificacion_estudiante, dos);

				// Long

				if (this.numero_identificacion == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.numero_identificacion);
				}

				// String

				writeString(this.primer_nombre, dos);

				// String

				writeString(this.segundo_nombre, dos);

				// String

				writeString(this.primer_apellido, dos);

				// String

				writeString(this.segundo_apellido, dos);

				// String

				writeString(this.sexo, dos);

				// String

				writeString(this.fecha_nacimiento, dos);

				// String

				writeString(this.municipio_estudio_joven, dos);

				// String

				writeString(this.correo_electronico, dos);

				// Long

				if (this.telefono_1 == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.telefono_1);
				}

				// String

				writeString(this.telefono_2, dos);

				// String

				writeString(this.periodo_academico_ingreso, dos);

				// Double

				if (this.promedio_periodo == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.promedio_periodo);
				}

				// Integer

				writeInteger(this.numero_periodos_cursados, dos);

				// String

				writeString(this.estado_estudiante, dos);

				// String

				writeString(this.joven_en_accion, dos);

				// String

				writeString(this.CODBENEFICIARIO, dos);

				// String

				writeString(this.TIPO_DE_DOCUMENTO, dos);

				// Long

				if (this.NUMERO_DE_DOCUMENTO == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.NUMERO_DE_DOCUMENTO);
				}

				// String

				writeString(this.PRIMER_NOMBRE, dos);

				// String

				writeString(this.SEGUNDO_NOMBRE, dos);

				// String

				writeString(this.PRIMER_APELLIDO, dos);

				// String

				writeString(this.SEGUNDO_APELLIDO, dos);

				// String

				writeString(this.CODIGOCONVENIO, dos);

				// String

				writeString(this.NOMBRE_IES, dos);

				// Double

				if (this.SNIESPROGRAMA == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.SNIESPROGRAMA);
				}

				// String

				writeString(this.INGRESO_DEL_PARTICIPANTE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("consecutivo=" + String.valueOf(consecutivo));
			sb.append(",CODIGO_PROYECTO_SNIES="
					+ String.valueOf(CODIGO_PROYECTO_SNIES));
			sb.append(",PROYECTO_SNIES=" + PROYECTO_SNIES);
			sb.append(",codigo_estudiante=" + String.valueOf(codigo_estudiante));
			sb.append(",tipo_identificacion_estudiante="
					+ tipo_identificacion_estudiante);
			sb.append(",numero_identificacion="
					+ String.valueOf(numero_identificacion));
			sb.append(",primer_nombre=" + primer_nombre);
			sb.append(",segundo_nombre=" + segundo_nombre);
			sb.append(",primer_apellido=" + primer_apellido);
			sb.append(",segundo_apellido=" + segundo_apellido);
			sb.append(",sexo=" + sexo);
			sb.append(",fecha_nacimiento=" + fecha_nacimiento);
			sb.append(",municipio_estudio_joven=" + municipio_estudio_joven);
			sb.append(",correo_electronico=" + correo_electronico);
			sb.append(",telefono_1=" + String.valueOf(telefono_1));
			sb.append(",telefono_2=" + telefono_2);
			sb.append(",periodo_academico_ingreso=" + periodo_academico_ingreso);
			sb.append(",promedio_periodo=" + String.valueOf(promedio_periodo));
			sb.append(",numero_periodos_cursados="
					+ String.valueOf(numero_periodos_cursados));
			sb.append(",estado_estudiante=" + estado_estudiante);
			sb.append(",joven_en_accion=" + joven_en_accion);
			sb.append(",CODBENEFICIARIO=" + CODBENEFICIARIO);
			sb.append(",TIPO_DE_DOCUMENTO=" + TIPO_DE_DOCUMENTO);
			sb.append(",NUMERO_DE_DOCUMENTO="
					+ String.valueOf(NUMERO_DE_DOCUMENTO));
			sb.append(",PRIMER_NOMBRE=" + PRIMER_NOMBRE);
			sb.append(",SEGUNDO_NOMBRE=" + SEGUNDO_NOMBRE);
			sb.append(",PRIMER_APELLIDO=" + PRIMER_APELLIDO);
			sb.append(",SEGUNDO_APELLIDO=" + SEGUNDO_APELLIDO);
			sb.append(",CODIGOCONVENIO=" + CODIGOCONVENIO);
			sb.append(",NOMBRE_IES=" + NOMBRE_IES);
			sb.append(",SNIESPROGRAMA=" + String.valueOf(SNIESPROGRAMA));
			sb.append(",INGRESO_DEL_PARTICIPANTE=" + INGRESO_DEL_PARTICIPANTE);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tPostgresqlInput_1Struct implements
			routines.system.IPersistableRow<after_tPostgresqlInput_1Struct> {
		final static byte[] commonByteArrayLock_DMINDICADORES_jovenes_accion_cruce_reporte_dos = new byte[0];
		static byte[] commonByteArray_DMINDICADORES_jovenes_accion_cruce_reporte_dos = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int consecutivo;

		public int getConsecutivo() {
			return this.consecutivo;
		}

		public int CODIGO_PROYECTO_SNIES;

		public int getCODIGO_PROYECTO_SNIES() {
			return this.CODIGO_PROYECTO_SNIES;
		}

		public String PROYECTO_SNIES;

		public String getPROYECTO_SNIES() {
			return this.PROYECTO_SNIES;
		}

		public Long codigo_estudiante;

		public Long getCodigo_estudiante() {
			return this.codigo_estudiante;
		}

		public String tipo_identificacion_estudiante;

		public String getTipo_identificacion_estudiante() {
			return this.tipo_identificacion_estudiante;
		}

		public Long numero_identificacion;

		public Long getNumero_identificacion() {
			return this.numero_identificacion;
		}

		public String primer_nombre;

		public String getPrimer_nombre() {
			return this.primer_nombre;
		}

		public String segundo_nombre;

		public String getSegundo_nombre() {
			return this.segundo_nombre;
		}

		public String primer_apellido;

		public String getPrimer_apellido() {
			return this.primer_apellido;
		}

		public String segundo_apellido;

		public String getSegundo_apellido() {
			return this.segundo_apellido;
		}

		public String sexo;

		public String getSexo() {
			return this.sexo;
		}

		public String fecha_nacimiento;

		public String getFecha_nacimiento() {
			return this.fecha_nacimiento;
		}

		public String municipio_estudio_joven;

		public String getMunicipio_estudio_joven() {
			return this.municipio_estudio_joven;
		}

		public String correo_electronico;

		public String getCorreo_electronico() {
			return this.correo_electronico;
		}

		public Long telefono_1;

		public Long getTelefono_1() {
			return this.telefono_1;
		}

		public String telefono_2;

		public String getTelefono_2() {
			return this.telefono_2;
		}

		public String periodo_academico_ingreso;

		public String getPeriodo_academico_ingreso() {
			return this.periodo_academico_ingreso;
		}

		public Double promedio_periodo;

		public Double getPromedio_periodo() {
			return this.promedio_periodo;
		}

		public Integer numero_periodos_cursados;

		public Integer getNumero_periodos_cursados() {
			return this.numero_periodos_cursados;
		}

		public String estado_estudiante;

		public String getEstado_estudiante() {
			return this.estado_estudiante;
		}

		public String joven_en_accion;

		public String getJoven_en_accion() {
			return this.joven_en_accion;
		}

		public String CODBENEFICIARIO;

		public String getCODBENEFICIARIO() {
			return this.CODBENEFICIARIO;
		}

		public String TIPO_DE_DOCUMENTO;

		public String getTIPO_DE_DOCUMENTO() {
			return this.TIPO_DE_DOCUMENTO;
		}

		public Long NUMERO_DE_DOCUMENTO;

		public Long getNUMERO_DE_DOCUMENTO() {
			return this.NUMERO_DE_DOCUMENTO;
		}

		public String PRIMER_NOMBRE;

		public String getPRIMER_NOMBRE() {
			return this.PRIMER_NOMBRE;
		}

		public String SEGUNDO_NOMBRE;

		public String getSEGUNDO_NOMBRE() {
			return this.SEGUNDO_NOMBRE;
		}

		public String PRIMER_APELLIDO;

		public String getPRIMER_APELLIDO() {
			return this.PRIMER_APELLIDO;
		}

		public String SEGUNDO_APELLIDO;

		public String getSEGUNDO_APELLIDO() {
			return this.SEGUNDO_APELLIDO;
		}

		public String CODIGOCONVENIO;

		public String getCODIGOCONVENIO() {
			return this.CODIGOCONVENIO;
		}

		public String NOMBRE_IES;

		public String getNOMBRE_IES() {
			return this.NOMBRE_IES;
		}

		public Double SNIESPROGRAMA;

		public Double getSNIESPROGRAMA() {
			return this.SNIESPROGRAMA;
		}

		public String INGRESO_DEL_PARTICIPANTE;

		public String getINGRESO_DEL_PARTICIPANTE() {
			return this.INGRESO_DEL_PARTICIPANTE;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.consecutivo;

				result = prime
						* result
						+ ((this.codigo_estudiante == null) ? 0
								: this.codigo_estudiante.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final after_tPostgresqlInput_1Struct other = (after_tPostgresqlInput_1Struct) obj;

			if (this.consecutivo != other.consecutivo)
				return false;

			if (this.codigo_estudiante == null) {
				if (other.codigo_estudiante != null)
					return false;

			} else if (!this.codigo_estudiante.equals(other.codigo_estudiante))

				return false;

			return true;
		}

		public void copyDataTo(after_tPostgresqlInput_1Struct other) {

			other.consecutivo = this.consecutivo;
			other.CODIGO_PROYECTO_SNIES = this.CODIGO_PROYECTO_SNIES;
			other.PROYECTO_SNIES = this.PROYECTO_SNIES;
			other.codigo_estudiante = this.codigo_estudiante;
			other.tipo_identificacion_estudiante = this.tipo_identificacion_estudiante;
			other.numero_identificacion = this.numero_identificacion;
			other.primer_nombre = this.primer_nombre;
			other.segundo_nombre = this.segundo_nombre;
			other.primer_apellido = this.primer_apellido;
			other.segundo_apellido = this.segundo_apellido;
			other.sexo = this.sexo;
			other.fecha_nacimiento = this.fecha_nacimiento;
			other.municipio_estudio_joven = this.municipio_estudio_joven;
			other.correo_electronico = this.correo_electronico;
			other.telefono_1 = this.telefono_1;
			other.telefono_2 = this.telefono_2;
			other.periodo_academico_ingreso = this.periodo_academico_ingreso;
			other.promedio_periodo = this.promedio_periodo;
			other.numero_periodos_cursados = this.numero_periodos_cursados;
			other.estado_estudiante = this.estado_estudiante;
			other.joven_en_accion = this.joven_en_accion;
			other.CODBENEFICIARIO = this.CODBENEFICIARIO;
			other.TIPO_DE_DOCUMENTO = this.TIPO_DE_DOCUMENTO;
			other.NUMERO_DE_DOCUMENTO = this.NUMERO_DE_DOCUMENTO;
			other.PRIMER_NOMBRE = this.PRIMER_NOMBRE;
			other.SEGUNDO_NOMBRE = this.SEGUNDO_NOMBRE;
			other.PRIMER_APELLIDO = this.PRIMER_APELLIDO;
			other.SEGUNDO_APELLIDO = this.SEGUNDO_APELLIDO;
			other.CODIGOCONVENIO = this.CODIGOCONVENIO;
			other.NOMBRE_IES = this.NOMBRE_IES;
			other.SNIESPROGRAMA = this.SNIESPROGRAMA;
			other.INGRESO_DEL_PARTICIPANTE = this.INGRESO_DEL_PARTICIPANTE;

		}

		public void copyKeysDataTo(after_tPostgresqlInput_1Struct other) {

			other.consecutivo = this.consecutivo;
			other.codigo_estudiante = this.codigo_estudiante;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DMINDICADORES_jovenes_accion_cruce_reporte_dos.length) {
					if (length < 1024
							&& commonByteArray_DMINDICADORES_jovenes_accion_cruce_reporte_dos.length == 0) {
						commonByteArray_DMINDICADORES_jovenes_accion_cruce_reporte_dos = new byte[1024];
					} else {
						commonByteArray_DMINDICADORES_jovenes_accion_cruce_reporte_dos = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_DMINDICADORES_jovenes_accion_cruce_reporte_dos,
						0, length);
				strReturn = new String(
						commonByteArray_DMINDICADORES_jovenes_accion_cruce_reporte_dos,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DMINDICADORES_jovenes_accion_cruce_reporte_dos) {

				try {

					int length = 0;

					this.consecutivo = dis.readInt();

					this.CODIGO_PROYECTO_SNIES = dis.readInt();

					this.PROYECTO_SNIES = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.codigo_estudiante = null;
					} else {
						this.codigo_estudiante = dis.readLong();
					}

					this.tipo_identificacion_estudiante = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.numero_identificacion = null;
					} else {
						this.numero_identificacion = dis.readLong();
					}

					this.primer_nombre = readString(dis);

					this.segundo_nombre = readString(dis);

					this.primer_apellido = readString(dis);

					this.segundo_apellido = readString(dis);

					this.sexo = readString(dis);

					this.fecha_nacimiento = readString(dis);

					this.municipio_estudio_joven = readString(dis);

					this.correo_electronico = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.telefono_1 = null;
					} else {
						this.telefono_1 = dis.readLong();
					}

					this.telefono_2 = readString(dis);

					this.periodo_academico_ingreso = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.promedio_periodo = null;
					} else {
						this.promedio_periodo = dis.readDouble();
					}

					this.numero_periodos_cursados = readInteger(dis);

					this.estado_estudiante = readString(dis);

					this.joven_en_accion = readString(dis);

					this.CODBENEFICIARIO = readString(dis);

					this.TIPO_DE_DOCUMENTO = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.NUMERO_DE_DOCUMENTO = null;
					} else {
						this.NUMERO_DE_DOCUMENTO = dis.readLong();
					}

					this.PRIMER_NOMBRE = readString(dis);

					this.SEGUNDO_NOMBRE = readString(dis);

					this.PRIMER_APELLIDO = readString(dis);

					this.SEGUNDO_APELLIDO = readString(dis);

					this.CODIGOCONVENIO = readString(dis);

					this.NOMBRE_IES = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.SNIESPROGRAMA = null;
					} else {
						this.SNIESPROGRAMA = dis.readDouble();
					}

					this.INGRESO_DEL_PARTICIPANTE = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.consecutivo);

				// int

				dos.writeInt(this.CODIGO_PROYECTO_SNIES);

				// String

				writeString(this.PROYECTO_SNIES, dos);

				// Long

				if (this.codigo_estudiante == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.codigo_estudiante);
				}

				// String

				writeString(this.tipo_identificacion_estudiante, dos);

				// Long

				if (this.numero_identificacion == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.numero_identificacion);
				}

				// String

				writeString(this.primer_nombre, dos);

				// String

				writeString(this.segundo_nombre, dos);

				// String

				writeString(this.primer_apellido, dos);

				// String

				writeString(this.segundo_apellido, dos);

				// String

				writeString(this.sexo, dos);

				// String

				writeString(this.fecha_nacimiento, dos);

				// String

				writeString(this.municipio_estudio_joven, dos);

				// String

				writeString(this.correo_electronico, dos);

				// Long

				if (this.telefono_1 == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.telefono_1);
				}

				// String

				writeString(this.telefono_2, dos);

				// String

				writeString(this.periodo_academico_ingreso, dos);

				// Double

				if (this.promedio_periodo == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.promedio_periodo);
				}

				// Integer

				writeInteger(this.numero_periodos_cursados, dos);

				// String

				writeString(this.estado_estudiante, dos);

				// String

				writeString(this.joven_en_accion, dos);

				// String

				writeString(this.CODBENEFICIARIO, dos);

				// String

				writeString(this.TIPO_DE_DOCUMENTO, dos);

				// Long

				if (this.NUMERO_DE_DOCUMENTO == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.NUMERO_DE_DOCUMENTO);
				}

				// String

				writeString(this.PRIMER_NOMBRE, dos);

				// String

				writeString(this.SEGUNDO_NOMBRE, dos);

				// String

				writeString(this.PRIMER_APELLIDO, dos);

				// String

				writeString(this.SEGUNDO_APELLIDO, dos);

				// String

				writeString(this.CODIGOCONVENIO, dos);

				// String

				writeString(this.NOMBRE_IES, dos);

				// Double

				if (this.SNIESPROGRAMA == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.SNIESPROGRAMA);
				}

				// String

				writeString(this.INGRESO_DEL_PARTICIPANTE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("consecutivo=" + String.valueOf(consecutivo));
			sb.append(",CODIGO_PROYECTO_SNIES="
					+ String.valueOf(CODIGO_PROYECTO_SNIES));
			sb.append(",PROYECTO_SNIES=" + PROYECTO_SNIES);
			sb.append(",codigo_estudiante=" + String.valueOf(codigo_estudiante));
			sb.append(",tipo_identificacion_estudiante="
					+ tipo_identificacion_estudiante);
			sb.append(",numero_identificacion="
					+ String.valueOf(numero_identificacion));
			sb.append(",primer_nombre=" + primer_nombre);
			sb.append(",segundo_nombre=" + segundo_nombre);
			sb.append(",primer_apellido=" + primer_apellido);
			sb.append(",segundo_apellido=" + segundo_apellido);
			sb.append(",sexo=" + sexo);
			sb.append(",fecha_nacimiento=" + fecha_nacimiento);
			sb.append(",municipio_estudio_joven=" + municipio_estudio_joven);
			sb.append(",correo_electronico=" + correo_electronico);
			sb.append(",telefono_1=" + String.valueOf(telefono_1));
			sb.append(",telefono_2=" + telefono_2);
			sb.append(",periodo_academico_ingreso=" + periodo_academico_ingreso);
			sb.append(",promedio_periodo=" + String.valueOf(promedio_periodo));
			sb.append(",numero_periodos_cursados="
					+ String.valueOf(numero_periodos_cursados));
			sb.append(",estado_estudiante=" + estado_estudiante);
			sb.append(",joven_en_accion=" + joven_en_accion);
			sb.append(",CODBENEFICIARIO=" + CODBENEFICIARIO);
			sb.append(",TIPO_DE_DOCUMENTO=" + TIPO_DE_DOCUMENTO);
			sb.append(",NUMERO_DE_DOCUMENTO="
					+ String.valueOf(NUMERO_DE_DOCUMENTO));
			sb.append(",PRIMER_NOMBRE=" + PRIMER_NOMBRE);
			sb.append(",SEGUNDO_NOMBRE=" + SEGUNDO_NOMBRE);
			sb.append(",PRIMER_APELLIDO=" + PRIMER_APELLIDO);
			sb.append(",SEGUNDO_APELLIDO=" + SEGUNDO_APELLIDO);
			sb.append(",CODIGOCONVENIO=" + CODIGOCONVENIO);
			sb.append(",NOMBRE_IES=" + NOMBRE_IES);
			sb.append(",SNIESPROGRAMA=" + String.valueOf(SNIESPROGRAMA));
			sb.append(",INGRESO_DEL_PARTICIPANTE=" + INGRESO_DEL_PARTICIPANTE);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tPostgresqlInput_1Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.consecutivo,
					other.consecutivo);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.codigo_estudiante,
					other.codigo_estudiante);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tPostgresqlInput_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				tOracleInput_1Process(globalMap);

				row3Struct row3 = new row3Struct();
				jovenes_accionStruct jovenes_accion = new jovenes_accionStruct();

				/**
				 * [tPostgresqlOutput_1 begin ] start
				 */

				ok_Hash.put("tPostgresqlOutput_1", false);
				start_Hash.put("tPostgresqlOutput_1",
						System.currentTimeMillis());

				currentComponent = "tPostgresqlOutput_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("jovenes_accion"
								+ iterateId, 0, 0);

					}
				}

				int tos_count_tPostgresqlOutput_1 = 0;

				String dbschema_tPostgresqlOutput_1 = null;
				dbschema_tPostgresqlOutput_1 = (String) globalMap.get("schema_"
						+ "tPostgresqlConnection_1");

				String tableName_tPostgresqlOutput_1 = null;
				if (dbschema_tPostgresqlOutput_1 == null
						|| dbschema_tPostgresqlOutput_1.trim().length() == 0) {
					tableName_tPostgresqlOutput_1 = "jovenes_accion_20181_promedio_dos";
				} else {
					tableName_tPostgresqlOutput_1 = dbschema_tPostgresqlOutput_1
							+ "\".\"" + "jovenes_accion_20181_promedio_dos";
				}

				int nb_line_tPostgresqlOutput_1 = 0;
				int nb_line_update_tPostgresqlOutput_1 = 0;
				int nb_line_inserted_tPostgresqlOutput_1 = 0;
				int nb_line_deleted_tPostgresqlOutput_1 = 0;
				int nb_line_rejected_tPostgresqlOutput_1 = 0;

				int deletedCount_tPostgresqlOutput_1 = 0;
				int updatedCount_tPostgresqlOutput_1 = 0;
				int insertedCount_tPostgresqlOutput_1 = 0;
				int rejectedCount_tPostgresqlOutput_1 = 0;

				boolean whetherReject_tPostgresqlOutput_1 = false;

				java.sql.Connection conn_tPostgresqlOutput_1 = null;
				String dbUser_tPostgresqlOutput_1 = null;

				conn_tPostgresqlOutput_1 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_1");

				int count_tPostgresqlOutput_1 = 0;
				java.sql.DatabaseMetaData dbMetaData_tPostgresqlOutput_1 = conn_tPostgresqlOutput_1
						.getMetaData();
				boolean whetherExist_tPostgresqlOutput_1 = false;
				try (java.sql.ResultSet rsTable_tPostgresqlOutput_1 = dbMetaData_tPostgresqlOutput_1
						.getTables(null, null, null, new String[] { "TABLE" })) {
					String defaultSchema_tPostgresqlOutput_1 = "public";
					if (dbschema_tPostgresqlOutput_1 == null
							|| dbschema_tPostgresqlOutput_1.trim().length() == 0) {
						try (java.sql.Statement stmtSchema_tPostgresqlOutput_1 = conn_tPostgresqlOutput_1
								.createStatement();
								java.sql.ResultSet rsSchema_tPostgresqlOutput_1 = stmtSchema_tPostgresqlOutput_1
										.executeQuery("select current_schema() ")) {
							while (rsSchema_tPostgresqlOutput_1.next()) {
								defaultSchema_tPostgresqlOutput_1 = rsSchema_tPostgresqlOutput_1
										.getString("current_schema");
							}
						}
					}
					while (rsTable_tPostgresqlOutput_1.next()) {
						String table_tPostgresqlOutput_1 = rsTable_tPostgresqlOutput_1
								.getString("TABLE_NAME");
						String schema_tPostgresqlOutput_1 = rsTable_tPostgresqlOutput_1
								.getString("TABLE_SCHEM");
						if (table_tPostgresqlOutput_1
								.equals("jovenes_accion_20181_promedio_dos")
								&& (schema_tPostgresqlOutput_1
										.equals(dbschema_tPostgresqlOutput_1) || ((dbschema_tPostgresqlOutput_1 == null || dbschema_tPostgresqlOutput_1
										.trim().length() == 0) && defaultSchema_tPostgresqlOutput_1
										.equals(schema_tPostgresqlOutput_1)))) {
							whetherExist_tPostgresqlOutput_1 = true;
							break;
						}
					}
				}
				if (whetherExist_tPostgresqlOutput_1) {
					try (java.sql.Statement stmtDrop_tPostgresqlOutput_1 = conn_tPostgresqlOutput_1
							.createStatement()) {
						stmtDrop_tPostgresqlOutput_1.execute("DROP TABLE \""
								+ tableName_tPostgresqlOutput_1 + "\"");
					}
				}
				try (java.sql.Statement stmtCreate_tPostgresqlOutput_1 = conn_tPostgresqlOutput_1
						.createStatement()) {
					stmtCreate_tPostgresqlOutput_1
							.execute("CREATE TABLE \""
									+ tableName_tPostgresqlOutput_1
									+ "\"(\"consecutivo\" INT4  not null ,\"CODIGO_PROYECTO_SNIES\" INT4  not null ,\"PROYECTO_SNIES\" VARCHAR(100)  ,\"codigo_estudiante\" INT8 ,\"tipo_identificacion_estudiante\" VARCHAR(2)  ,\"numero_identificacion\" INT8 ,\"primer_nombre\" VARCHAR(50)  ,\"segundo_nombre\" VARCHAR(50)  ,\"primer_apellido\" VARCHAR(50)  ,\"segundo_apellido\" VARCHAR(50)  ,\"sexo\" VARCHAR(1)  ,\"fecha_nacimiento\" VARCHAR(12)  ,\"municipio_estudio_joven\" VARCHAR(5)  ,\"correo_electronico\" VARCHAR(50)  ,\"telefono_1\" INT8 ,\"telefono_2\" VARCHAR(30)  ,\"periodo_academico_ingreso\" VARCHAR(10)  ,\"promedio_periodo\" VARCHAR(17)  ,\"numero_periodos_cursados\" INT4 ,\"estado_estudiante\" VARCHAR(12)  ,\"joven_en_accion\" VARCHAR(20)  ,\"CODBENEFICIARIO\" VARCHAR(20)  ,\"TIPO DE DOCUMENTO\" VARCHAR(20)  ,\"NUMERO DE DOCUMENTO\" INT8 ,\"PRIMER NOMBRE\" VARCHAR(22)  ,\"SEGUNDO NOMBRE\" VARCHAR(18)  ,\"PRIMER APELLIDO\" VARCHAR(12)  ,\"SEGUNDO APELLIDO\" VARCHAR(12)  ,\"CODIGOCONVENIO\" VARCHAR(8)  ,\"NOMBRE IES\" VARCHAR(46)  ,\"SNIESPROGRAMA\" FLOAT8 ,\"INGRESO DEL PARTICIPANTE\" VARCHAR(24)  ,primary key(\"consecutivo\",\"codigo_estudiante\"))");
				}
				String insert_tPostgresqlOutput_1 = "INSERT INTO \""
						+ tableName_tPostgresqlOutput_1
						+ "\" (\"consecutivo\",\"CODIGO_PROYECTO_SNIES\",\"PROYECTO_SNIES\",\"codigo_estudiante\",\"tipo_identificacion_estudiante\",\"numero_identificacion\",\"primer_nombre\",\"segundo_nombre\",\"primer_apellido\",\"segundo_apellido\",\"sexo\",\"fecha_nacimiento\",\"municipio_estudio_joven\",\"correo_electronico\",\"telefono_1\",\"telefono_2\",\"periodo_academico_ingreso\",\"promedio_periodo\",\"numero_periodos_cursados\",\"estado_estudiante\",\"joven_en_accion\",\"CODBENEFICIARIO\",\"TIPO DE DOCUMENTO\",\"NUMERO DE DOCUMENTO\",\"PRIMER NOMBRE\",\"SEGUNDO NOMBRE\",\"PRIMER APELLIDO\",\"SEGUNDO APELLIDO\",\"CODIGOCONVENIO\",\"NOMBRE IES\",\"SNIESPROGRAMA\",\"INGRESO DEL PARTICIPANTE\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tPostgresqlOutput_1 = conn_tPostgresqlOutput_1
						.prepareStatement(insert_tPostgresqlOutput_1);
				resourceMap.put("pstmt_tPostgresqlOutput_1",
						pstmt_tPostgresqlOutput_1);

				/**
				 * [tPostgresqlOutput_1 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row3" + iterateId, 0, 0);

					}
				}

				int tos_count_tMap_1 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) globalMap
						.get("tHash_Lookup_row2"));

				row2Struct row2HashKey = new row2Struct();
				row2Struct row2Default = new row2Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				jovenes_accionStruct jovenes_accion_tmp = new jovenes_accionStruct();
				// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tPostgresqlInput_1 begin ] start
				 */

				ok_Hash.put("tPostgresqlInput_1", false);
				start_Hash
						.put("tPostgresqlInput_1", System.currentTimeMillis());

				currentComponent = "tPostgresqlInput_1";

				int tos_count_tPostgresqlInput_1 = 0;

				int nb_line_tPostgresqlInput_1 = 0;
				java.sql.Connection conn_tPostgresqlInput_1 = null;
				conn_tPostgresqlInput_1 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_1");

				java.sql.Statement stmt_tPostgresqlInput_1 = conn_tPostgresqlInput_1
						.createStatement();

				String dbquery_tPostgresqlInput_1 = "SELECT *\n  FROM matriculados_jovenes_accion_20181";

				globalMap.put("tPostgresqlInput_1_QUERY",
						dbquery_tPostgresqlInput_1);
				java.sql.ResultSet rs_tPostgresqlInput_1 = null;

				try {
					rs_tPostgresqlInput_1 = stmt_tPostgresqlInput_1
							.executeQuery(dbquery_tPostgresqlInput_1);
					java.sql.ResultSetMetaData rsmd_tPostgresqlInput_1 = rs_tPostgresqlInput_1
							.getMetaData();
					int colQtyInRs_tPostgresqlInput_1 = rsmd_tPostgresqlInput_1
							.getColumnCount();

					String tmpContent_tPostgresqlInput_1 = null;

					while (rs_tPostgresqlInput_1.next()) {
						nb_line_tPostgresqlInput_1++;

						if (colQtyInRs_tPostgresqlInput_1 < 1) {
							row3.consecutivo = 0;
						} else {

							if (rs_tPostgresqlInput_1.getObject(1) != null) {
								row3.consecutivo = rs_tPostgresqlInput_1
										.getInt(1);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tPostgresqlInput_1 < 2) {
							row3.CODIGO_PROYECTO_SNIES = 0;
						} else {

							if (rs_tPostgresqlInput_1.getObject(2) != null) {
								row3.CODIGO_PROYECTO_SNIES = rs_tPostgresqlInput_1
										.getInt(2);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tPostgresqlInput_1 < 3) {
							row3.PROYECTO_SNIES = null;
						} else {

							row3.PROYECTO_SNIES = routines.system.JDBCUtil
									.getString(rs_tPostgresqlInput_1, 3, false);
						}
						if (colQtyInRs_tPostgresqlInput_1 < 4) {
							row3.codigo_estudiante = null;
						} else {

							if (rs_tPostgresqlInput_1.getObject(4) != null) {
								row3.codigo_estudiante = rs_tPostgresqlInput_1
										.getLong(4);
							} else {
								row3.codigo_estudiante = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_1 < 5) {
							row3.tipo_identificacion_estudiante = null;
						} else {

							row3.tipo_identificacion_estudiante = routines.system.JDBCUtil
									.getString(rs_tPostgresqlInput_1, 5, false);
						}
						if (colQtyInRs_tPostgresqlInput_1 < 6) {
							row3.numero_identificacion = null;
						} else {

							if (rs_tPostgresqlInput_1.getObject(6) != null) {
								row3.numero_identificacion = rs_tPostgresqlInput_1
										.getLong(6);
							} else {
								row3.numero_identificacion = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_1 < 7) {
							row3.primer_nombre = null;
						} else {

							row3.primer_nombre = routines.system.JDBCUtil
									.getString(rs_tPostgresqlInput_1, 7, false);
						}
						if (colQtyInRs_tPostgresqlInput_1 < 8) {
							row3.segundo_nombre = null;
						} else {

							row3.segundo_nombre = routines.system.JDBCUtil
									.getString(rs_tPostgresqlInput_1, 8, false);
						}
						if (colQtyInRs_tPostgresqlInput_1 < 9) {
							row3.primer_apellido = null;
						} else {

							row3.primer_apellido = routines.system.JDBCUtil
									.getString(rs_tPostgresqlInput_1, 9, false);
						}
						if (colQtyInRs_tPostgresqlInput_1 < 10) {
							row3.segundo_apellido = null;
						} else {

							row3.segundo_apellido = routines.system.JDBCUtil
									.getString(rs_tPostgresqlInput_1, 10, false);
						}
						if (colQtyInRs_tPostgresqlInput_1 < 11) {
							row3.sexo = null;
						} else {

							row3.sexo = routines.system.JDBCUtil.getString(
									rs_tPostgresqlInput_1, 11, false);
						}
						if (colQtyInRs_tPostgresqlInput_1 < 12) {
							row3.fecha_nacimiento = null;
						} else {

							row3.fecha_nacimiento = routines.system.JDBCUtil
									.getString(rs_tPostgresqlInput_1, 12, false);
						}
						if (colQtyInRs_tPostgresqlInput_1 < 13) {
							row3.municipio_estudio_joven = null;
						} else {

							row3.municipio_estudio_joven = routines.system.JDBCUtil
									.getString(rs_tPostgresqlInput_1, 13, false);
						}
						if (colQtyInRs_tPostgresqlInput_1 < 14) {
							row3.correo_electronico = null;
						} else {

							row3.correo_electronico = routines.system.JDBCUtil
									.getString(rs_tPostgresqlInput_1, 14, false);
						}
						if (colQtyInRs_tPostgresqlInput_1 < 15) {
							row3.telefono_1 = null;
						} else {

							if (rs_tPostgresqlInput_1.getObject(15) != null) {
								row3.telefono_1 = rs_tPostgresqlInput_1
										.getLong(15);
							} else {
								row3.telefono_1 = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_1 < 16) {
							row3.telefono_2 = null;
						} else {

							row3.telefono_2 = routines.system.JDBCUtil
									.getString(rs_tPostgresqlInput_1, 16, false);
						}
						if (colQtyInRs_tPostgresqlInput_1 < 17) {
							row3.periodo_academico_ingreso = null;
						} else {

							row3.periodo_academico_ingreso = routines.system.JDBCUtil
									.getString(rs_tPostgresqlInput_1, 17, false);
						}
						if (colQtyInRs_tPostgresqlInput_1 < 18) {
							row3.promedio_periodo = null;
						} else {

							if (rs_tPostgresqlInput_1.getObject(18) != null) {
								row3.promedio_periodo = rs_tPostgresqlInput_1
										.getDouble(18);
							} else {
								row3.promedio_periodo = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_1 < 19) {
							row3.numero_periodos_cursados = null;
						} else {

							if (rs_tPostgresqlInput_1.getObject(19) != null) {
								row3.numero_periodos_cursados = rs_tPostgresqlInput_1
										.getInt(19);
							} else {
								row3.numero_periodos_cursados = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_1 < 20) {
							row3.estado_estudiante = null;
						} else {

							row3.estado_estudiante = routines.system.JDBCUtil
									.getString(rs_tPostgresqlInput_1, 20, false);
						}
						if (colQtyInRs_tPostgresqlInput_1 < 21) {
							row3.joven_en_accion = null;
						} else {

							row3.joven_en_accion = routines.system.JDBCUtil
									.getString(rs_tPostgresqlInput_1, 21, false);
						}
						if (colQtyInRs_tPostgresqlInput_1 < 22) {
							row3.CODBENEFICIARIO = null;
						} else {

							row3.CODBENEFICIARIO = routines.system.JDBCUtil
									.getString(rs_tPostgresqlInput_1, 22, false);
						}
						if (colQtyInRs_tPostgresqlInput_1 < 23) {
							row3.TIPO_DE_DOCUMENTO = null;
						} else {

							row3.TIPO_DE_DOCUMENTO = routines.system.JDBCUtil
									.getString(rs_tPostgresqlInput_1, 23, false);
						}
						if (colQtyInRs_tPostgresqlInput_1 < 24) {
							row3.NUMERO_DE_DOCUMENTO = null;
						} else {

							if (rs_tPostgresqlInput_1.getObject(24) != null) {
								row3.NUMERO_DE_DOCUMENTO = rs_tPostgresqlInput_1
										.getLong(24);
							} else {
								row3.NUMERO_DE_DOCUMENTO = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_1 < 25) {
							row3.PRIMER_NOMBRE = null;
						} else {

							row3.PRIMER_NOMBRE = routines.system.JDBCUtil
									.getString(rs_tPostgresqlInput_1, 25, false);
						}
						if (colQtyInRs_tPostgresqlInput_1 < 26) {
							row3.SEGUNDO_NOMBRE = null;
						} else {

							row3.SEGUNDO_NOMBRE = routines.system.JDBCUtil
									.getString(rs_tPostgresqlInput_1, 26, false);
						}
						if (colQtyInRs_tPostgresqlInput_1 < 27) {
							row3.PRIMER_APELLIDO = null;
						} else {

							row3.PRIMER_APELLIDO = routines.system.JDBCUtil
									.getString(rs_tPostgresqlInput_1, 27, false);
						}
						if (colQtyInRs_tPostgresqlInput_1 < 28) {
							row3.SEGUNDO_APELLIDO = null;
						} else {

							row3.SEGUNDO_APELLIDO = routines.system.JDBCUtil
									.getString(rs_tPostgresqlInput_1, 28, false);
						}
						if (colQtyInRs_tPostgresqlInput_1 < 29) {
							row3.CODIGOCONVENIO = null;
						} else {

							row3.CODIGOCONVENIO = routines.system.JDBCUtil
									.getString(rs_tPostgresqlInput_1, 29, false);
						}
						if (colQtyInRs_tPostgresqlInput_1 < 30) {
							row3.NOMBRE_IES = null;
						} else {

							row3.NOMBRE_IES = routines.system.JDBCUtil
									.getString(rs_tPostgresqlInput_1, 30, false);
						}
						if (colQtyInRs_tPostgresqlInput_1 < 31) {
							row3.SNIESPROGRAMA = null;
						} else {

							if (rs_tPostgresqlInput_1.getObject(31) != null) {
								row3.SNIESPROGRAMA = rs_tPostgresqlInput_1
										.getDouble(31);
							} else {
								row3.SNIESPROGRAMA = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_1 < 32) {
							row3.INGRESO_DEL_PARTICIPANTE = null;
						} else {

							row3.INGRESO_DEL_PARTICIPANTE = routines.system.JDBCUtil
									.getString(rs_tPostgresqlInput_1, 32, false);
						}

						/**
						 * [tPostgresqlInput_1 begin ] stop
						 */

						/**
						 * [tPostgresqlInput_1 main ] start
						 */

						currentComponent = "tPostgresqlInput_1";

						tos_count_tPostgresqlInput_1++;

						/**
						 * [tPostgresqlInput_1 main ] stop
						 */

						/**
						 * [tPostgresqlInput_1 process_data_begin ] start
						 */

						currentComponent = "tPostgresqlInput_1";

						/**
						 * [tPostgresqlInput_1 process_data_begin ] stop
						 */

						/**
						 * [tMap_1 main ] start
						 */

						currentComponent = "tMap_1";

						// row3
						// row3

						if (execStat) {
							runStat.updateStatOnConnection("row3" + iterateId,
									1, 1);
						}

						boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_1 = false;
						boolean mainRowRejected_tMap_1 = false;

						// /////////////////////////////////////////////
						// Starting Lookup Table "row2"
						// /////////////////////////////////////////////

						boolean forceLooprow2 = false;

						row2Struct row2ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_1 = false;

							row2HashKey.CODIGO_ESTUDIANTE = row3.codigo_estudiante;

							row2HashKey.hashCodeDirty = true;

							tHash_Lookup_row2.lookup(row2HashKey);

						} // G_TM_M_020

						if (tHash_Lookup_row2 != null
								&& tHash_Lookup_row2.getCount(row2HashKey) > 1) { // G
																					// 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row2' and it contains more one result from keys :  row2.CODIGO_ESTUDIANTE = '"
							// + row2HashKey.CODIGO_ESTUDIANTE + "'");
						} // G 071

						row2Struct row2 = null;

						row2Struct fromLookup_row2 = null;
						row2 = row2Default;

						if (tHash_Lookup_row2 != null
								&& tHash_Lookup_row2.hasNext()) { // G 099

							fromLookup_row2 = tHash_Lookup_row2.next();

						} // G 099

						if (fromLookup_row2 != null) {
							row2 = fromLookup_row2;
						}

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
							// ###############################
							// # Output tables

							jovenes_accion = null;

							// # Output table : 'jovenes_accion'
							jovenes_accion_tmp.consecutivo = row3.consecutivo;
							jovenes_accion_tmp.CODIGO_PROYECTO_SNIES = row3.CODIGO_PROYECTO_SNIES;
							jovenes_accion_tmp.PROYECTO_SNIES = row3.PROYECTO_SNIES;
							jovenes_accion_tmp.codigo_estudiante = row3.codigo_estudiante;
							jovenes_accion_tmp.tipo_identificacion_estudiante = row3.tipo_identificacion_estudiante;
							jovenes_accion_tmp.numero_identificacion = row3.numero_identificacion;
							jovenes_accion_tmp.primer_nombre = row3.primer_nombre;
							jovenes_accion_tmp.segundo_nombre = row3.segundo_nombre;
							jovenes_accion_tmp.primer_apellido = row3.primer_apellido;
							jovenes_accion_tmp.segundo_apellido = row3.segundo_apellido;
							jovenes_accion_tmp.sexo = row3.sexo;
							jovenes_accion_tmp.fecha_nacimiento = row3.fecha_nacimiento;
							jovenes_accion_tmp.municipio_estudio_joven = row3.municipio_estudio_joven;
							jovenes_accion_tmp.correo_electronico = row3.correo_electronico;
							jovenes_accion_tmp.telefono_1 = row3.telefono_1;
							jovenes_accion_tmp.telefono_2 = row3.telefono_2;
							jovenes_accion_tmp.periodo_academico_ingreso = row3.periodo_academico_ingreso;
							jovenes_accion_tmp.promedio_periodo = row2.PROMEDIO;
							jovenes_accion_tmp.numero_periodos_cursados = row3.numero_periodos_cursados;
							jovenes_accion_tmp.estado_estudiante = row2.ESTADO;
							jovenes_accion_tmp.joven_en_accion = row3.joven_en_accion;
							jovenes_accion_tmp.CODBENEFICIARIO = row3.CODBENEFICIARIO;
							jovenes_accion_tmp.TIPO_DE_DOCUMENTO = row3.TIPO_DE_DOCUMENTO;
							jovenes_accion_tmp.NUMERO_DE_DOCUMENTO = row3.NUMERO_DE_DOCUMENTO;
							jovenes_accion_tmp.PRIMER_NOMBRE = row3.PRIMER_NOMBRE;
							jovenes_accion_tmp.SEGUNDO_NOMBRE = row3.SEGUNDO_NOMBRE;
							jovenes_accion_tmp.PRIMER_APELLIDO = row3.PRIMER_APELLIDO;
							jovenes_accion_tmp.SEGUNDO_APELLIDO = row3.SEGUNDO_APELLIDO;
							jovenes_accion_tmp.CODIGOCONVENIO = row3.CODIGOCONVENIO;
							jovenes_accion_tmp.NOMBRE_IES = row3.NOMBRE_IES;
							jovenes_accion_tmp.SNIESPROGRAMA = row3.SNIESPROGRAMA;
							jovenes_accion_tmp.INGRESO_DEL_PARTICIPANTE = row3.INGRESO_DEL_PARTICIPANTE;
							jovenes_accion = jovenes_accion_tmp;
							// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_1 = false;

						tos_count_tMap_1++;

						/**
						 * [tMap_1 main ] stop
						 */

						/**
						 * [tMap_1 process_data_begin ] start
						 */

						currentComponent = "tMap_1";

						/**
						 * [tMap_1 process_data_begin ] stop
						 */
						// Start of branch "jovenes_accion"
						if (jovenes_accion != null) {

							/**
							 * [tPostgresqlOutput_1 main ] start
							 */

							currentComponent = "tPostgresqlOutput_1";

							// jovenes_accion
							// jovenes_accion

							if (execStat) {
								runStat.updateStatOnConnection("jovenes_accion"
										+ iterateId, 1, 1);
							}

							whetherReject_tPostgresqlOutput_1 = false;
							pstmt_tPostgresqlOutput_1.setInt(1,
									jovenes_accion.consecutivo);

							pstmt_tPostgresqlOutput_1.setInt(2,
									jovenes_accion.CODIGO_PROYECTO_SNIES);

							if (jovenes_accion.PROYECTO_SNIES == null) {
								pstmt_tPostgresqlOutput_1.setNull(3,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tPostgresqlOutput_1.setString(3,
										jovenes_accion.PROYECTO_SNIES);
							}

							if (jovenes_accion.codigo_estudiante == null) {
								pstmt_tPostgresqlOutput_1.setNull(4,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tPostgresqlOutput_1.setLong(4,
										jovenes_accion.codigo_estudiante);
							}

							if (jovenes_accion.tipo_identificacion_estudiante == null) {
								pstmt_tPostgresqlOutput_1.setNull(5,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tPostgresqlOutput_1
										.setString(
												5,
												jovenes_accion.tipo_identificacion_estudiante);
							}

							if (jovenes_accion.numero_identificacion == null) {
								pstmt_tPostgresqlOutput_1.setNull(6,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tPostgresqlOutput_1.setLong(6,
										jovenes_accion.numero_identificacion);
							}

							if (jovenes_accion.primer_nombre == null) {
								pstmt_tPostgresqlOutput_1.setNull(7,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tPostgresqlOutput_1.setString(7,
										jovenes_accion.primer_nombre);
							}

							if (jovenes_accion.segundo_nombre == null) {
								pstmt_tPostgresqlOutput_1.setNull(8,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tPostgresqlOutput_1.setString(8,
										jovenes_accion.segundo_nombre);
							}

							if (jovenes_accion.primer_apellido == null) {
								pstmt_tPostgresqlOutput_1.setNull(9,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tPostgresqlOutput_1.setString(9,
										jovenes_accion.primer_apellido);
							}

							if (jovenes_accion.segundo_apellido == null) {
								pstmt_tPostgresqlOutput_1.setNull(10,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tPostgresqlOutput_1.setString(10,
										jovenes_accion.segundo_apellido);
							}

							if (jovenes_accion.sexo == null) {
								pstmt_tPostgresqlOutput_1.setNull(11,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tPostgresqlOutput_1.setString(11,
										jovenes_accion.sexo);
							}

							if (jovenes_accion.fecha_nacimiento == null) {
								pstmt_tPostgresqlOutput_1.setNull(12,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tPostgresqlOutput_1.setString(12,
										jovenes_accion.fecha_nacimiento);
							}

							if (jovenes_accion.municipio_estudio_joven == null) {
								pstmt_tPostgresqlOutput_1.setNull(13,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tPostgresqlOutput_1.setString(13,
										jovenes_accion.municipio_estudio_joven);
							}

							if (jovenes_accion.correo_electronico == null) {
								pstmt_tPostgresqlOutput_1.setNull(14,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tPostgresqlOutput_1.setString(14,
										jovenes_accion.correo_electronico);
							}

							if (jovenes_accion.telefono_1 == null) {
								pstmt_tPostgresqlOutput_1.setNull(15,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tPostgresqlOutput_1.setLong(15,
										jovenes_accion.telefono_1);
							}

							if (jovenes_accion.telefono_2 == null) {
								pstmt_tPostgresqlOutput_1.setNull(16,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tPostgresqlOutput_1.setString(16,
										jovenes_accion.telefono_2);
							}

							if (jovenes_accion.periodo_academico_ingreso == null) {
								pstmt_tPostgresqlOutput_1.setNull(17,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tPostgresqlOutput_1
										.setString(
												17,
												jovenes_accion.periodo_academico_ingreso);
							}

							if (jovenes_accion.promedio_periodo == null) {
								pstmt_tPostgresqlOutput_1.setNull(18,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tPostgresqlOutput_1.setString(18,
										jovenes_accion.promedio_periodo);
							}

							if (jovenes_accion.numero_periodos_cursados == null) {
								pstmt_tPostgresqlOutput_1.setNull(19,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tPostgresqlOutput_1
										.setInt(19,
												jovenes_accion.numero_periodos_cursados);
							}

							if (jovenes_accion.estado_estudiante == null) {
								pstmt_tPostgresqlOutput_1.setNull(20,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tPostgresqlOutput_1.setString(20,
										jovenes_accion.estado_estudiante);
							}

							if (jovenes_accion.joven_en_accion == null) {
								pstmt_tPostgresqlOutput_1.setNull(21,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tPostgresqlOutput_1.setString(21,
										jovenes_accion.joven_en_accion);
							}

							if (jovenes_accion.CODBENEFICIARIO == null) {
								pstmt_tPostgresqlOutput_1.setNull(22,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tPostgresqlOutput_1.setString(22,
										jovenes_accion.CODBENEFICIARIO);
							}

							if (jovenes_accion.TIPO_DE_DOCUMENTO == null) {
								pstmt_tPostgresqlOutput_1.setNull(23,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tPostgresqlOutput_1.setString(23,
										jovenes_accion.TIPO_DE_DOCUMENTO);
							}

							if (jovenes_accion.NUMERO_DE_DOCUMENTO == null) {
								pstmt_tPostgresqlOutput_1.setNull(24,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tPostgresqlOutput_1.setLong(24,
										jovenes_accion.NUMERO_DE_DOCUMENTO);
							}

							if (jovenes_accion.PRIMER_NOMBRE == null) {
								pstmt_tPostgresqlOutput_1.setNull(25,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tPostgresqlOutput_1.setString(25,
										jovenes_accion.PRIMER_NOMBRE);
							}

							if (jovenes_accion.SEGUNDO_NOMBRE == null) {
								pstmt_tPostgresqlOutput_1.setNull(26,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tPostgresqlOutput_1.setString(26,
										jovenes_accion.SEGUNDO_NOMBRE);
							}

							if (jovenes_accion.PRIMER_APELLIDO == null) {
								pstmt_tPostgresqlOutput_1.setNull(27,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tPostgresqlOutput_1.setString(27,
										jovenes_accion.PRIMER_APELLIDO);
							}

							if (jovenes_accion.SEGUNDO_APELLIDO == null) {
								pstmt_tPostgresqlOutput_1.setNull(28,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tPostgresqlOutput_1.setString(28,
										jovenes_accion.SEGUNDO_APELLIDO);
							}

							if (jovenes_accion.CODIGOCONVENIO == null) {
								pstmt_tPostgresqlOutput_1.setNull(29,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tPostgresqlOutput_1.setString(29,
										jovenes_accion.CODIGOCONVENIO);
							}

							if (jovenes_accion.NOMBRE_IES == null) {
								pstmt_tPostgresqlOutput_1.setNull(30,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tPostgresqlOutput_1.setString(30,
										jovenes_accion.NOMBRE_IES);
							}

							if (jovenes_accion.SNIESPROGRAMA == null) {
								pstmt_tPostgresqlOutput_1.setNull(31,
										java.sql.Types.DOUBLE);
							} else {
								pstmt_tPostgresqlOutput_1.setDouble(31,
										jovenes_accion.SNIESPROGRAMA);
							}

							if (jovenes_accion.INGRESO_DEL_PARTICIPANTE == null) {
								pstmt_tPostgresqlOutput_1.setNull(32,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tPostgresqlOutput_1
										.setString(
												32,
												jovenes_accion.INGRESO_DEL_PARTICIPANTE);
							}

							try {
								nb_line_tPostgresqlOutput_1++;

								insertedCount_tPostgresqlOutput_1 = insertedCount_tPostgresqlOutput_1
										+ pstmt_tPostgresqlOutput_1
												.executeUpdate();

							} catch (java.lang.Exception e) {

								whetherReject_tPostgresqlOutput_1 = true;
								throw (e);
							}

							tos_count_tPostgresqlOutput_1++;

							/**
							 * [tPostgresqlOutput_1 main ] stop
							 */

							/**
							 * [tPostgresqlOutput_1 process_data_begin ] start
							 */

							currentComponent = "tPostgresqlOutput_1";

							/**
							 * [tPostgresqlOutput_1 process_data_begin ] stop
							 */

							/**
							 * [tPostgresqlOutput_1 process_data_end ] start
							 */

							currentComponent = "tPostgresqlOutput_1";

							/**
							 * [tPostgresqlOutput_1 process_data_end ] stop
							 */

						} // End of branch "jovenes_accion"

						/**
						 * [tMap_1 process_data_end ] start
						 */

						currentComponent = "tMap_1";

						/**
						 * [tMap_1 process_data_end ] stop
						 */

						/**
						 * [tPostgresqlInput_1 process_data_end ] start
						 */

						currentComponent = "tPostgresqlInput_1";

						/**
						 * [tPostgresqlInput_1 process_data_end ] stop
						 */

						/**
						 * [tPostgresqlInput_1 end ] start
						 */

						currentComponent = "tPostgresqlInput_1";

					}
				} finally {
					if (rs_tPostgresqlInput_1 != null) {
						rs_tPostgresqlInput_1.close();
					}
					if (stmt_tPostgresqlInput_1 != null) {
						stmt_tPostgresqlInput_1.close();
					}
				}
				globalMap.put("tPostgresqlInput_1_NB_LINE",
						nb_line_tPostgresqlInput_1);

				ok_Hash.put("tPostgresqlInput_1", true);
				end_Hash.put("tPostgresqlInput_1", System.currentTimeMillis());

				/**
				 * [tPostgresqlInput_1 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row2 != null) {
					tHash_Lookup_row2.endGet();
				}
				globalMap.remove("tHash_Lookup_row2");

				// ###############################

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row3" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tPostgresqlOutput_1 end ] start
				 */

				currentComponent = "tPostgresqlOutput_1";

				if (pstmt_tPostgresqlOutput_1 != null) {

					pstmt_tPostgresqlOutput_1.close();
					resourceMap.remove("pstmt_tPostgresqlOutput_1");
				}
				resourceMap.put("statementClosed_tPostgresqlOutput_1", true);

				nb_line_deleted_tPostgresqlOutput_1 = nb_line_deleted_tPostgresqlOutput_1
						+ deletedCount_tPostgresqlOutput_1;
				nb_line_update_tPostgresqlOutput_1 = nb_line_update_tPostgresqlOutput_1
						+ updatedCount_tPostgresqlOutput_1;
				nb_line_inserted_tPostgresqlOutput_1 = nb_line_inserted_tPostgresqlOutput_1
						+ insertedCount_tPostgresqlOutput_1;
				nb_line_rejected_tPostgresqlOutput_1 = nb_line_rejected_tPostgresqlOutput_1
						+ rejectedCount_tPostgresqlOutput_1;

				globalMap.put("tPostgresqlOutput_1_NB_LINE",
						nb_line_tPostgresqlOutput_1);
				globalMap.put("tPostgresqlOutput_1_NB_LINE_UPDATED",
						nb_line_update_tPostgresqlOutput_1);
				globalMap.put("tPostgresqlOutput_1_NB_LINE_INSERTED",
						nb_line_inserted_tPostgresqlOutput_1);
				globalMap.put("tPostgresqlOutput_1_NB_LINE_DELETED",
						nb_line_deleted_tPostgresqlOutput_1);
				globalMap.put("tPostgresqlOutput_1_NB_LINE_REJECTED",
						nb_line_rejected_tPostgresqlOutput_1);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("jovenes_accion"
								+ iterateId, 2, 0);
					}
				}

				ok_Hash.put("tPostgresqlOutput_1", true);
				end_Hash.put("tPostgresqlOutput_1", System.currentTimeMillis());

				/**
				 * [tPostgresqlOutput_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_row2");

			try {

				/**
				 * [tPostgresqlInput_1 finally ] start
				 */

				currentComponent = "tPostgresqlInput_1";

				/**
				 * [tPostgresqlInput_1 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tPostgresqlOutput_1 finally ] start
				 */

				currentComponent = "tPostgresqlOutput_1";

				if (resourceMap.get("statementClosed_tPostgresqlOutput_1") == null) {
					java.sql.PreparedStatement pstmtToClose_tPostgresqlOutput_1 = null;
					if ((pstmtToClose_tPostgresqlOutput_1 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmt_tPostgresqlOutput_1")) != null) {
						pstmtToClose_tPostgresqlOutput_1.close();
					}
				}

				/**
				 * [tPostgresqlOutput_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostgresqlInput_1_SUBPROCESS_STATE", 1);
	}

	public static class row2Struct implements
			routines.system.IPersistableComparableLookupRow<row2Struct> {
		final static byte[] commonByteArrayLock_DMINDICADORES_jovenes_accion_cruce_reporte_dos = new byte[0];
		static byte[] commonByteArray_DMINDICADORES_jovenes_accion_cruce_reporte_dos = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Long IDENTIFICACION;

		public Long getIDENTIFICACION() {
			return this.IDENTIFICACION;
		}

		public Long CODIGO_ESTUDIANTE;

		public Long getCODIGO_ESTUDIANTE() {
			return this.CODIGO_ESTUDIANTE;
		}

		public String PROMEDIO;

		public String getPROMEDIO() {
			return this.PROMEDIO;
		}

		public String ESTADO;

		public String getESTADO() {
			return this.ESTADO;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.CODIGO_ESTUDIANTE == null) ? 0
								: this.CODIGO_ESTUDIANTE.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row2Struct other = (row2Struct) obj;

			if (this.CODIGO_ESTUDIANTE == null) {
				if (other.CODIGO_ESTUDIANTE != null)
					return false;

			} else if (!this.CODIGO_ESTUDIANTE.equals(other.CODIGO_ESTUDIANTE))

				return false;

			return true;
		}

		public void copyDataTo(row2Struct other) {

			other.IDENTIFICACION = this.IDENTIFICACION;
			other.CODIGO_ESTUDIANTE = this.CODIGO_ESTUDIANTE;
			other.PROMEDIO = this.PROMEDIO;
			other.ESTADO = this.ESTADO;

		}

		public void copyKeysDataTo(row2Struct other) {

			other.CODIGO_ESTUDIANTE = this.CODIGO_ESTUDIANTE;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DMINDICADORES_jovenes_accion_cruce_reporte_dos) {

				try {

					int length = 0;

					length = dis.readByte();
					if (length == -1) {
						this.CODIGO_ESTUDIANTE = null;
					} else {
						this.CODIGO_ESTUDIANTE = dis.readLong();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// Long

				if (this.CODIGO_ESTUDIANTE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.CODIGO_ESTUDIANTE);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				length = dis.readByte();
				if (length == -1) {
					this.IDENTIFICACION = null;
				} else {
					this.IDENTIFICACION = dis.readLong();
				}

				this.PROMEDIO = readString(dis, ois);

				this.ESTADO = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				if (this.IDENTIFICACION == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.IDENTIFICACION);
				}

				writeString(this.PROMEDIO, dos, oos);

				writeString(this.ESTADO, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("IDENTIFICACION=" + String.valueOf(IDENTIFICACION));
			sb.append(",CODIGO_ESTUDIANTE=" + String.valueOf(CODIGO_ESTUDIANTE));
			sb.append(",PROMEDIO=" + PROMEDIO);
			sb.append(",ESTADO=" + ESTADO);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.CODIGO_ESTUDIANTE,
					other.CODIGO_ESTUDIANTE);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tOracleInput_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tOracleInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row2Struct row2 = new row2Struct();

				/**
				 * [tAdvancedHash_row2 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row2", false);
				start_Hash
						.put("tAdvancedHash_row2", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row2";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row2" + iterateId, 0, 0);

					}
				}

				int tos_count_tAdvancedHash_row2 = 0;

				// connection name:row2
				// source node:tOracleInput_1 -
				// inputs:(after_tPostgresqlInput_1) outputs:(row2,row2) |
				// target node:tAdvancedHash_row2 - inputs:(row2) outputs:()
				// linked node: tMap_1 - inputs:(row3,row2)
				// outputs:(jovenes_accion)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row2 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row2Struct> getLookup(matchingModeEnum_row2);

				globalMap.put("tHash_Lookup_row2", tHash_Lookup_row2);

				/**
				 * [tAdvancedHash_row2 begin ] stop
				 */

				/**
				 * [tOracleInput_1 begin ] start
				 */

				ok_Hash.put("tOracleInput_1", false);
				start_Hash.put("tOracleInput_1", System.currentTimeMillis());

				currentComponent = "tOracleInput_1";

				int tos_count_tOracleInput_1 = 0;

				int nb_line_tOracleInput_1 = 0;
				java.sql.Connection conn_tOracleInput_1 = null;
				String driverClass_tOracleInput_1 = "oracle.jdbc.OracleDriver";
				java.lang.Class.forName(driverClass_tOracleInput_1);

				String url_tOracleInput_1 = null;
				url_tOracleInput_1 = "jdbc:oracle:thin:@"
						+ "academicaproduccion.c8an9arwoaua.us-east-1.rds.amazonaws.com"
						+ ":" + "1521" + ":" + "sudd";

				String dbUser_tOracleInput_1 = "datawarefnl2";

				final String decryptedPassword_tOracleInput_1 = routines.system.PasswordEncryptUtil
						.decryptPassword("a1a2f764c96a45a6f8d4af7647a4e49f");

				String dbPwd_tOracleInput_1 = decryptedPassword_tOracleInput_1;

				conn_tOracleInput_1 = java.sql.DriverManager.getConnection(
						url_tOracleInput_1, dbUser_tOracleInput_1,
						dbPwd_tOracleInput_1);
				java.sql.Statement stmtGetTZ_tOracleInput_1 = conn_tOracleInput_1
						.createStatement();
				java.sql.ResultSet rsGetTZ_tOracleInput_1 = stmtGetTZ_tOracleInput_1
						.executeQuery("select sessiontimezone from dual");
				String sessionTimezone_tOracleInput_1 = java.util.TimeZone
						.getDefault().getID();
				while (rsGetTZ_tOracleInput_1.next()) {
					sessionTimezone_tOracleInput_1 = rsGetTZ_tOracleInput_1
							.getString(1);
				}
				if (!(conn_tOracleInput_1 instanceof oracle.jdbc.OracleConnection)
						&& conn_tOracleInput_1
								.isWrapperFor(oracle.jdbc.OracleConnection.class)) {
					if (conn_tOracleInput_1
							.unwrap(oracle.jdbc.OracleConnection.class) != null) {
						((oracle.jdbc.OracleConnection) conn_tOracleInput_1
								.unwrap(oracle.jdbc.OracleConnection.class))
								.setSessionTimeZone(sessionTimezone_tOracleInput_1);
					}
				} else {
					((oracle.jdbc.OracleConnection) conn_tOracleInput_1)
							.setSessionTimeZone(sessionTimezone_tOracleInput_1);
				}

				java.sql.Statement stmt_tOracleInput_1 = conn_tOracleInput_1
						.createStatement();

				String dbquery_tOracleInput_1 = "SELECT DISTINCT\nmatriculado.identificacion,\nmatriculado.codigo_estudiante,\n\nmatriculado.promedio,\n\nmatriculado.estado\n\n"
						+ "FROM\n(SELECT UNIQUE \nest_nro_iden identificacion ,\nest_cod codigo_estudiante,\n \n  \nto_char(fa_promedio_sem(est_cod, 2018"
						+ ",1),'9.9') promedio,\ncase when mntac.acest.est_estado_est in ('A','H','O','L','E') then 'ACTIVO' \nWHEN mntac.acest.est_e"
						+ "stado_est in ('P','C','T','F','M','S','Q','D','K','V','Z',\n 'J') THEN 'APLAZADO' \nWHEN mntac.acest.est_estado_est in ('I"
						+ "','X', 'R','U', 'W') THEN 'INACTIVO' \nWHEN mntac.acest.est_estado_est in ('B') THEN 'CONDICIONADO'  \nend estado\n\nFROM mn"
						+ "tac.acest \nLEFT JOIN acestado on estado_cod=est_estado_est\nWHERE \n\nmntac.acest.est_estado_est <> ('N')\n ) matriculado OR"
						+ "DER BY matriculado.codigo_estudiante";

				globalMap.put("tOracleInput_1_QUERY", dbquery_tOracleInput_1);
				java.sql.ResultSet rs_tOracleInput_1 = null;

				try {
					rs_tOracleInput_1 = stmt_tOracleInput_1
							.executeQuery(dbquery_tOracleInput_1);
					java.sql.ResultSetMetaData rsmd_tOracleInput_1 = rs_tOracleInput_1
							.getMetaData();
					int colQtyInRs_tOracleInput_1 = rsmd_tOracleInput_1
							.getColumnCount();

					String tmpContent_tOracleInput_1 = null;

					while (rs_tOracleInput_1.next()) {
						nb_line_tOracleInput_1++;

						if (colQtyInRs_tOracleInput_1 < 1) {
							row2.IDENTIFICACION = null;
						} else {

							if (rs_tOracleInput_1.getObject(1) != null) {
								row2.IDENTIFICACION = rs_tOracleInput_1
										.getLong(1);
							} else {

								row2.IDENTIFICACION = null;
							}
						}
						if (colQtyInRs_tOracleInput_1 < 2) {
							row2.CODIGO_ESTUDIANTE = null;
						} else {

							if (rs_tOracleInput_1.getObject(2) != null) {
								row2.CODIGO_ESTUDIANTE = rs_tOracleInput_1
										.getLong(2);
							} else {

								row2.CODIGO_ESTUDIANTE = null;
							}
						}
						if (colQtyInRs_tOracleInput_1 < 3) {
							row2.PROMEDIO = null;
						} else {

							row2.PROMEDIO = routines.system.JDBCUtil.getString(
									rs_tOracleInput_1, 3, false);
						}
						if (colQtyInRs_tOracleInput_1 < 4) {
							row2.ESTADO = null;
						} else {

							row2.ESTADO = routines.system.JDBCUtil.getString(
									rs_tOracleInput_1, 4, false);
						}

						/**
						 * [tOracleInput_1 begin ] stop
						 */

						/**
						 * [tOracleInput_1 main ] start
						 */

						currentComponent = "tOracleInput_1";

						tos_count_tOracleInput_1++;

						/**
						 * [tOracleInput_1 main ] stop
						 */

						/**
						 * [tOracleInput_1 process_data_begin ] start
						 */

						currentComponent = "tOracleInput_1";

						/**
						 * [tOracleInput_1 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row2 main ] start
						 */

						currentComponent = "tAdvancedHash_row2";

						// row2
						// row2

						if (execStat) {
							runStat.updateStatOnConnection("row2" + iterateId,
									1, 1);
						}

						row2Struct row2_HashRow = new row2Struct();

						row2_HashRow.IDENTIFICACION = row2.IDENTIFICACION;

						row2_HashRow.CODIGO_ESTUDIANTE = row2.CODIGO_ESTUDIANTE;

						row2_HashRow.PROMEDIO = row2.PROMEDIO;

						row2_HashRow.ESTADO = row2.ESTADO;

						tHash_Lookup_row2.put(row2_HashRow);

						tos_count_tAdvancedHash_row2++;

						/**
						 * [tAdvancedHash_row2 main ] stop
						 */

						/**
						 * [tAdvancedHash_row2 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_row2";

						/**
						 * [tAdvancedHash_row2 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row2 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_row2";

						/**
						 * [tAdvancedHash_row2 process_data_end ] stop
						 */

						/**
						 * [tOracleInput_1 process_data_end ] start
						 */

						currentComponent = "tOracleInput_1";

						/**
						 * [tOracleInput_1 process_data_end ] stop
						 */

						/**
						 * [tOracleInput_1 end ] start
						 */

						currentComponent = "tOracleInput_1";

					}
				} finally {
					if (rs_tOracleInput_1 != null) {
						rs_tOracleInput_1.close();
					}
					if (stmt_tOracleInput_1 != null) {
						stmt_tOracleInput_1.close();
					}
					if (conn_tOracleInput_1 != null
							&& !conn_tOracleInput_1.isClosed()) {

						conn_tOracleInput_1.close();

					}

				}

				globalMap.put("tOracleInput_1_NB_LINE", nb_line_tOracleInput_1);

				ok_Hash.put("tOracleInput_1", true);
				end_Hash.put("tOracleInput_1", System.currentTimeMillis());

				/**
				 * [tOracleInput_1 end ] stop
				 */

				/**
				 * [tAdvancedHash_row2 end ] start
				 */

				currentComponent = "tAdvancedHash_row2";

				tHash_Lookup_row2.endPut();

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row2" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tAdvancedHash_row2", true);
				end_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row2 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tOracleInput_1 finally ] start
				 */

				currentComponent = "tOracleInput_1";

				/**
				 * [tOracleInput_1 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row2 finally ] start
				 */

				currentComponent = "tAdvancedHash_row2";

				/**
				 * [tAdvancedHash_row2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tOracleInput_1_SUBPROCESS_STATE", 1);
	}

	public void tPostjob_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tPostjob_1 begin ] start
				 */

				ok_Hash.put("tPostjob_1", false);
				start_Hash.put("tPostjob_1", System.currentTimeMillis());

				currentComponent = "tPostjob_1";

				int tos_count_tPostjob_1 = 0;

				/**
				 * [tPostjob_1 begin ] stop
				 */

				/**
				 * [tPostjob_1 main ] start
				 */

				currentComponent = "tPostjob_1";

				tos_count_tPostjob_1++;

				/**
				 * [tPostjob_1 main ] stop
				 */

				/**
				 * [tPostjob_1 process_data_begin ] start
				 */

				currentComponent = "tPostjob_1";

				/**
				 * [tPostjob_1 process_data_begin ] stop
				 */

				/**
				 * [tPostjob_1 process_data_end ] start
				 */

				currentComponent = "tPostjob_1";

				/**
				 * [tPostjob_1 process_data_end ] stop
				 */

				/**
				 * [tPostjob_1 end ] start
				 */

				currentComponent = "tPostjob_1";

				ok_Hash.put("tPostjob_1", true);
				end_Hash.put("tPostjob_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tOracleClose_1Process(globalMap);

				/**
				 * [tPostjob_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tPostjob_1 finally ] start
				 */

				currentComponent = "tPostjob_1";

				/**
				 * [tPostjob_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 1);
	}

	public void tOracleClose_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tOracleClose_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tOracleClose_1 begin ] start
				 */

				ok_Hash.put("tOracleClose_1", false);
				start_Hash.put("tOracleClose_1", System.currentTimeMillis());

				currentComponent = "tOracleClose_1";

				int tos_count_tOracleClose_1 = 0;

				/**
				 * [tOracleClose_1 begin ] stop
				 */

				/**
				 * [tOracleClose_1 main ] start
				 */

				currentComponent = "tOracleClose_1";

				java.sql.Connection conn_tOracleClose_1 = (java.sql.Connection) globalMap
						.get("conn_tOracleConnection_1");

				if (conn_tOracleClose_1 != null
						&& !conn_tOracleClose_1.isClosed()) {

					conn_tOracleClose_1.close();

				}

				tos_count_tOracleClose_1++;

				/**
				 * [tOracleClose_1 main ] stop
				 */

				/**
				 * [tOracleClose_1 process_data_begin ] start
				 */

				currentComponent = "tOracleClose_1";

				/**
				 * [tOracleClose_1 process_data_begin ] stop
				 */

				/**
				 * [tOracleClose_1 process_data_end ] start
				 */

				currentComponent = "tOracleClose_1";

				/**
				 * [tOracleClose_1 process_data_end ] stop
				 */

				/**
				 * [tOracleClose_1 end ] start
				 */

				currentComponent = "tOracleClose_1";

				ok_Hash.put("tOracleClose_1", true);
				end_Hash.put("tOracleClose_1", System.currentTimeMillis());

				/**
				 * [tOracleClose_1 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tOracleClose_1:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk3", 0, "ok");
			}

			tPostgresqlClose_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tOracleClose_1 finally ] start
				 */

				currentComponent = "tOracleClose_1";

				/**
				 * [tOracleClose_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tOracleClose_1_SUBPROCESS_STATE", 1);
	}

	public void tPostgresqlClose_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlClose_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tPostgresqlClose_1 begin ] start
				 */

				ok_Hash.put("tPostgresqlClose_1", false);
				start_Hash
						.put("tPostgresqlClose_1", System.currentTimeMillis());

				currentComponent = "tPostgresqlClose_1";

				int tos_count_tPostgresqlClose_1 = 0;

				/**
				 * [tPostgresqlClose_1 begin ] stop
				 */

				/**
				 * [tPostgresqlClose_1 main ] start
				 */

				currentComponent = "tPostgresqlClose_1";

				java.sql.Connection conn_tPostgresqlClose_1 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_1");
				if (conn_tPostgresqlClose_1 != null
						&& !conn_tPostgresqlClose_1.isClosed()) {
					conn_tPostgresqlClose_1.close();
				}

				tos_count_tPostgresqlClose_1++;

				/**
				 * [tPostgresqlClose_1 main ] stop
				 */

				/**
				 * [tPostgresqlClose_1 process_data_begin ] start
				 */

				currentComponent = "tPostgresqlClose_1";

				/**
				 * [tPostgresqlClose_1 process_data_begin ] stop
				 */

				/**
				 * [tPostgresqlClose_1 process_data_end ] start
				 */

				currentComponent = "tPostgresqlClose_1";

				/**
				 * [tPostgresqlClose_1 process_data_end ] stop
				 */

				/**
				 * [tPostgresqlClose_1 end ] start
				 */

				currentComponent = "tPostgresqlClose_1";

				ok_Hash.put("tPostgresqlClose_1", true);
				end_Hash.put("tPostgresqlClose_1", System.currentTimeMillis());

				/**
				 * [tPostgresqlClose_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tPostgresqlClose_1 finally ] start
				 */

				currentComponent = "tPostgresqlClose_1";

				/**
				 * [tPostgresqlClose_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostgresqlClose_1_SUBPROCESS_STATE", 1);
	}

	public void connectionStatsLogs_CommitProcess(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("connectionStatsLogs_Commit_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [connectionStatsLogs_Commit begin ] start
				 */

				ok_Hash.put("connectionStatsLogs_Commit", false);
				start_Hash.put("connectionStatsLogs_Commit",
						System.currentTimeMillis());

				currentComponent = "connectionStatsLogs_Commit";

				int tos_count_connectionStatsLogs_Commit = 0;

				/**
				 * [connectionStatsLogs_Commit begin ] stop
				 */

				/**
				 * [connectionStatsLogs_Commit main ] start
				 */

				currentComponent = "connectionStatsLogs_Commit";

				java.sql.Connection conn_connectionStatsLogs_Commit = (java.sql.Connection) globalMap
						.get("conn_connectionStatsLogs");
				if (conn_connectionStatsLogs_Commit != null
						&& !conn_connectionStatsLogs_Commit.isClosed()) {

					conn_connectionStatsLogs_Commit.commit();

				}

				tos_count_connectionStatsLogs_Commit++;

				/**
				 * [connectionStatsLogs_Commit main ] stop
				 */

				/**
				 * [connectionStatsLogs_Commit process_data_begin ] start
				 */

				currentComponent = "connectionStatsLogs_Commit";

				/**
				 * [connectionStatsLogs_Commit process_data_begin ] stop
				 */

				/**
				 * [connectionStatsLogs_Commit process_data_end ] start
				 */

				currentComponent = "connectionStatsLogs_Commit";

				/**
				 * [connectionStatsLogs_Commit process_data_end ] stop
				 */

				/**
				 * [connectionStatsLogs_Commit end ] start
				 */

				currentComponent = "connectionStatsLogs_Commit";

				ok_Hash.put("connectionStatsLogs_Commit", true);
				end_Hash.put("connectionStatsLogs_Commit",
						System.currentTimeMillis());

				/**
				 * [connectionStatsLogs_Commit end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [connectionStatsLogs_Commit finally ] start
				 */

				currentComponent = "connectionStatsLogs_Commit";

				/**
				 * [connectionStatsLogs_Commit finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("connectionStatsLogs_Commit_SUBPROCESS_STATE", 1);
	}

	public void connectionStatsLogsProcess(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("connectionStatsLogs_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [connectionStatsLogs begin ] start
				 */

				ok_Hash.put("connectionStatsLogs", false);
				start_Hash.put("connectionStatsLogs",
						System.currentTimeMillis());

				currentComponent = "connectionStatsLogs";

				int tos_count_connectionStatsLogs = 0;

				String url_connectionStatsLogs = "jdbc:postgresql://"
						+ "10.20.0.88" + ":" + "5432" + "/"
						+ "co_udistrital_log";

				String dbUser_connectionStatsLogs = "spagobi";

				final String decryptedPassword_connectionStatsLogs = routines.system.PasswordEncryptUtil
						.decryptPassword("9f576344a61564d0da9981c3c148b27a24da144fced1fd2b");
				String dbPwd_connectionStatsLogs = decryptedPassword_connectionStatsLogs;

				java.sql.Connection conn_connectionStatsLogs = null;

				java.util.Enumeration<java.sql.Driver> drivers_connectionStatsLogs = java.sql.DriverManager
						.getDrivers();
				while (drivers_connectionStatsLogs.hasMoreElements()) {
					java.sql.Driver d_connectionStatsLogs = drivers_connectionStatsLogs
							.nextElement();
					java.util.List<String> driverList_connectionStatsLogs = java.util.Arrays
							.<String> asList("com.amazon.redshift.jdbc.Driver",
									"com.amazon.redshift.jdbc41.Driver");
					if (driverList_connectionStatsLogs
							.contains(d_connectionStatsLogs.getClass()
									.getName())) {
						try {
							java.sql.DriverManager
									.deregisterDriver(d_connectionStatsLogs);
							java.sql.DriverManager
									.registerDriver(d_connectionStatsLogs);
						} catch (java.lang.Exception e_connectionStatsLogs) {
							// do nothing
						}
					}
				}

				String sharedConnectionName_connectionStatsLogs = "StatsAndLog_Shared_Connection";
				conn_connectionStatsLogs = SharedDBConnection.getDBConnection(
						"org.postgresql.Driver", url_connectionStatsLogs,
						dbUser_connectionStatsLogs, dbPwd_connectionStatsLogs,
						sharedConnectionName_connectionStatsLogs);
				if (null != conn_connectionStatsLogs) {

					conn_connectionStatsLogs.setAutoCommit(false);
				}

				globalMap.put("schema_" + "connectionStatsLogs", "public");

				globalMap.put("conn_" + "connectionStatsLogs",
						conn_connectionStatsLogs);

				/**
				 * [connectionStatsLogs begin ] stop
				 */

				/**
				 * [connectionStatsLogs main ] start
				 */

				currentComponent = "connectionStatsLogs";

				tos_count_connectionStatsLogs++;

				/**
				 * [connectionStatsLogs main ] stop
				 */

				/**
				 * [connectionStatsLogs process_data_begin ] start
				 */

				currentComponent = "connectionStatsLogs";

				/**
				 * [connectionStatsLogs process_data_begin ] stop
				 */

				/**
				 * [connectionStatsLogs process_data_end ] start
				 */

				currentComponent = "connectionStatsLogs";

				/**
				 * [connectionStatsLogs process_data_end ] stop
				 */

				/**
				 * [connectionStatsLogs end ] start
				 */

				currentComponent = "connectionStatsLogs";

				ok_Hash.put("connectionStatsLogs", true);
				end_Hash.put("connectionStatsLogs", System.currentTimeMillis());

				/**
				 * [connectionStatsLogs end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [connectionStatsLogs finally ] start
				 */

				currentComponent = "connectionStatsLogs";

				/**
				 * [connectionStatsLogs finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("connectionStatsLogs_SUBPROCESS_STATE", 1);
	}

	public static class row_talendStats_STATSStruct implements
			routines.system.IPersistableRow<row_talendStats_STATSStruct> {
		final static byte[] commonByteArrayLock_DMINDICADORES_jovenes_accion_cruce_reporte_dos = new byte[0];
		static byte[] commonByteArray_DMINDICADORES_jovenes_accion_cruce_reporte_dos = new byte[0];

		public java.util.Date moment;

		public java.util.Date getMoment() {
			return this.moment;
		}

		public String pid;

		public String getPid() {
			return this.pid;
		}

		public String father_pid;

		public String getFather_pid() {
			return this.father_pid;
		}

		public String root_pid;

		public String getRoot_pid() {
			return this.root_pid;
		}

		public Long system_pid;

		public Long getSystem_pid() {
			return this.system_pid;
		}

		public String project;

		public String getProject() {
			return this.project;
		}

		public String job;

		public String getJob() {
			return this.job;
		}

		public String job_repository_id;

		public String getJob_repository_id() {
			return this.job_repository_id;
		}

		public String job_version;

		public String getJob_version() {
			return this.job_version;
		}

		public String context;

		public String getContext() {
			return this.context;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public String message_type;

		public String getMessage_type() {
			return this.message_type;
		}

		public String message;

		public String getMessage() {
			return this.message;
		}

		public Long duration;

		public Long getDuration() {
			return this.duration;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DMINDICADORES_jovenes_accion_cruce_reporte_dos.length) {
					if (length < 1024
							&& commonByteArray_DMINDICADORES_jovenes_accion_cruce_reporte_dos.length == 0) {
						commonByteArray_DMINDICADORES_jovenes_accion_cruce_reporte_dos = new byte[1024];
					} else {
						commonByteArray_DMINDICADORES_jovenes_accion_cruce_reporte_dos = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_DMINDICADORES_jovenes_accion_cruce_reporte_dos,
						0, length);
				strReturn = new String(
						commonByteArray_DMINDICADORES_jovenes_accion_cruce_reporte_dos,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DMINDICADORES_jovenes_accion_cruce_reporte_dos) {

				try {

					int length = 0;

					this.moment = readDate(dis);

					this.pid = readString(dis);

					this.father_pid = readString(dis);

					this.root_pid = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.system_pid = null;
					} else {
						this.system_pid = dis.readLong();
					}

					this.project = readString(dis);

					this.job = readString(dis);

					this.job_repository_id = readString(dis);

					this.job_version = readString(dis);

					this.context = readString(dis);

					this.origin = readString(dis);

					this.message_type = readString(dis);

					this.message = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.duration = null;
					} else {
						this.duration = dis.readLong();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.moment, dos);

				// String

				writeString(this.pid, dos);

				// String

				writeString(this.father_pid, dos);

				// String

				writeString(this.root_pid, dos);

				// Long

				if (this.system_pid == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.system_pid);
				}

				// String

				writeString(this.project, dos);

				// String

				writeString(this.job, dos);

				// String

				writeString(this.job_repository_id, dos);

				// String

				writeString(this.job_version, dos);

				// String

				writeString(this.context, dos);

				// String

				writeString(this.origin, dos);

				// String

				writeString(this.message_type, dos);

				// String

				writeString(this.message, dos);

				// Long

				if (this.duration == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.duration);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("moment=" + String.valueOf(moment));
			sb.append(",pid=" + pid);
			sb.append(",father_pid=" + father_pid);
			sb.append(",root_pid=" + root_pid);
			sb.append(",system_pid=" + String.valueOf(system_pid));
			sb.append(",project=" + project);
			sb.append(",job=" + job);
			sb.append(",job_repository_id=" + job_repository_id);
			sb.append(",job_version=" + job_version);
			sb.append(",context=" + context);
			sb.append(",origin=" + origin);
			sb.append(",message_type=" + message_type);
			sb.append(",message=" + message);
			sb.append(",duration=" + String.valueOf(duration));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_talendStats_STATSStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void talendStats_STATSProcess(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("talendStats_STATS_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row_talendStats_STATSStruct row_talendStats_STATS = new row_talendStats_STATSStruct();

				/**
				 * [talendStats_DB begin ] start
				 */

				ok_Hash.put("talendStats_DB", false);
				start_Hash.put("talendStats_DB", System.currentTimeMillis());

				currentVirtualComponent = "talendStats_DB";

				currentComponent = "talendStats_DB";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("Main" + iterateId, 0, 0);

					}
				}

				int tos_count_talendStats_DB = 0;

				String dbschema_talendStats_DB = null;
				dbschema_talendStats_DB = (String) globalMap.get("schema_"
						+ "connectionStatsLogs");

				String tableName_talendStats_DB = null;
				if (dbschema_talendStats_DB == null
						|| dbschema_talendStats_DB.trim().length() == 0) {
					tableName_talendStats_DB = "statcatcher";
				} else {
					tableName_talendStats_DB = dbschema_talendStats_DB
							+ "\".\"" + "statcatcher";
				}

				int nb_line_talendStats_DB = 0;
				int nb_line_update_talendStats_DB = 0;
				int nb_line_inserted_talendStats_DB = 0;
				int nb_line_deleted_talendStats_DB = 0;
				int nb_line_rejected_talendStats_DB = 0;

				int deletedCount_talendStats_DB = 0;
				int updatedCount_talendStats_DB = 0;
				int insertedCount_talendStats_DB = 0;
				int rejectedCount_talendStats_DB = 0;

				boolean whetherReject_talendStats_DB = false;

				java.sql.Connection conn_talendStats_DB = null;
				String dbUser_talendStats_DB = null;

				conn_talendStats_DB = (java.sql.Connection) globalMap
						.get("conn_connectionStatsLogs");

				int batchSize_talendStats_DB = 10000;
				int batchSizeCounter_talendStats_DB = 0;

				int count_talendStats_DB = 0;

				// [%connection%][checktable][tableName]
				String keyCheckTable_talendStats_DB = conn_talendStats_DB
						+ "[checktable]" + "[" + "statcatcher" + "]";

				if (GlobalResource.resourceMap
						.get(keyCheckTable_talendStats_DB) == null) {// }

					synchronized (GlobalResource.resourceLockMap
							.get(keyCheckTable_talendStats_DB)) {// }
						if (GlobalResource.resourceMap
								.get(keyCheckTable_talendStats_DB) == null) {// }
							java.sql.DatabaseMetaData dbMetaData_talendStats_DB = conn_talendStats_DB
									.getMetaData();
							boolean whetherExist_talendStats_DB = false;
							try (java.sql.ResultSet rsTable_talendStats_DB = dbMetaData_talendStats_DB
									.getTables(null, null, null,
											new String[] { "TABLE" })) {
								String defaultSchema_talendStats_DB = "public";
								if (dbschema_talendStats_DB == null
										|| dbschema_talendStats_DB.trim()
												.length() == 0) {
									try (java.sql.Statement stmtSchema_talendStats_DB = conn_talendStats_DB
											.createStatement();
											java.sql.ResultSet rsSchema_talendStats_DB = stmtSchema_talendStats_DB
													.executeQuery("select current_schema() ")) {
										while (rsSchema_talendStats_DB.next()) {
											defaultSchema_talendStats_DB = rsSchema_talendStats_DB
													.getString("current_schema");
										}
									}
								}
								while (rsTable_talendStats_DB.next()) {
									String table_talendStats_DB = rsTable_talendStats_DB
											.getString("TABLE_NAME");
									String schema_talendStats_DB = rsTable_talendStats_DB
											.getString("TABLE_SCHEM");
									if (table_talendStats_DB
											.equals("statcatcher")
											&& (schema_talendStats_DB
													.equals(dbschema_talendStats_DB) || ((dbschema_talendStats_DB == null || dbschema_talendStats_DB
													.trim().length() == 0) && defaultSchema_talendStats_DB
													.equals(schema_talendStats_DB)))) {
										whetherExist_talendStats_DB = true;
										break;
									}
								}
							}
							if (!whetherExist_talendStats_DB) {
								try (java.sql.Statement stmtCreate_talendStats_DB = conn_talendStats_DB
										.createStatement()) {
									stmtCreate_talendStats_DB
											.execute("CREATE TABLE \""
													+ tableName_talendStats_DB
													+ "\"(\"moment\" TIMESTAMP(0)  ,\"pid\" VARCHAR(20)  ,\"father_pid\" VARCHAR(20)  ,\"root_pid\" VARCHAR(20)  ,\"system_pid\" INT8 ,\"project\" VARCHAR(50)  ,\"job\" VARCHAR(255)  ,\"job_repository_id\" VARCHAR(255)  ,\"job_version\" VARCHAR(255)  ,\"context\" VARCHAR(50)  ,\"origin\" VARCHAR(255)  ,\"message_type\" VARCHAR(255)  ,\"message\" VARCHAR(255)  ,\"duration\" INT8 )");
								}
							}
							GlobalResource.resourceMap.put(
									keyCheckTable_talendStats_DB, true);
							// {{{
						} // end of if
					} // end synchronized
				}
				String insert_talendStats_DB = "INSERT INTO \""
						+ tableName_talendStats_DB
						+ "\" (\"moment\",\"pid\",\"father_pid\",\"root_pid\",\"system_pid\",\"project\",\"job\",\"job_repository_id\",\"job_version\",\"context\",\"origin\",\"message_type\",\"message\",\"duration\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_talendStats_DB = null;
				String keyPsmt_talendStats_DB = conn_talendStats_DB + "[psmt]"
						+ "[" + "statcatcher" + "]";
				pstmt_talendStats_DB = SharedDBPreparedStatement
						.getSharedPreparedStatement(conn_talendStats_DB,
								insert_talendStats_DB, keyPsmt_talendStats_DB);
				resourceMap.put("pstmt_talendStats_DB", pstmt_talendStats_DB);

				/**
				 * [talendStats_DB begin ] stop
				 */

				/**
				 * [talendStats_STATS begin ] start
				 */

				ok_Hash.put("talendStats_STATS", false);
				start_Hash.put("talendStats_STATS", System.currentTimeMillis());

				currentVirtualComponent = "talendStats_STATS";

				currentComponent = "talendStats_STATS";

				int tos_count_talendStats_STATS = 0;

				for (StatCatcherUtils.StatCatcherMessage scm : talendStats_STATS
						.getMessages()) {
					row_talendStats_STATS.pid = pid;
					row_talendStats_STATS.root_pid = rootPid;
					row_talendStats_STATS.father_pid = fatherPid;
					row_talendStats_STATS.project = projectName;
					row_talendStats_STATS.job = jobName;
					row_talendStats_STATS.context = contextStr;
					row_talendStats_STATS.origin = (scm.getOrigin() == null
							|| scm.getOrigin().length() < 1 ? null : scm
							.getOrigin());
					row_talendStats_STATS.message = scm.getMessage();
					row_talendStats_STATS.duration = scm.getDuration();
					row_talendStats_STATS.moment = scm.getMoment();
					row_talendStats_STATS.message_type = scm.getMessageType();
					row_talendStats_STATS.job_version = scm.getJobVersion();
					row_talendStats_STATS.job_repository_id = scm.getJobId();
					row_talendStats_STATS.system_pid = scm.getSystemPid();

					/**
					 * [talendStats_STATS begin ] stop
					 */

					/**
					 * [talendStats_STATS main ] start
					 */

					currentVirtualComponent = "talendStats_STATS";

					currentComponent = "talendStats_STATS";

					tos_count_talendStats_STATS++;

					/**
					 * [talendStats_STATS main ] stop
					 */

					/**
					 * [talendStats_STATS process_data_begin ] start
					 */

					currentVirtualComponent = "talendStats_STATS";

					currentComponent = "talendStats_STATS";

					/**
					 * [talendStats_STATS process_data_begin ] stop
					 */

					/**
					 * [talendStats_DB main ] start
					 */

					currentVirtualComponent = "talendStats_DB";

					currentComponent = "talendStats_DB";

					// Main
					// row_talendStats_STATS

					if (execStat) {
						runStat.updateStatOnConnection("Main" + iterateId, 1, 1);
					}

					whetherReject_talendStats_DB = false;
					if (row_talendStats_STATS.moment != null) {
						pstmt_talendStats_DB
								.setTimestamp(1, new java.sql.Timestamp(
										row_talendStats_STATS.moment.getTime()));
					} else {
						pstmt_talendStats_DB.setNull(1,
								java.sql.Types.TIMESTAMP);
					}

					if (row_talendStats_STATS.pid == null) {
						pstmt_talendStats_DB.setNull(2, java.sql.Types.VARCHAR);
					} else {
						pstmt_talendStats_DB.setString(2,
								row_talendStats_STATS.pid);
					}

					if (row_talendStats_STATS.father_pid == null) {
						pstmt_talendStats_DB.setNull(3, java.sql.Types.VARCHAR);
					} else {
						pstmt_talendStats_DB.setString(3,
								row_talendStats_STATS.father_pid);
					}

					if (row_talendStats_STATS.root_pid == null) {
						pstmt_talendStats_DB.setNull(4, java.sql.Types.VARCHAR);
					} else {
						pstmt_talendStats_DB.setString(4,
								row_talendStats_STATS.root_pid);
					}

					if (row_talendStats_STATS.system_pid == null) {
						pstmt_talendStats_DB.setNull(5, java.sql.Types.INTEGER);
					} else {
						pstmt_talendStats_DB.setLong(5,
								row_talendStats_STATS.system_pid);
					}

					if (row_talendStats_STATS.project == null) {
						pstmt_talendStats_DB.setNull(6, java.sql.Types.VARCHAR);
					} else {
						pstmt_talendStats_DB.setString(6,
								row_talendStats_STATS.project);
					}

					if (row_talendStats_STATS.job == null) {
						pstmt_talendStats_DB.setNull(7, java.sql.Types.VARCHAR);
					} else {
						pstmt_talendStats_DB.setString(7,
								row_talendStats_STATS.job);
					}

					if (row_talendStats_STATS.job_repository_id == null) {
						pstmt_talendStats_DB.setNull(8, java.sql.Types.VARCHAR);
					} else {
						pstmt_talendStats_DB.setString(8,
								row_talendStats_STATS.job_repository_id);
					}

					if (row_talendStats_STATS.job_version == null) {
						pstmt_talendStats_DB.setNull(9, java.sql.Types.VARCHAR);
					} else {
						pstmt_talendStats_DB.setString(9,
								row_talendStats_STATS.job_version);
					}

					if (row_talendStats_STATS.context == null) {
						pstmt_talendStats_DB
								.setNull(10, java.sql.Types.VARCHAR);
					} else {
						pstmt_talendStats_DB.setString(10,
								row_talendStats_STATS.context);
					}

					if (row_talendStats_STATS.origin == null) {
						pstmt_talendStats_DB
								.setNull(11, java.sql.Types.VARCHAR);
					} else {
						pstmt_talendStats_DB.setString(11,
								row_talendStats_STATS.origin);
					}

					if (row_talendStats_STATS.message_type == null) {
						pstmt_talendStats_DB
								.setNull(12, java.sql.Types.VARCHAR);
					} else {
						pstmt_talendStats_DB.setString(12,
								row_talendStats_STATS.message_type);
					}

					if (row_talendStats_STATS.message == null) {
						pstmt_talendStats_DB
								.setNull(13, java.sql.Types.VARCHAR);
					} else {
						pstmt_talendStats_DB.setString(13,
								row_talendStats_STATS.message);
					}

					if (row_talendStats_STATS.duration == null) {
						pstmt_talendStats_DB
								.setNull(14, java.sql.Types.INTEGER);
					} else {
						pstmt_talendStats_DB.setLong(14,
								row_talendStats_STATS.duration);
					}

					pstmt_talendStats_DB.addBatch();
					nb_line_talendStats_DB++;

					batchSizeCounter_talendStats_DB++;

					if ((batchSize_talendStats_DB > 0)
							&& (batchSize_talendStats_DB <= batchSizeCounter_talendStats_DB)) {
						try {
							int countSum_talendStats_DB = 0;

							for (int countEach_talendStats_DB : pstmt_talendStats_DB
									.executeBatch()) {
								countSum_talendStats_DB += (countEach_talendStats_DB < 0 ? 0
										: countEach_talendStats_DB);
							}

							insertedCount_talendStats_DB += countSum_talendStats_DB;

							batchSizeCounter_talendStats_DB = 0;
						} catch (java.sql.BatchUpdateException e_talendStats_DB) {
							java.sql.SQLException ne_talendStats_DB = e_talendStats_DB
									.getNextException(), sqle_talendStats_DB = null;
							String errormessage_talendStats_DB;
							if (ne_talendStats_DB != null) {
								// build new exception to provide the original
								// cause
								sqle_talendStats_DB = new java.sql.SQLException(
										e_talendStats_DB.getMessage()
												+ "\ncaused by: "
												+ ne_talendStats_DB
														.getMessage(),
										ne_talendStats_DB.getSQLState(),
										ne_talendStats_DB.getErrorCode(),
										ne_talendStats_DB);
								errormessage_talendStats_DB = sqle_talendStats_DB
										.getMessage();
							} else {
								errormessage_talendStats_DB = e_talendStats_DB
										.getMessage();
							}

							int countSum_talendStats_DB = 0;
							for (int countEach_talendStats_DB : e_talendStats_DB
									.getUpdateCounts()) {
								countSum_talendStats_DB += (countEach_talendStats_DB < 0 ? 0
										: countEach_talendStats_DB);
							}

							insertedCount_talendStats_DB += countSum_talendStats_DB;

							System.err.println(errormessage_talendStats_DB);

						}
					}

					tos_count_talendStats_DB++;

					/**
					 * [talendStats_DB main ] stop
					 */

					/**
					 * [talendStats_DB process_data_begin ] start
					 */

					currentVirtualComponent = "talendStats_DB";

					currentComponent = "talendStats_DB";

					/**
					 * [talendStats_DB process_data_begin ] stop
					 */

					/**
					 * [talendStats_DB process_data_end ] start
					 */

					currentVirtualComponent = "talendStats_DB";

					currentComponent = "talendStats_DB";

					/**
					 * [talendStats_DB process_data_end ] stop
					 */

					/**
					 * [talendStats_STATS process_data_end ] start
					 */

					currentVirtualComponent = "talendStats_STATS";

					currentComponent = "talendStats_STATS";

					/**
					 * [talendStats_STATS process_data_end ] stop
					 */

					/**
					 * [talendStats_STATS end ] start
					 */

					currentVirtualComponent = "talendStats_STATS";

					currentComponent = "talendStats_STATS";

				}

				ok_Hash.put("talendStats_STATS", true);
				end_Hash.put("talendStats_STATS", System.currentTimeMillis());

				/**
				 * [talendStats_STATS end ] stop
				 */

				/**
				 * [talendStats_DB end ] start
				 */

				currentVirtualComponent = "talendStats_DB";

				currentComponent = "talendStats_DB";

				try {
					int countSum_talendStats_DB = 0;
					if (pstmt_talendStats_DB != null
							&& batchSizeCounter_talendStats_DB > 0) {

						for (int countEach_talendStats_DB : pstmt_talendStats_DB
								.executeBatch()) {
							countSum_talendStats_DB += (countEach_talendStats_DB < 0 ? 0
									: countEach_talendStats_DB);
						}

					}

					insertedCount_talendStats_DB += countSum_talendStats_DB;

				} catch (java.sql.BatchUpdateException e_talendStats_DB) {
					java.sql.SQLException ne_talendStats_DB = e_talendStats_DB
							.getNextException(), sqle_talendStats_DB = null;
					String errormessage_talendStats_DB;
					if (ne_talendStats_DB != null) {
						// build new exception to provide the original cause
						sqle_talendStats_DB = new java.sql.SQLException(
								e_talendStats_DB.getMessage() + "\ncaused by: "
										+ ne_talendStats_DB.getMessage(),
								ne_talendStats_DB.getSQLState(),
								ne_talendStats_DB.getErrorCode(),
								ne_talendStats_DB);
						errormessage_talendStats_DB = sqle_talendStats_DB
								.getMessage();
					} else {
						errormessage_talendStats_DB = e_talendStats_DB
								.getMessage();
					}

					int countSum_talendStats_DB = 0;
					for (int countEach_talendStats_DB : e_talendStats_DB
							.getUpdateCounts()) {
						countSum_talendStats_DB += (countEach_talendStats_DB < 0 ? 0
								: countEach_talendStats_DB);
					}

					insertedCount_talendStats_DB += countSum_talendStats_DB;

					System.err.println(errormessage_talendStats_DB);

				}

				if (pstmt_talendStats_DB != null) {

					SharedDBPreparedStatement
							.releasePreparedStatement(keyPsmt_talendStats_DB);
				}
				resourceMap.put("statementClosed_talendStats_DB", true);

				nb_line_deleted_talendStats_DB = nb_line_deleted_talendStats_DB
						+ deletedCount_talendStats_DB;
				nb_line_update_talendStats_DB = nb_line_update_talendStats_DB
						+ updatedCount_talendStats_DB;
				nb_line_inserted_talendStats_DB = nb_line_inserted_talendStats_DB
						+ insertedCount_talendStats_DB;
				nb_line_rejected_talendStats_DB = nb_line_rejected_talendStats_DB
						+ rejectedCount_talendStats_DB;

				globalMap.put("talendStats_DB_NB_LINE", nb_line_talendStats_DB);
				globalMap.put("talendStats_DB_NB_LINE_UPDATED",
						nb_line_update_talendStats_DB);
				globalMap.put("talendStats_DB_NB_LINE_INSERTED",
						nb_line_inserted_talendStats_DB);
				globalMap.put("talendStats_DB_NB_LINE_DELETED",
						nb_line_deleted_talendStats_DB);
				globalMap.put("talendStats_DB_NB_LINE_REJECTED",
						nb_line_rejected_talendStats_DB);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("Main" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("talendStats_DB", true);
				end_Hash.put("talendStats_DB", System.currentTimeMillis());

				/**
				 * [talendStats_DB end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:talendStats_STATS:sub_ok_talendStats_connectionStatsLogs_Commit",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection(
						"sub_ok_talendStats_connectionStatsLogs_Commit", 0,
						"ok");
			}

			connectionStatsLogs_CommitProcess(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [talendStats_STATS finally ] start
				 */

				currentVirtualComponent = "talendStats_STATS";

				currentComponent = "talendStats_STATS";

				/**
				 * [talendStats_STATS finally ] stop
				 */

				/**
				 * [talendStats_DB finally ] start
				 */

				currentVirtualComponent = "talendStats_DB";

				currentComponent = "talendStats_DB";

				if (resourceMap.get("statementClosed_talendStats_DB") == null) {
					java.sql.PreparedStatement pstmtToClose_talendStats_DB = null;
					if ((pstmtToClose_talendStats_DB = (java.sql.PreparedStatement) resourceMap
							.remove("pstmt_talendStats_DB")) != null) {
						pstmtToClose_talendStats_DB.close();
					}
				}

				/**
				 * [talendStats_DB finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("talendStats_STATS_SUBPROCESS_STATE", 1);
	}

	public static class row_talendLogs_LOGSStruct implements
			routines.system.IPersistableRow<row_talendLogs_LOGSStruct> {
		final static byte[] commonByteArrayLock_DMINDICADORES_jovenes_accion_cruce_reporte_dos = new byte[0];
		static byte[] commonByteArray_DMINDICADORES_jovenes_accion_cruce_reporte_dos = new byte[0];

		public java.util.Date moment;

		public java.util.Date getMoment() {
			return this.moment;
		}

		public String pid;

		public String getPid() {
			return this.pid;
		}

		public String root_pid;

		public String getRoot_pid() {
			return this.root_pid;
		}

		public String father_pid;

		public String getFather_pid() {
			return this.father_pid;
		}

		public String project;

		public String getProject() {
			return this.project;
		}

		public String job;

		public String getJob() {
			return this.job;
		}

		public String context;

		public String getContext() {
			return this.context;
		}

		public Integer priority;

		public Integer getPriority() {
			return this.priority;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public String message;

		public String getMessage() {
			return this.message;
		}

		public Integer code;

		public Integer getCode() {
			return this.code;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DMINDICADORES_jovenes_accion_cruce_reporte_dos.length) {
					if (length < 1024
							&& commonByteArray_DMINDICADORES_jovenes_accion_cruce_reporte_dos.length == 0) {
						commonByteArray_DMINDICADORES_jovenes_accion_cruce_reporte_dos = new byte[1024];
					} else {
						commonByteArray_DMINDICADORES_jovenes_accion_cruce_reporte_dos = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_DMINDICADORES_jovenes_accion_cruce_reporte_dos,
						0, length);
				strReturn = new String(
						commonByteArray_DMINDICADORES_jovenes_accion_cruce_reporte_dos,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DMINDICADORES_jovenes_accion_cruce_reporte_dos) {

				try {

					int length = 0;

					this.moment = readDate(dis);

					this.pid = readString(dis);

					this.root_pid = readString(dis);

					this.father_pid = readString(dis);

					this.project = readString(dis);

					this.job = readString(dis);

					this.context = readString(dis);

					this.priority = readInteger(dis);

					this.type = readString(dis);

					this.origin = readString(dis);

					this.message = readString(dis);

					this.code = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.moment, dos);

				// String

				writeString(this.pid, dos);

				// String

				writeString(this.root_pid, dos);

				// String

				writeString(this.father_pid, dos);

				// String

				writeString(this.project, dos);

				// String

				writeString(this.job, dos);

				// String

				writeString(this.context, dos);

				// Integer

				writeInteger(this.priority, dos);

				// String

				writeString(this.type, dos);

				// String

				writeString(this.origin, dos);

				// String

				writeString(this.message, dos);

				// Integer

				writeInteger(this.code, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("moment=" + String.valueOf(moment));
			sb.append(",pid=" + pid);
			sb.append(",root_pid=" + root_pid);
			sb.append(",father_pid=" + father_pid);
			sb.append(",project=" + project);
			sb.append(",job=" + job);
			sb.append(",context=" + context);
			sb.append(",priority=" + String.valueOf(priority));
			sb.append(",type=" + type);
			sb.append(",origin=" + origin);
			sb.append(",message=" + message);
			sb.append(",code=" + String.valueOf(code));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_talendLogs_LOGSStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void talendLogs_LOGSProcess(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("talendLogs_LOGS_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row_talendLogs_LOGSStruct row_talendLogs_LOGS = new row_talendLogs_LOGSStruct();

				/**
				 * [talendLogs_DB begin ] start
				 */

				ok_Hash.put("talendLogs_DB", false);
				start_Hash.put("talendLogs_DB", System.currentTimeMillis());

				currentVirtualComponent = "talendLogs_DB";

				currentComponent = "talendLogs_DB";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("Main" + iterateId, 0, 0);

					}
				}

				int tos_count_talendLogs_DB = 0;

				String dbschema_talendLogs_DB = null;
				dbschema_talendLogs_DB = (String) globalMap.get("schema_"
						+ "connectionStatsLogs");

				String tableName_talendLogs_DB = null;
				if (dbschema_talendLogs_DB == null
						|| dbschema_talendLogs_DB.trim().length() == 0) {
					tableName_talendLogs_DB = "logcatcher";
				} else {
					tableName_talendLogs_DB = dbschema_talendLogs_DB + "\".\""
							+ "logcatcher";
				}

				int nb_line_talendLogs_DB = 0;
				int nb_line_update_talendLogs_DB = 0;
				int nb_line_inserted_talendLogs_DB = 0;
				int nb_line_deleted_talendLogs_DB = 0;
				int nb_line_rejected_talendLogs_DB = 0;

				int deletedCount_talendLogs_DB = 0;
				int updatedCount_talendLogs_DB = 0;
				int insertedCount_talendLogs_DB = 0;
				int rejectedCount_talendLogs_DB = 0;

				boolean whetherReject_talendLogs_DB = false;

				java.sql.Connection conn_talendLogs_DB = null;
				String dbUser_talendLogs_DB = null;

				conn_talendLogs_DB = (java.sql.Connection) globalMap
						.get("conn_connectionStatsLogs");

				int batchSize_talendLogs_DB = 10000;
				int batchSizeCounter_talendLogs_DB = 0;

				int count_talendLogs_DB = 0;

				// [%connection%][checktable][tableName]
				String keyCheckTable_talendLogs_DB = conn_talendLogs_DB
						+ "[checktable]" + "[" + "logcatcher" + "]";

				if (GlobalResource.resourceMap.get(keyCheckTable_talendLogs_DB) == null) {// }

					synchronized (GlobalResource.resourceLockMap
							.get(keyCheckTable_talendLogs_DB)) {// }
						if (GlobalResource.resourceMap
								.get(keyCheckTable_talendLogs_DB) == null) {// }
							java.sql.DatabaseMetaData dbMetaData_talendLogs_DB = conn_talendLogs_DB
									.getMetaData();
							boolean whetherExist_talendLogs_DB = false;
							try (java.sql.ResultSet rsTable_talendLogs_DB = dbMetaData_talendLogs_DB
									.getTables(null, null, null,
											new String[] { "TABLE" })) {
								String defaultSchema_talendLogs_DB = "public";
								if (dbschema_talendLogs_DB == null
										|| dbschema_talendLogs_DB.trim()
												.length() == 0) {
									try (java.sql.Statement stmtSchema_talendLogs_DB = conn_talendLogs_DB
											.createStatement();
											java.sql.ResultSet rsSchema_talendLogs_DB = stmtSchema_talendLogs_DB
													.executeQuery("select current_schema() ")) {
										while (rsSchema_talendLogs_DB.next()) {
											defaultSchema_talendLogs_DB = rsSchema_talendLogs_DB
													.getString("current_schema");
										}
									}
								}
								while (rsTable_talendLogs_DB.next()) {
									String table_talendLogs_DB = rsTable_talendLogs_DB
											.getString("TABLE_NAME");
									String schema_talendLogs_DB = rsTable_talendLogs_DB
											.getString("TABLE_SCHEM");
									if (table_talendLogs_DB
											.equals("logcatcher")
											&& (schema_talendLogs_DB
													.equals(dbschema_talendLogs_DB) || ((dbschema_talendLogs_DB == null || dbschema_talendLogs_DB
													.trim().length() == 0) && defaultSchema_talendLogs_DB
													.equals(schema_talendLogs_DB)))) {
										whetherExist_talendLogs_DB = true;
										break;
									}
								}
							}
							if (!whetherExist_talendLogs_DB) {
								try (java.sql.Statement stmtCreate_talendLogs_DB = conn_talendLogs_DB
										.createStatement()) {
									stmtCreate_talendLogs_DB
											.execute("CREATE TABLE \""
													+ tableName_talendLogs_DB
													+ "\"(\"moment\" TIMESTAMP(0)  ,\"pid\" VARCHAR(20)  ,\"root_pid\" VARCHAR(20)  ,\"father_pid\" VARCHAR(20)  ,\"project\" VARCHAR(50)  ,\"job\" VARCHAR(255)  ,\"context\" VARCHAR(50)  ,\"priority\" INT4 ,\"type\" VARCHAR(255)  ,\"origin\" VARCHAR(255)  ,\"message\" VARCHAR(255)  ,\"code\" INT4 )");
								}
							}
							GlobalResource.resourceMap.put(
									keyCheckTable_talendLogs_DB, true);
							// {{{
						} // end of if
					} // end synchronized
				}
				String insert_talendLogs_DB = "INSERT INTO \""
						+ tableName_talendLogs_DB
						+ "\" (\"moment\",\"pid\",\"root_pid\",\"father_pid\",\"project\",\"job\",\"context\",\"priority\",\"type\",\"origin\",\"message\",\"code\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_talendLogs_DB = null;
				String keyPsmt_talendLogs_DB = conn_talendLogs_DB + "[psmt]"
						+ "[" + "logcatcher" + "]";
				pstmt_talendLogs_DB = SharedDBPreparedStatement
						.getSharedPreparedStatement(conn_talendLogs_DB,
								insert_talendLogs_DB, keyPsmt_talendLogs_DB);
				resourceMap.put("pstmt_talendLogs_DB", pstmt_talendLogs_DB);

				/**
				 * [talendLogs_DB begin ] stop
				 */

				/**
				 * [talendLogs_LOGS begin ] start
				 */

				ok_Hash.put("talendLogs_LOGS", false);
				start_Hash.put("talendLogs_LOGS", System.currentTimeMillis());

				currentVirtualComponent = "talendLogs_LOGS";

				currentComponent = "talendLogs_LOGS";

				int tos_count_talendLogs_LOGS = 0;

				try {
					for (LogCatcherUtils.LogCatcherMessage lcm : talendLogs_LOGS
							.getMessages()) {
						row_talendLogs_LOGS.type = lcm.getType();
						row_talendLogs_LOGS.origin = (lcm.getOrigin() == null
								|| lcm.getOrigin().length() < 1 ? null : lcm
								.getOrigin());
						row_talendLogs_LOGS.priority = lcm.getPriority();
						row_talendLogs_LOGS.message = lcm.getMessage();
						row_talendLogs_LOGS.code = lcm.getCode();

						row_talendLogs_LOGS.moment = java.util.Calendar
								.getInstance().getTime();

						row_talendLogs_LOGS.pid = pid;
						row_talendLogs_LOGS.root_pid = rootPid;
						row_talendLogs_LOGS.father_pid = fatherPid;

						row_talendLogs_LOGS.project = projectName;
						row_talendLogs_LOGS.job = jobName;
						row_talendLogs_LOGS.context = contextStr;

						/**
						 * [talendLogs_LOGS begin ] stop
						 */

						/**
						 * [talendLogs_LOGS main ] start
						 */

						currentVirtualComponent = "talendLogs_LOGS";

						currentComponent = "talendLogs_LOGS";

						tos_count_talendLogs_LOGS++;

						/**
						 * [talendLogs_LOGS main ] stop
						 */

						/**
						 * [talendLogs_LOGS process_data_begin ] start
						 */

						currentVirtualComponent = "talendLogs_LOGS";

						currentComponent = "talendLogs_LOGS";

						/**
						 * [talendLogs_LOGS process_data_begin ] stop
						 */

						/**
						 * [talendLogs_DB main ] start
						 */

						currentVirtualComponent = "talendLogs_DB";

						currentComponent = "talendLogs_DB";

						// Main
						// row_talendLogs_LOGS

						if (execStat) {
							runStat.updateStatOnConnection("Main" + iterateId,
									1, 1);
						}

						whetherReject_talendLogs_DB = false;
						if (row_talendLogs_LOGS.moment != null) {
							pstmt_talendLogs_DB.setTimestamp(
									1,
									new java.sql.Timestamp(
											row_talendLogs_LOGS.moment
													.getTime()));
						} else {
							pstmt_talendLogs_DB.setNull(1,
									java.sql.Types.TIMESTAMP);
						}

						if (row_talendLogs_LOGS.pid == null) {
							pstmt_talendLogs_DB.setNull(2,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_talendLogs_DB.setString(2,
									row_talendLogs_LOGS.pid);
						}

						if (row_talendLogs_LOGS.root_pid == null) {
							pstmt_talendLogs_DB.setNull(3,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_talendLogs_DB.setString(3,
									row_talendLogs_LOGS.root_pid);
						}

						if (row_talendLogs_LOGS.father_pid == null) {
							pstmt_talendLogs_DB.setNull(4,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_talendLogs_DB.setString(4,
									row_talendLogs_LOGS.father_pid);
						}

						if (row_talendLogs_LOGS.project == null) {
							pstmt_talendLogs_DB.setNull(5,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_talendLogs_DB.setString(5,
									row_talendLogs_LOGS.project);
						}

						if (row_talendLogs_LOGS.job == null) {
							pstmt_talendLogs_DB.setNull(6,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_talendLogs_DB.setString(6,
									row_talendLogs_LOGS.job);
						}

						if (row_talendLogs_LOGS.context == null) {
							pstmt_talendLogs_DB.setNull(7,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_talendLogs_DB.setString(7,
									row_talendLogs_LOGS.context);
						}

						if (row_talendLogs_LOGS.priority == null) {
							pstmt_talendLogs_DB.setNull(8,
									java.sql.Types.INTEGER);
						} else {
							pstmt_talendLogs_DB.setInt(8,
									row_talendLogs_LOGS.priority);
						}

						if (row_talendLogs_LOGS.type == null) {
							pstmt_talendLogs_DB.setNull(9,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_talendLogs_DB.setString(9,
									row_talendLogs_LOGS.type);
						}

						if (row_talendLogs_LOGS.origin == null) {
							pstmt_talendLogs_DB.setNull(10,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_talendLogs_DB.setString(10,
									row_talendLogs_LOGS.origin);
						}

						if (row_talendLogs_LOGS.message == null) {
							pstmt_talendLogs_DB.setNull(11,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_talendLogs_DB.setString(11,
									row_talendLogs_LOGS.message);
						}

						if (row_talendLogs_LOGS.code == null) {
							pstmt_talendLogs_DB.setNull(12,
									java.sql.Types.INTEGER);
						} else {
							pstmt_talendLogs_DB.setInt(12,
									row_talendLogs_LOGS.code);
						}

						pstmt_talendLogs_DB.addBatch();
						nb_line_talendLogs_DB++;

						batchSizeCounter_talendLogs_DB++;

						if ((batchSize_talendLogs_DB > 0)
								&& (batchSize_talendLogs_DB <= batchSizeCounter_talendLogs_DB)) {
							try {
								int countSum_talendLogs_DB = 0;

								for (int countEach_talendLogs_DB : pstmt_talendLogs_DB
										.executeBatch()) {
									countSum_talendLogs_DB += (countEach_talendLogs_DB < 0 ? 0
											: countEach_talendLogs_DB);
								}

								insertedCount_talendLogs_DB += countSum_talendLogs_DB;

								batchSizeCounter_talendLogs_DB = 0;
							} catch (java.sql.BatchUpdateException e_talendLogs_DB) {
								java.sql.SQLException ne_talendLogs_DB = e_talendLogs_DB
										.getNextException(), sqle_talendLogs_DB = null;
								String errormessage_talendLogs_DB;
								if (ne_talendLogs_DB != null) {
									// build new exception to provide the
									// original cause
									sqle_talendLogs_DB = new java.sql.SQLException(
											e_talendLogs_DB.getMessage()
													+ "\ncaused by: "
													+ ne_talendLogs_DB
															.getMessage(),
											ne_talendLogs_DB.getSQLState(),
											ne_talendLogs_DB.getErrorCode(),
											ne_talendLogs_DB);
									errormessage_talendLogs_DB = sqle_talendLogs_DB
											.getMessage();
								} else {
									errormessage_talendLogs_DB = e_talendLogs_DB
											.getMessage();
								}

								int countSum_talendLogs_DB = 0;
								for (int countEach_talendLogs_DB : e_talendLogs_DB
										.getUpdateCounts()) {
									countSum_talendLogs_DB += (countEach_talendLogs_DB < 0 ? 0
											: countEach_talendLogs_DB);
								}

								insertedCount_talendLogs_DB += countSum_talendLogs_DB;

								System.err.println(errormessage_talendLogs_DB);

							}
						}

						tos_count_talendLogs_DB++;

						/**
						 * [talendLogs_DB main ] stop
						 */

						/**
						 * [talendLogs_DB process_data_begin ] start
						 */

						currentVirtualComponent = "talendLogs_DB";

						currentComponent = "talendLogs_DB";

						/**
						 * [talendLogs_DB process_data_begin ] stop
						 */

						/**
						 * [talendLogs_DB process_data_end ] start
						 */

						currentVirtualComponent = "talendLogs_DB";

						currentComponent = "talendLogs_DB";

						/**
						 * [talendLogs_DB process_data_end ] stop
						 */

						/**
						 * [talendLogs_LOGS process_data_end ] start
						 */

						currentVirtualComponent = "talendLogs_LOGS";

						currentComponent = "talendLogs_LOGS";

						/**
						 * [talendLogs_LOGS process_data_end ] stop
						 */

						/**
						 * [talendLogs_LOGS end ] start
						 */

						currentVirtualComponent = "talendLogs_LOGS";

						currentComponent = "talendLogs_LOGS";

					}
				} catch (Exception e_talendLogs_LOGS) {
					logIgnoredError(
							String.format(
									"talendLogs_LOGS - tLogCatcher failed to process log message(s) due to internal error: %s",
									e_talendLogs_LOGS), e_talendLogs_LOGS);
				}

				ok_Hash.put("talendLogs_LOGS", true);
				end_Hash.put("talendLogs_LOGS", System.currentTimeMillis());

				/**
				 * [talendLogs_LOGS end ] stop
				 */

				/**
				 * [talendLogs_DB end ] start
				 */

				currentVirtualComponent = "talendLogs_DB";

				currentComponent = "talendLogs_DB";

				try {
					int countSum_talendLogs_DB = 0;
					if (pstmt_talendLogs_DB != null
							&& batchSizeCounter_talendLogs_DB > 0) {

						for (int countEach_talendLogs_DB : pstmt_talendLogs_DB
								.executeBatch()) {
							countSum_talendLogs_DB += (countEach_talendLogs_DB < 0 ? 0
									: countEach_talendLogs_DB);
						}

					}

					insertedCount_talendLogs_DB += countSum_talendLogs_DB;

				} catch (java.sql.BatchUpdateException e_talendLogs_DB) {
					java.sql.SQLException ne_talendLogs_DB = e_talendLogs_DB
							.getNextException(), sqle_talendLogs_DB = null;
					String errormessage_talendLogs_DB;
					if (ne_talendLogs_DB != null) {
						// build new exception to provide the original cause
						sqle_talendLogs_DB = new java.sql.SQLException(
								e_talendLogs_DB.getMessage() + "\ncaused by: "
										+ ne_talendLogs_DB.getMessage(),
								ne_talendLogs_DB.getSQLState(),
								ne_talendLogs_DB.getErrorCode(),
								ne_talendLogs_DB);
						errormessage_talendLogs_DB = sqle_talendLogs_DB
								.getMessage();
					} else {
						errormessage_talendLogs_DB = e_talendLogs_DB
								.getMessage();
					}

					int countSum_talendLogs_DB = 0;
					for (int countEach_talendLogs_DB : e_talendLogs_DB
							.getUpdateCounts()) {
						countSum_talendLogs_DB += (countEach_talendLogs_DB < 0 ? 0
								: countEach_talendLogs_DB);
					}

					insertedCount_talendLogs_DB += countSum_talendLogs_DB;

					System.err.println(errormessage_talendLogs_DB);

				}

				if (pstmt_talendLogs_DB != null) {

					SharedDBPreparedStatement
							.releasePreparedStatement(keyPsmt_talendLogs_DB);
				}
				resourceMap.put("statementClosed_talendLogs_DB", true);

				nb_line_deleted_talendLogs_DB = nb_line_deleted_talendLogs_DB
						+ deletedCount_talendLogs_DB;
				nb_line_update_talendLogs_DB = nb_line_update_talendLogs_DB
						+ updatedCount_talendLogs_DB;
				nb_line_inserted_talendLogs_DB = nb_line_inserted_talendLogs_DB
						+ insertedCount_talendLogs_DB;
				nb_line_rejected_talendLogs_DB = nb_line_rejected_talendLogs_DB
						+ rejectedCount_talendLogs_DB;

				globalMap.put("talendLogs_DB_NB_LINE", nb_line_talendLogs_DB);
				globalMap.put("talendLogs_DB_NB_LINE_UPDATED",
						nb_line_update_talendLogs_DB);
				globalMap.put("talendLogs_DB_NB_LINE_INSERTED",
						nb_line_inserted_talendLogs_DB);
				globalMap.put("talendLogs_DB_NB_LINE_DELETED",
						nb_line_deleted_talendLogs_DB);
				globalMap.put("talendLogs_DB_NB_LINE_REJECTED",
						nb_line_rejected_talendLogs_DB);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("Main" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("talendLogs_DB", true);
				end_Hash.put("talendLogs_DB", System.currentTimeMillis());

				/**
				 * [talendLogs_DB end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:talendLogs_LOGS:sub_ok_talendLogs_connectionStatsLogs_Commit",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection(
						"sub_ok_talendLogs_connectionStatsLogs_Commit", 0, "ok");
			}

			connectionStatsLogs_CommitProcess(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [talendLogs_LOGS finally ] start
				 */

				currentVirtualComponent = "talendLogs_LOGS";

				currentComponent = "talendLogs_LOGS";

				/**
				 * [talendLogs_LOGS finally ] stop
				 */

				/**
				 * [talendLogs_DB finally ] start
				 */

				currentVirtualComponent = "talendLogs_DB";

				currentComponent = "talendLogs_DB";

				if (resourceMap.get("statementClosed_talendLogs_DB") == null) {
					java.sql.PreparedStatement pstmtToClose_talendLogs_DB = null;
					if ((pstmtToClose_talendLogs_DB = (java.sql.PreparedStatement) resourceMap
							.remove("pstmt_talendLogs_DB")) != null) {
						pstmtToClose_talendLogs_DB.close();
					}
				}

				/**
				 * [talendLogs_DB finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("talendLogs_LOGS_SUBPROCESS_STATE", 1);
	}

	public static class row_talendMeter_METTERStruct implements
			routines.system.IPersistableRow<row_talendMeter_METTERStruct> {
		final static byte[] commonByteArrayLock_DMINDICADORES_jovenes_accion_cruce_reporte_dos = new byte[0];
		static byte[] commonByteArray_DMINDICADORES_jovenes_accion_cruce_reporte_dos = new byte[0];

		public java.util.Date moment;

		public java.util.Date getMoment() {
			return this.moment;
		}

		public String pid;

		public String getPid() {
			return this.pid;
		}

		public String father_pid;

		public String getFather_pid() {
			return this.father_pid;
		}

		public String root_pid;

		public String getRoot_pid() {
			return this.root_pid;
		}

		public Long system_pid;

		public Long getSystem_pid() {
			return this.system_pid;
		}

		public String project;

		public String getProject() {
			return this.project;
		}

		public String job;

		public String getJob() {
			return this.job;
		}

		public String job_repository_id;

		public String getJob_repository_id() {
			return this.job_repository_id;
		}

		public String job_version;

		public String getJob_version() {
			return this.job_version;
		}

		public String context;

		public String getContext() {
			return this.context;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public String label;

		public String getLabel() {
			return this.label;
		}

		public Integer count;

		public Integer getCount() {
			return this.count;
		}

		public Integer reference;

		public Integer getReference() {
			return this.reference;
		}

		public String thresholds;

		public String getThresholds() {
			return this.thresholds;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DMINDICADORES_jovenes_accion_cruce_reporte_dos.length) {
					if (length < 1024
							&& commonByteArray_DMINDICADORES_jovenes_accion_cruce_reporte_dos.length == 0) {
						commonByteArray_DMINDICADORES_jovenes_accion_cruce_reporte_dos = new byte[1024];
					} else {
						commonByteArray_DMINDICADORES_jovenes_accion_cruce_reporte_dos = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_DMINDICADORES_jovenes_accion_cruce_reporte_dos,
						0, length);
				strReturn = new String(
						commonByteArray_DMINDICADORES_jovenes_accion_cruce_reporte_dos,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DMINDICADORES_jovenes_accion_cruce_reporte_dos) {

				try {

					int length = 0;

					this.moment = readDate(dis);

					this.pid = readString(dis);

					this.father_pid = readString(dis);

					this.root_pid = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.system_pid = null;
					} else {
						this.system_pid = dis.readLong();
					}

					this.project = readString(dis);

					this.job = readString(dis);

					this.job_repository_id = readString(dis);

					this.job_version = readString(dis);

					this.context = readString(dis);

					this.origin = readString(dis);

					this.label = readString(dis);

					this.count = readInteger(dis);

					this.reference = readInteger(dis);

					this.thresholds = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.moment, dos);

				// String

				writeString(this.pid, dos);

				// String

				writeString(this.father_pid, dos);

				// String

				writeString(this.root_pid, dos);

				// Long

				if (this.system_pid == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.system_pid);
				}

				// String

				writeString(this.project, dos);

				// String

				writeString(this.job, dos);

				// String

				writeString(this.job_repository_id, dos);

				// String

				writeString(this.job_version, dos);

				// String

				writeString(this.context, dos);

				// String

				writeString(this.origin, dos);

				// String

				writeString(this.label, dos);

				// Integer

				writeInteger(this.count, dos);

				// Integer

				writeInteger(this.reference, dos);

				// String

				writeString(this.thresholds, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("moment=" + String.valueOf(moment));
			sb.append(",pid=" + pid);
			sb.append(",father_pid=" + father_pid);
			sb.append(",root_pid=" + root_pid);
			sb.append(",system_pid=" + String.valueOf(system_pid));
			sb.append(",project=" + project);
			sb.append(",job=" + job);
			sb.append(",job_repository_id=" + job_repository_id);
			sb.append(",job_version=" + job_version);
			sb.append(",context=" + context);
			sb.append(",origin=" + origin);
			sb.append(",label=" + label);
			sb.append(",count=" + String.valueOf(count));
			sb.append(",reference=" + String.valueOf(reference));
			sb.append(",thresholds=" + thresholds);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_talendMeter_METTERStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void talendMeter_METTERProcess(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("talendMeter_METTER_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row_talendMeter_METTERStruct row_talendMeter_METTER = new row_talendMeter_METTERStruct();

				/**
				 * [talendMeter_DB begin ] start
				 */

				ok_Hash.put("talendMeter_DB", false);
				start_Hash.put("talendMeter_DB", System.currentTimeMillis());

				currentVirtualComponent = "talendMeter_DB";

				currentComponent = "talendMeter_DB";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("Main" + iterateId, 0, 0);

					}
				}

				int tos_count_talendMeter_DB = 0;

				String dbschema_talendMeter_DB = null;
				dbschema_talendMeter_DB = (String) globalMap.get("schema_"
						+ "connectionStatsLogs");

				String tableName_talendMeter_DB = null;
				if (dbschema_talendMeter_DB == null
						|| dbschema_talendMeter_DB.trim().length() == 0) {
					tableName_talendMeter_DB = "flowmetercatcher";
				} else {
					tableName_talendMeter_DB = dbschema_talendMeter_DB
							+ "\".\"" + "flowmetercatcher";
				}

				int nb_line_talendMeter_DB = 0;
				int nb_line_update_talendMeter_DB = 0;
				int nb_line_inserted_talendMeter_DB = 0;
				int nb_line_deleted_talendMeter_DB = 0;
				int nb_line_rejected_talendMeter_DB = 0;

				int deletedCount_talendMeter_DB = 0;
				int updatedCount_talendMeter_DB = 0;
				int insertedCount_talendMeter_DB = 0;
				int rejectedCount_talendMeter_DB = 0;

				boolean whetherReject_talendMeter_DB = false;

				java.sql.Connection conn_talendMeter_DB = null;
				String dbUser_talendMeter_DB = null;

				conn_talendMeter_DB = (java.sql.Connection) globalMap
						.get("conn_connectionStatsLogs");

				int batchSize_talendMeter_DB = 10000;
				int batchSizeCounter_talendMeter_DB = 0;

				int count_talendMeter_DB = 0;

				// [%connection%][checktable][tableName]
				String keyCheckTable_talendMeter_DB = conn_talendMeter_DB
						+ "[checktable]" + "[" + "flowmetercatcher" + "]";

				if (GlobalResource.resourceMap
						.get(keyCheckTable_talendMeter_DB) == null) {// }

					synchronized (GlobalResource.resourceLockMap
							.get(keyCheckTable_talendMeter_DB)) {// }
						if (GlobalResource.resourceMap
								.get(keyCheckTable_talendMeter_DB) == null) {// }
							java.sql.DatabaseMetaData dbMetaData_talendMeter_DB = conn_talendMeter_DB
									.getMetaData();
							boolean whetherExist_talendMeter_DB = false;
							try (java.sql.ResultSet rsTable_talendMeter_DB = dbMetaData_talendMeter_DB
									.getTables(null, null, null,
											new String[] { "TABLE" })) {
								String defaultSchema_talendMeter_DB = "public";
								if (dbschema_talendMeter_DB == null
										|| dbschema_talendMeter_DB.trim()
												.length() == 0) {
									try (java.sql.Statement stmtSchema_talendMeter_DB = conn_talendMeter_DB
											.createStatement();
											java.sql.ResultSet rsSchema_talendMeter_DB = stmtSchema_talendMeter_DB
													.executeQuery("select current_schema() ")) {
										while (rsSchema_talendMeter_DB.next()) {
											defaultSchema_talendMeter_DB = rsSchema_talendMeter_DB
													.getString("current_schema");
										}
									}
								}
								while (rsTable_talendMeter_DB.next()) {
									String table_talendMeter_DB = rsTable_talendMeter_DB
											.getString("TABLE_NAME");
									String schema_talendMeter_DB = rsTable_talendMeter_DB
											.getString("TABLE_SCHEM");
									if (table_talendMeter_DB
											.equals("flowmetercatcher")
											&& (schema_talendMeter_DB
													.equals(dbschema_talendMeter_DB) || ((dbschema_talendMeter_DB == null || dbschema_talendMeter_DB
													.trim().length() == 0) && defaultSchema_talendMeter_DB
													.equals(schema_talendMeter_DB)))) {
										whetherExist_talendMeter_DB = true;
										break;
									}
								}
							}
							if (!whetherExist_talendMeter_DB) {
								try (java.sql.Statement stmtCreate_talendMeter_DB = conn_talendMeter_DB
										.createStatement()) {
									stmtCreate_talendMeter_DB
											.execute("CREATE TABLE \""
													+ tableName_talendMeter_DB
													+ "\"(\"moment\" TIMESTAMP(0)  ,\"pid\" VARCHAR(20)  ,\"father_pid\" VARCHAR(20)  ,\"root_pid\" VARCHAR(20)  ,\"system_pid\" INT8 ,\"project\" VARCHAR(50)  ,\"job\" VARCHAR(255)  ,\"job_repository_id\" VARCHAR(255)  ,\"job_version\" VARCHAR(255)  ,\"context\" VARCHAR(50)  ,\"origin\" VARCHAR(255)  ,\"label\" VARCHAR(255)  ,\"count\" INT4 ,\"reference\" INT4 ,\"thresholds\" VARCHAR(255)  )");
								}
							}
							GlobalResource.resourceMap.put(
									keyCheckTable_talendMeter_DB, true);
							// {{{
						} // end of if
					} // end synchronized
				}
				String insert_talendMeter_DB = "INSERT INTO \""
						+ tableName_talendMeter_DB
						+ "\" (\"moment\",\"pid\",\"father_pid\",\"root_pid\",\"system_pid\",\"project\",\"job\",\"job_repository_id\",\"job_version\",\"context\",\"origin\",\"label\",\"count\",\"reference\",\"thresholds\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_talendMeter_DB = null;
				String keyPsmt_talendMeter_DB = conn_talendMeter_DB + "[psmt]"
						+ "[" + "flowmetercatcher" + "]";
				pstmt_talendMeter_DB = SharedDBPreparedStatement
						.getSharedPreparedStatement(conn_talendMeter_DB,
								insert_talendMeter_DB, keyPsmt_talendMeter_DB);
				resourceMap.put("pstmt_talendMeter_DB", pstmt_talendMeter_DB);

				/**
				 * [talendMeter_DB begin ] stop
				 */

				/**
				 * [talendMeter_METTER begin ] start
				 */

				ok_Hash.put("talendMeter_METTER", false);
				start_Hash
						.put("talendMeter_METTER", System.currentTimeMillis());

				currentVirtualComponent = "talendMeter_METTER";

				currentComponent = "talendMeter_METTER";

				int tos_count_talendMeter_METTER = 0;

				for (MetterCatcherUtils.MetterCatcherMessage mcm : talendMeter_METTER
						.getMessages()) {
					row_talendMeter_METTER.pid = pid;
					row_talendMeter_METTER.root_pid = rootPid;
					row_talendMeter_METTER.father_pid = fatherPid;
					row_talendMeter_METTER.project = projectName;
					row_talendMeter_METTER.job = jobName;
					row_talendMeter_METTER.context = contextStr;
					row_talendMeter_METTER.origin = (mcm.getOrigin() == null
							|| mcm.getOrigin().length() < 1 ? null : mcm
							.getOrigin());
					row_talendMeter_METTER.moment = mcm.getMoment();
					row_talendMeter_METTER.job_version = mcm.getJobVersion();
					row_talendMeter_METTER.job_repository_id = mcm.getJobId();
					row_talendMeter_METTER.system_pid = mcm.getSystemPid();
					row_talendMeter_METTER.label = mcm.getLabel();
					row_talendMeter_METTER.count = mcm.getCount();
					row_talendMeter_METTER.reference = talendMeter_METTER
							.getConnLinesCount(mcm.getReferense() + "_count");
					row_talendMeter_METTER.thresholds = mcm.getThresholds();

					/**
					 * [talendMeter_METTER begin ] stop
					 */

					/**
					 * [talendMeter_METTER main ] start
					 */

					currentVirtualComponent = "talendMeter_METTER";

					currentComponent = "talendMeter_METTER";

					tos_count_talendMeter_METTER++;

					/**
					 * [talendMeter_METTER main ] stop
					 */

					/**
					 * [talendMeter_METTER process_data_begin ] start
					 */

					currentVirtualComponent = "talendMeter_METTER";

					currentComponent = "talendMeter_METTER";

					/**
					 * [talendMeter_METTER process_data_begin ] stop
					 */

					/**
					 * [talendMeter_DB main ] start
					 */

					currentVirtualComponent = "talendMeter_DB";

					currentComponent = "talendMeter_DB";

					// Main
					// row_talendMeter_METTER

					if (execStat) {
						runStat.updateStatOnConnection("Main" + iterateId, 1, 1);
					}

					whetherReject_talendMeter_DB = false;
					if (row_talendMeter_METTER.moment != null) {
						pstmt_talendMeter_DB
								.setTimestamp(
										1,
										new java.sql.Timestamp(
												row_talendMeter_METTER.moment
														.getTime()));
					} else {
						pstmt_talendMeter_DB.setNull(1,
								java.sql.Types.TIMESTAMP);
					}

					if (row_talendMeter_METTER.pid == null) {
						pstmt_talendMeter_DB.setNull(2, java.sql.Types.VARCHAR);
					} else {
						pstmt_talendMeter_DB.setString(2,
								row_talendMeter_METTER.pid);
					}

					if (row_talendMeter_METTER.father_pid == null) {
						pstmt_talendMeter_DB.setNull(3, java.sql.Types.VARCHAR);
					} else {
						pstmt_talendMeter_DB.setString(3,
								row_talendMeter_METTER.father_pid);
					}

					if (row_talendMeter_METTER.root_pid == null) {
						pstmt_talendMeter_DB.setNull(4, java.sql.Types.VARCHAR);
					} else {
						pstmt_talendMeter_DB.setString(4,
								row_talendMeter_METTER.root_pid);
					}

					if (row_talendMeter_METTER.system_pid == null) {
						pstmt_talendMeter_DB.setNull(5, java.sql.Types.INTEGER);
					} else {
						pstmt_talendMeter_DB.setLong(5,
								row_talendMeter_METTER.system_pid);
					}

					if (row_talendMeter_METTER.project == null) {
						pstmt_talendMeter_DB.setNull(6, java.sql.Types.VARCHAR);
					} else {
						pstmt_talendMeter_DB.setString(6,
								row_talendMeter_METTER.project);
					}

					if (row_talendMeter_METTER.job == null) {
						pstmt_talendMeter_DB.setNull(7, java.sql.Types.VARCHAR);
					} else {
						pstmt_talendMeter_DB.setString(7,
								row_talendMeter_METTER.job);
					}

					if (row_talendMeter_METTER.job_repository_id == null) {
						pstmt_talendMeter_DB.setNull(8, java.sql.Types.VARCHAR);
					} else {
						pstmt_talendMeter_DB.setString(8,
								row_talendMeter_METTER.job_repository_id);
					}

					if (row_talendMeter_METTER.job_version == null) {
						pstmt_talendMeter_DB.setNull(9, java.sql.Types.VARCHAR);
					} else {
						pstmt_talendMeter_DB.setString(9,
								row_talendMeter_METTER.job_version);
					}

					if (row_talendMeter_METTER.context == null) {
						pstmt_talendMeter_DB
								.setNull(10, java.sql.Types.VARCHAR);
					} else {
						pstmt_talendMeter_DB.setString(10,
								row_talendMeter_METTER.context);
					}

					if (row_talendMeter_METTER.origin == null) {
						pstmt_talendMeter_DB
								.setNull(11, java.sql.Types.VARCHAR);
					} else {
						pstmt_talendMeter_DB.setString(11,
								row_talendMeter_METTER.origin);
					}

					if (row_talendMeter_METTER.label == null) {
						pstmt_talendMeter_DB
								.setNull(12, java.sql.Types.VARCHAR);
					} else {
						pstmt_talendMeter_DB.setString(12,
								row_talendMeter_METTER.label);
					}

					if (row_talendMeter_METTER.count == null) {
						pstmt_talendMeter_DB
								.setNull(13, java.sql.Types.INTEGER);
					} else {
						pstmt_talendMeter_DB.setInt(13,
								row_talendMeter_METTER.count);
					}

					if (row_talendMeter_METTER.reference == null) {
						pstmt_talendMeter_DB
								.setNull(14, java.sql.Types.INTEGER);
					} else {
						pstmt_talendMeter_DB.setInt(14,
								row_talendMeter_METTER.reference);
					}

					if (row_talendMeter_METTER.thresholds == null) {
						pstmt_talendMeter_DB
								.setNull(15, java.sql.Types.VARCHAR);
					} else {
						pstmt_talendMeter_DB.setString(15,
								row_talendMeter_METTER.thresholds);
					}

					pstmt_talendMeter_DB.addBatch();
					nb_line_talendMeter_DB++;

					batchSizeCounter_talendMeter_DB++;

					if ((batchSize_talendMeter_DB > 0)
							&& (batchSize_talendMeter_DB <= batchSizeCounter_talendMeter_DB)) {
						try {
							int countSum_talendMeter_DB = 0;

							for (int countEach_talendMeter_DB : pstmt_talendMeter_DB
									.executeBatch()) {
								countSum_talendMeter_DB += (countEach_talendMeter_DB < 0 ? 0
										: countEach_talendMeter_DB);
							}

							insertedCount_talendMeter_DB += countSum_talendMeter_DB;

							batchSizeCounter_talendMeter_DB = 0;
						} catch (java.sql.BatchUpdateException e_talendMeter_DB) {
							java.sql.SQLException ne_talendMeter_DB = e_talendMeter_DB
									.getNextException(), sqle_talendMeter_DB = null;
							String errormessage_talendMeter_DB;
							if (ne_talendMeter_DB != null) {
								// build new exception to provide the original
								// cause
								sqle_talendMeter_DB = new java.sql.SQLException(
										e_talendMeter_DB.getMessage()
												+ "\ncaused by: "
												+ ne_talendMeter_DB
														.getMessage(),
										ne_talendMeter_DB.getSQLState(),
										ne_talendMeter_DB.getErrorCode(),
										ne_talendMeter_DB);
								errormessage_talendMeter_DB = sqle_talendMeter_DB
										.getMessage();
							} else {
								errormessage_talendMeter_DB = e_talendMeter_DB
										.getMessage();
							}

							int countSum_talendMeter_DB = 0;
							for (int countEach_talendMeter_DB : e_talendMeter_DB
									.getUpdateCounts()) {
								countSum_talendMeter_DB += (countEach_talendMeter_DB < 0 ? 0
										: countEach_talendMeter_DB);
							}

							insertedCount_talendMeter_DB += countSum_talendMeter_DB;

							System.err.println(errormessage_talendMeter_DB);

						}
					}

					tos_count_talendMeter_DB++;

					/**
					 * [talendMeter_DB main ] stop
					 */

					/**
					 * [talendMeter_DB process_data_begin ] start
					 */

					currentVirtualComponent = "talendMeter_DB";

					currentComponent = "talendMeter_DB";

					/**
					 * [talendMeter_DB process_data_begin ] stop
					 */

					/**
					 * [talendMeter_DB process_data_end ] start
					 */

					currentVirtualComponent = "talendMeter_DB";

					currentComponent = "talendMeter_DB";

					/**
					 * [talendMeter_DB process_data_end ] stop
					 */

					/**
					 * [talendMeter_METTER process_data_end ] start
					 */

					currentVirtualComponent = "talendMeter_METTER";

					currentComponent = "talendMeter_METTER";

					/**
					 * [talendMeter_METTER process_data_end ] stop
					 */

					/**
					 * [talendMeter_METTER end ] start
					 */

					currentVirtualComponent = "talendMeter_METTER";

					currentComponent = "talendMeter_METTER";

				}

				ok_Hash.put("talendMeter_METTER", true);
				end_Hash.put("talendMeter_METTER", System.currentTimeMillis());

				/**
				 * [talendMeter_METTER end ] stop
				 */

				/**
				 * [talendMeter_DB end ] start
				 */

				currentVirtualComponent = "talendMeter_DB";

				currentComponent = "talendMeter_DB";

				try {
					int countSum_talendMeter_DB = 0;
					if (pstmt_talendMeter_DB != null
							&& batchSizeCounter_talendMeter_DB > 0) {

						for (int countEach_talendMeter_DB : pstmt_talendMeter_DB
								.executeBatch()) {
							countSum_talendMeter_DB += (countEach_talendMeter_DB < 0 ? 0
									: countEach_talendMeter_DB);
						}

					}

					insertedCount_talendMeter_DB += countSum_talendMeter_DB;

				} catch (java.sql.BatchUpdateException e_talendMeter_DB) {
					java.sql.SQLException ne_talendMeter_DB = e_talendMeter_DB
							.getNextException(), sqle_talendMeter_DB = null;
					String errormessage_talendMeter_DB;
					if (ne_talendMeter_DB != null) {
						// build new exception to provide the original cause
						sqle_talendMeter_DB = new java.sql.SQLException(
								e_talendMeter_DB.getMessage() + "\ncaused by: "
										+ ne_talendMeter_DB.getMessage(),
								ne_talendMeter_DB.getSQLState(),
								ne_talendMeter_DB.getErrorCode(),
								ne_talendMeter_DB);
						errormessage_talendMeter_DB = sqle_talendMeter_DB
								.getMessage();
					} else {
						errormessage_talendMeter_DB = e_talendMeter_DB
								.getMessage();
					}

					int countSum_talendMeter_DB = 0;
					for (int countEach_talendMeter_DB : e_talendMeter_DB
							.getUpdateCounts()) {
						countSum_talendMeter_DB += (countEach_talendMeter_DB < 0 ? 0
								: countEach_talendMeter_DB);
					}

					insertedCount_talendMeter_DB += countSum_talendMeter_DB;

					System.err.println(errormessage_talendMeter_DB);

				}

				if (pstmt_talendMeter_DB != null) {

					SharedDBPreparedStatement
							.releasePreparedStatement(keyPsmt_talendMeter_DB);
				}
				resourceMap.put("statementClosed_talendMeter_DB", true);

				nb_line_deleted_talendMeter_DB = nb_line_deleted_talendMeter_DB
						+ deletedCount_talendMeter_DB;
				nb_line_update_talendMeter_DB = nb_line_update_talendMeter_DB
						+ updatedCount_talendMeter_DB;
				nb_line_inserted_talendMeter_DB = nb_line_inserted_talendMeter_DB
						+ insertedCount_talendMeter_DB;
				nb_line_rejected_talendMeter_DB = nb_line_rejected_talendMeter_DB
						+ rejectedCount_talendMeter_DB;

				globalMap.put("talendMeter_DB_NB_LINE", nb_line_talendMeter_DB);
				globalMap.put("talendMeter_DB_NB_LINE_UPDATED",
						nb_line_update_talendMeter_DB);
				globalMap.put("talendMeter_DB_NB_LINE_INSERTED",
						nb_line_inserted_talendMeter_DB);
				globalMap.put("talendMeter_DB_NB_LINE_DELETED",
						nb_line_deleted_talendMeter_DB);
				globalMap.put("talendMeter_DB_NB_LINE_REJECTED",
						nb_line_rejected_talendMeter_DB);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("Main" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("talendMeter_DB", true);
				end_Hash.put("talendMeter_DB", System.currentTimeMillis());

				/**
				 * [talendMeter_DB end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:talendMeter_METTER:sub_ok_talendMeter_connectionStatsLogs_Commit",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection(
						"sub_ok_talendMeter_connectionStatsLogs_Commit", 0,
						"ok");
			}

			connectionStatsLogs_CommitProcess(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [talendMeter_METTER finally ] start
				 */

				currentVirtualComponent = "talendMeter_METTER";

				currentComponent = "talendMeter_METTER";

				/**
				 * [talendMeter_METTER finally ] stop
				 */

				/**
				 * [talendMeter_DB finally ] start
				 */

				currentVirtualComponent = "talendMeter_DB";

				currentComponent = "talendMeter_DB";

				if (resourceMap.get("statementClosed_talendMeter_DB") == null) {
					java.sql.PreparedStatement pstmtToClose_talendMeter_DB = null;
					if ((pstmtToClose_talendMeter_DB = (java.sql.PreparedStatement) resourceMap
							.remove("pstmt_talendMeter_DB")) != null) {
						pstmtToClose_talendMeter_DB.close();
					}
				}

				/**
				 * [talendMeter_DB finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("talendMeter_METTER_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final jovenes_accion_cruce_reporte_dos jovenes_accion_cruce_reporte_dosClass = new jovenes_accion_cruce_reporte_dos();

		int exitCode = jovenes_accion_cruce_reporte_dosClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket
				// can't open
				System.err.println("The statistics socket port " + portStats
						+ " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = jovenes_accion_cruce_reporte_dos.class
					.getClassLoader().getResourceAsStream(
							"dmindicadores/jovenes_accion_cruce_reporte_dos_0_1/contexts/"
									+ contextStr + ".properties");
			if (inContext == null) {
				inContext = jovenes_accion_cruce_reporte_dos.class
						.getClassLoader()
						.getResourceAsStream(
								"config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				defaultProps.load(inContext);
				inContext.close();
				context = new ContextProperties(defaultProps);
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param
				// is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param
							.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "",
				resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();
		talendStats_STATS.addMessage("begin");

		this.globalResumeTicket = true;// to run tPreJob

		try {
			errorCode = null;
			preStaLogConProcess(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_preStaLogCon) {
			globalMap.put("preStaLogCon_SUBPROCESS_STATE", -1);

			e_preStaLogCon.printStackTrace();

		}

		try {
			talendStats_STATSProcess(globalMap);
		} catch (java.lang.Exception e) {
			e.printStackTrace();
		}

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tPostgresqlConnection_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tPostgresqlConnection_1) {
			globalMap.put("tPostgresqlConnection_1_SUBPROCESS_STATE", -1);

			e_tPostgresqlConnection_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		try {
			errorCode = null;
			tPostjob_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tPostjob_1) {
			globalMap.put("tPostjob_1_SUBPROCESS_STATE", -1);

			e_tPostjob_1.printStackTrace();

		}

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out
					.println((endUsedMemory - startUsedMemory)
							+ " bytes memory increase when running : jovenes_accion_cruce_reporte_dos");
		}
		talendStats_STATS.addMessage(status == "" ? "end" : status,
				(end - startTime));
		try {
			talendStats_STATSProcess(globalMap);
		} catch (java.lang.Exception e) {
			e.printStackTrace();
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {
		closeSqlDbConnections();

	}

	private void closeSqlDbConnections() {
		try {
			Object obj_conn;
			obj_conn = globalMap.remove("conn_tPostgresqlConnection_1");
			if (null != obj_conn) {
				((java.sql.Connection) obj_conn).close();
			}
			obj_conn = globalMap.remove("conn_connectionStatsLogs");
			if (null != obj_conn) {
				((java.sql.Connection) obj_conn).close();
			}
		} catch (java.lang.Exception e) {
		}
	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		connections.put("conn_tPostgresqlConnection_1",
				globalMap.get("conn_tPostgresqlConnection_1"));
		connections.put("conn_connectionStatsLogs",
				globalMap.get("conn_connectionStatsLogs"));

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 243846 characters generated by Talend Open Studio for Data Integration on the
 * 5 de septiembre de 2018 01:13:31 PM COT
 ************************************************************************************************/
