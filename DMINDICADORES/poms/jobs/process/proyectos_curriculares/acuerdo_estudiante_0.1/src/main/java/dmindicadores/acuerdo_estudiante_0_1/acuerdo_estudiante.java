// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package dmindicadores.acuerdo_estudiante_0_1;

import routines.DataOperation;
import routines.OpenStreetMap;
import routines.TalendDataGenerator;
import routines.Relational;
import routines.Mathematical;
import routines.GeometryUtility;
import routines.Numeric;
import routines.GeoOperation;
import routines.GeometryOperation;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.TalendDate;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")
/**
 * Job: acuerdo_estudiante Purpose: actualiza informaci√≥n de acuerdo para cubo socioeconomico<br>
 * Description:  <br>
 * @author user@talend.com
 * @version 7.1.1.20180829_1603-M3
 * @status 
 */
public class acuerdo_estudiante implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "acuerdo_estudiante";
	private final String projectName = "DMINDICADORES";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap
				.put(KEY_DB_DATASOURCES_RAW,
						new java.util.HashMap<String, javax.sql.DataSource>(
								dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent
						+ " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					acuerdo_estudiante.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(acuerdo_estudiante.this, new Object[] { e,
									currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tDBInput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class primiparos_acuerdoStruct implements
			routines.system.IPersistableRow<primiparos_acuerdoStruct> {
		final static byte[] commonByteArrayLock_DMINDICADORES_acuerdo_estudiante = new byte[0];
		static byte[] commonByteArray_DMINDICADORES_acuerdo_estudiante = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id;

		public int getId() {
			return this.id;
		}

		public Integer codigo_ies;

		public Integer getCodigo_ies() {
			return this.codigo_ies;
		}

		public Integer anno;

		public Integer getAnno() {
			return this.anno;
		}

		public Integer semestre;

		public Integer getSemestre() {
			return this.semestre;
		}

		public Integer codigo_facultad;

		public Integer getCodigo_facultad() {
			return this.codigo_facultad;
		}

		public String facultad;

		public String getFacultad() {
			return this.facultad;
		}

		public Integer codigo_proyecto_snies;

		public Integer getCodigo_proyecto_snies() {
			return this.codigo_proyecto_snies;
		}

		public String proyecto_snies;

		public String getProyecto_snies() {
			return this.proyecto_snies;
		}

		public Integer codigo_proyecto;

		public Integer getCodigo_proyecto() {
			return this.codigo_proyecto;
		}

		public String proyecto;

		public String getProyecto() {
			return this.proyecto;
		}

		public String metodologia;

		public String getMetodologia() {
			return this.metodologia;
		}

		public String modalidad;

		public String getModalidad() {
			return this.modalidad;
		}

		public String nivel;

		public String getNivel() {
			return this.nivel;
		}

		public Integer estrato;

		public Integer getEstrato() {
			return this.estrato;
		}

		public String genero;

		public String getGenero() {
			return this.genero;
		}

		public String codigo_departamento;

		public String getCodigo_departamento() {
			return this.codigo_departamento;
		}

		public String departamento;

		public String getDepartamento() {
			return this.departamento;
		}

		public String codigo_municipio;

		public String getCodigo_municipio() {
			return this.codigo_municipio;
		}

		public String municipio;

		public String getMunicipio() {
			return this.municipio;
		}

		public Long documento;

		public Long getDocumento() {
			return this.documento;
		}

		public String nombre;

		public String getNombre() {
			return this.nombre;
		}

		public Integer codigo_localidad;

		public Integer getCodigo_localidad() {
			return this.codigo_localidad;
		}

		public String localidad;

		public String getLocalidad() {
			return this.localidad;
		}

		public String tipo_colegio;

		public String getTipo_colegio() {
			return this.tipo_colegio;
		}

		public Integer codigo_localidad_colegio;

		public Integer getCodigo_localidad_colegio() {
			return this.codigo_localidad_colegio;
		}

		public String localidad_colegio;

		public String getLocalidad_colegio() {
			return this.localidad_colegio;
		}

		public String calendario_colegio;

		public String getCalendario_colegio() {
			return this.calendario_colegio;
		}

		public Long codigo_colegio;

		public Long getCodigo_colegio() {
			return this.codigo_colegio;
		}

		public String colegio;

		public String getColegio() {
			return this.colegio;
		}

		public String municipio_colegio;

		public String getMunicipio_colegio() {
			return this.municipio_colegio;
		}

		public String departamento_colegio;

		public String getDepartamento_colegio() {
			return this.departamento_colegio;
		}

		public Integer codigo_inscripcion;

		public Integer getCodigo_inscripcion() {
			return this.codigo_inscripcion;
		}

		public String inscripcion;

		public String getInscripcion() {
			return this.inscripcion;
		}

		public Double biologia;

		public Double getBiologia() {
			return this.biologia;
		}

		public Double quimica;

		public Double getQuimica() {
			return this.quimica;
		}

		public Double fisica;

		public Double getFisica() {
			return this.fisica;
		}

		public Double sociales;

		public Double getSociales() {
			return this.sociales;
		}

		public Double aptitud_verbal;

		public Double getAptitud_verbal() {
			return this.aptitud_verbal;
		}

		public Double espanol_literatura;

		public Double getEspanol_literatura() {
			return this.espanol_literatura;
		}

		public Double aptitud_matematica;

		public Double getAptitud_matematica() {
			return this.aptitud_matematica;
		}

		public Double condicion_matematica;

		public Double getCondicion_matematica() {
			return this.condicion_matematica;
		}

		public Double filosofia;

		public Double getFilosofia() {
			return this.filosofia;
		}

		public Double historia;

		public Double getHistoria() {
			return this.historia;
		}

		public Double geografia;

		public Double getGeografia() {
			return this.geografia;
		}

		public Double idioma;

		public Double getIdioma() {
			return this.idioma;
		}

		public Double interdiciplinar;

		public Double getInterdiciplinar() {
			return this.interdiciplinar;
		}

		public Integer codiogo_interdiciplinar;

		public Integer getCodiogo_interdiciplinar() {
			return this.codiogo_interdiciplinar;
		}

		public Double puntos_icfes;

		public Double getPuntos_icfes() {
			return this.puntos_icfes;
		}

		public Double puntos_homologados;

		public Double getPuntos_homologados() {
			return this.puntos_homologados;
		}

		public String profundizacion;

		public String getProfundizacion() {
			return this.profundizacion;
		}

		public String valor_profundizacion;

		public String getValor_profundizacion() {
			return this.valor_profundizacion;
		}

		public String profundizacion_dos;

		public String getProfundizacion_dos() {
			return this.profundizacion_dos;
		}

		public String valor_profundizacion_dos;

		public String getValor_profundizacion_dos() {
			return this.valor_profundizacion_dos;
		}

		public String profundizacion_tres;

		public String getProfundizacion_tres() {
			return this.profundizacion_tres;
		}

		public String valor_profundizacion_tres;

		public String getValor_profundizacion_tres() {
			return this.valor_profundizacion_tres;
		}

		public String codigo_estado;

		public String getCodigo_estado() {
			return this.codigo_estado;
		}

		public String estado;

		public String getEstado() {
			return this.estado;
		}

		public Long codigo_estudiante;

		public Long getCodigo_estudiante() {
			return this.codigo_estudiante;
		}

		public Double valor_matricula;

		public Double getValor_matricula() {
			return this.valor_matricula;
		}

		public String anno_semestre;

		public String getAnno_semestre() {
			return this.anno_semestre;
		}

		public java.util.Date fecha_carga;

		public java.util.Date getFecha_carga() {
			return this.fecha_carga;
		}

		public Integer acuerdo;

		public Integer getAcuerdo() {
			return this.acuerdo;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final primiparos_acuerdoStruct other = (primiparos_acuerdoStruct) obj;

			if (this.id != other.id)
				return false;

			return true;
		}

		public void copyDataTo(primiparos_acuerdoStruct other) {

			other.id = this.id;
			other.codigo_ies = this.codigo_ies;
			other.anno = this.anno;
			other.semestre = this.semestre;
			other.codigo_facultad = this.codigo_facultad;
			other.facultad = this.facultad;
			other.codigo_proyecto_snies = this.codigo_proyecto_snies;
			other.proyecto_snies = this.proyecto_snies;
			other.codigo_proyecto = this.codigo_proyecto;
			other.proyecto = this.proyecto;
			other.metodologia = this.metodologia;
			other.modalidad = this.modalidad;
			other.nivel = this.nivel;
			other.estrato = this.estrato;
			other.genero = this.genero;
			other.codigo_departamento = this.codigo_departamento;
			other.departamento = this.departamento;
			other.codigo_municipio = this.codigo_municipio;
			other.municipio = this.municipio;
			other.documento = this.documento;
			other.nombre = this.nombre;
			other.codigo_localidad = this.codigo_localidad;
			other.localidad = this.localidad;
			other.tipo_colegio = this.tipo_colegio;
			other.codigo_localidad_colegio = this.codigo_localidad_colegio;
			other.localidad_colegio = this.localidad_colegio;
			other.calendario_colegio = this.calendario_colegio;
			other.codigo_colegio = this.codigo_colegio;
			other.colegio = this.colegio;
			other.municipio_colegio = this.municipio_colegio;
			other.departamento_colegio = this.departamento_colegio;
			other.codigo_inscripcion = this.codigo_inscripcion;
			other.inscripcion = this.inscripcion;
			other.biologia = this.biologia;
			other.quimica = this.quimica;
			other.fisica = this.fisica;
			other.sociales = this.sociales;
			other.aptitud_verbal = this.aptitud_verbal;
			other.espanol_literatura = this.espanol_literatura;
			other.aptitud_matematica = this.aptitud_matematica;
			other.condicion_matematica = this.condicion_matematica;
			other.filosofia = this.filosofia;
			other.historia = this.historia;
			other.geografia = this.geografia;
			other.idioma = this.idioma;
			other.interdiciplinar = this.interdiciplinar;
			other.codiogo_interdiciplinar = this.codiogo_interdiciplinar;
			other.puntos_icfes = this.puntos_icfes;
			other.puntos_homologados = this.puntos_homologados;
			other.profundizacion = this.profundizacion;
			other.valor_profundizacion = this.valor_profundizacion;
			other.profundizacion_dos = this.profundizacion_dos;
			other.valor_profundizacion_dos = this.valor_profundizacion_dos;
			other.profundizacion_tres = this.profundizacion_tres;
			other.valor_profundizacion_tres = this.valor_profundizacion_tres;
			other.codigo_estado = this.codigo_estado;
			other.estado = this.estado;
			other.codigo_estudiante = this.codigo_estudiante;
			other.valor_matricula = this.valor_matricula;
			other.anno_semestre = this.anno_semestre;
			other.fecha_carga = this.fecha_carga;
			other.acuerdo = this.acuerdo;

		}

		public void copyKeysDataTo(primiparos_acuerdoStruct other) {

			other.id = this.id;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DMINDICADORES_acuerdo_estudiante.length) {
					if (length < 1024
							&& commonByteArray_DMINDICADORES_acuerdo_estudiante.length == 0) {
						commonByteArray_DMINDICADORES_acuerdo_estudiante = new byte[1024];
					} else {
						commonByteArray_DMINDICADORES_acuerdo_estudiante = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DMINDICADORES_acuerdo_estudiante,
						0, length);
				strReturn = new String(
						commonByteArray_DMINDICADORES_acuerdo_estudiante, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DMINDICADORES_acuerdo_estudiante) {

				try {

					int length = 0;

					this.id = dis.readInt();

					this.codigo_ies = readInteger(dis);

					this.anno = readInteger(dis);

					this.semestre = readInteger(dis);

					this.codigo_facultad = readInteger(dis);

					this.facultad = readString(dis);

					this.codigo_proyecto_snies = readInteger(dis);

					this.proyecto_snies = readString(dis);

					this.codigo_proyecto = readInteger(dis);

					this.proyecto = readString(dis);

					this.metodologia = readString(dis);

					this.modalidad = readString(dis);

					this.nivel = readString(dis);

					this.estrato = readInteger(dis);

					this.genero = readString(dis);

					this.codigo_departamento = readString(dis);

					this.departamento = readString(dis);

					this.codigo_municipio = readString(dis);

					this.municipio = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.documento = null;
					} else {
						this.documento = dis.readLong();
					}

					this.nombre = readString(dis);

					this.codigo_localidad = readInteger(dis);

					this.localidad = readString(dis);

					this.tipo_colegio = readString(dis);

					this.codigo_localidad_colegio = readInteger(dis);

					this.localidad_colegio = readString(dis);

					this.calendario_colegio = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.codigo_colegio = null;
					} else {
						this.codigo_colegio = dis.readLong();
					}

					this.colegio = readString(dis);

					this.municipio_colegio = readString(dis);

					this.departamento_colegio = readString(dis);

					this.codigo_inscripcion = readInteger(dis);

					this.inscripcion = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.biologia = null;
					} else {
						this.biologia = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.quimica = null;
					} else {
						this.quimica = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.fisica = null;
					} else {
						this.fisica = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.sociales = null;
					} else {
						this.sociales = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.aptitud_verbal = null;
					} else {
						this.aptitud_verbal = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.espanol_literatura = null;
					} else {
						this.espanol_literatura = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.aptitud_matematica = null;
					} else {
						this.aptitud_matematica = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.condicion_matematica = null;
					} else {
						this.condicion_matematica = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.filosofia = null;
					} else {
						this.filosofia = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.historia = null;
					} else {
						this.historia = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.geografia = null;
					} else {
						this.geografia = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.idioma = null;
					} else {
						this.idioma = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.interdiciplinar = null;
					} else {
						this.interdiciplinar = dis.readDouble();
					}

					this.codiogo_interdiciplinar = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.puntos_icfes = null;
					} else {
						this.puntos_icfes = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.puntos_homologados = null;
					} else {
						this.puntos_homologados = dis.readDouble();
					}

					this.profundizacion = readString(dis);

					this.valor_profundizacion = readString(dis);

					this.profundizacion_dos = readString(dis);

					this.valor_profundizacion_dos = readString(dis);

					this.profundizacion_tres = readString(dis);

					this.valor_profundizacion_tres = readString(dis);

					this.codigo_estado = readString(dis);

					this.estado = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.codigo_estudiante = null;
					} else {
						this.codigo_estudiante = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.valor_matricula = null;
					} else {
						this.valor_matricula = dis.readDouble();
					}

					this.anno_semestre = readString(dis);

					this.fecha_carga = readDate(dis);

					this.acuerdo = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id);

				// Integer

				writeInteger(this.codigo_ies, dos);

				// Integer

				writeInteger(this.anno, dos);

				// Integer

				writeInteger(this.semestre, dos);

				// Integer

				writeInteger(this.codigo_facultad, dos);

				// String

				writeString(this.facultad, dos);

				// Integer

				writeInteger(this.codigo_proyecto_snies, dos);

				// String

				writeString(this.proyecto_snies, dos);

				// Integer

				writeInteger(this.codigo_proyecto, dos);

				// String

				writeString(this.proyecto, dos);

				// String

				writeString(this.metodologia, dos);

				// String

				writeString(this.modalidad, dos);

				// String

				writeString(this.nivel, dos);

				// Integer

				writeInteger(this.estrato, dos);

				// String

				writeString(this.genero, dos);

				// String

				writeString(this.codigo_departamento, dos);

				// String

				writeString(this.departamento, dos);

				// String

				writeString(this.codigo_municipio, dos);

				// String

				writeString(this.municipio, dos);

				// Long

				if (this.documento == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.documento);
				}

				// String

				writeString(this.nombre, dos);

				// Integer

				writeInteger(this.codigo_localidad, dos);

				// String

				writeString(this.localidad, dos);

				// String

				writeString(this.tipo_colegio, dos);

				// Integer

				writeInteger(this.codigo_localidad_colegio, dos);

				// String

				writeString(this.localidad_colegio, dos);

				// String

				writeString(this.calendario_colegio, dos);

				// Long

				if (this.codigo_colegio == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.codigo_colegio);
				}

				// String

				writeString(this.colegio, dos);

				// String

				writeString(this.municipio_colegio, dos);

				// String

				writeString(this.departamento_colegio, dos);

				// Integer

				writeInteger(this.codigo_inscripcion, dos);

				// String

				writeString(this.inscripcion, dos);

				// Double

				if (this.biologia == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.biologia);
				}

				// Double

				if (this.quimica == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.quimica);
				}

				// Double

				if (this.fisica == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.fisica);
				}

				// Double

				if (this.sociales == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.sociales);
				}

				// Double

				if (this.aptitud_verbal == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.aptitud_verbal);
				}

				// Double

				if (this.espanol_literatura == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.espanol_literatura);
				}

				// Double

				if (this.aptitud_matematica == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.aptitud_matematica);
				}

				// Double

				if (this.condicion_matematica == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.condicion_matematica);
				}

				// Double

				if (this.filosofia == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.filosofia);
				}

				// Double

				if (this.historia == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.historia);
				}

				// Double

				if (this.geografia == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.geografia);
				}

				// Double

				if (this.idioma == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.idioma);
				}

				// Double

				if (this.interdiciplinar == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.interdiciplinar);
				}

				// Integer

				writeInteger(this.codiogo_interdiciplinar, dos);

				// Double

				if (this.puntos_icfes == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.puntos_icfes);
				}

				// Double

				if (this.puntos_homologados == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.puntos_homologados);
				}

				// String

				writeString(this.profundizacion, dos);

				// String

				writeString(this.valor_profundizacion, dos);

				// String

				writeString(this.profundizacion_dos, dos);

				// String

				writeString(this.valor_profundizacion_dos, dos);

				// String

				writeString(this.profundizacion_tres, dos);

				// String

				writeString(this.valor_profundizacion_tres, dos);

				// String

				writeString(this.codigo_estado, dos);

				// String

				writeString(this.estado, dos);

				// Long

				if (this.codigo_estudiante == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.codigo_estudiante);
				}

				// Double

				if (this.valor_matricula == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.valor_matricula);
				}

				// String

				writeString(this.anno_semestre, dos);

				// java.util.Date

				writeDate(this.fecha_carga, dos);

				// Integer

				writeInteger(this.acuerdo, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",codigo_ies=" + String.valueOf(codigo_ies));
			sb.append(",anno=" + String.valueOf(anno));
			sb.append(",semestre=" + String.valueOf(semestre));
			sb.append(",codigo_facultad=" + String.valueOf(codigo_facultad));
			sb.append(",facultad=" + facultad);
			sb.append(",codigo_proyecto_snies="
					+ String.valueOf(codigo_proyecto_snies));
			sb.append(",proyecto_snies=" + proyecto_snies);
			sb.append(",codigo_proyecto=" + String.valueOf(codigo_proyecto));
			sb.append(",proyecto=" + proyecto);
			sb.append(",metodologia=" + metodologia);
			sb.append(",modalidad=" + modalidad);
			sb.append(",nivel=" + nivel);
			sb.append(",estrato=" + String.valueOf(estrato));
			sb.append(",genero=" + genero);
			sb.append(",codigo_departamento=" + codigo_departamento);
			sb.append(",departamento=" + departamento);
			sb.append(",codigo_municipio=" + codigo_municipio);
			sb.append(",municipio=" + municipio);
			sb.append(",documento=" + String.valueOf(documento));
			sb.append(",nombre=" + nombre);
			sb.append(",codigo_localidad=" + String.valueOf(codigo_localidad));
			sb.append(",localidad=" + localidad);
			sb.append(",tipo_colegio=" + tipo_colegio);
			sb.append(",codigo_localidad_colegio="
					+ String.valueOf(codigo_localidad_colegio));
			sb.append(",localidad_colegio=" + localidad_colegio);
			sb.append(",calendario_colegio=" + calendario_colegio);
			sb.append(",codigo_colegio=" + String.valueOf(codigo_colegio));
			sb.append(",colegio=" + colegio);
			sb.append(",municipio_colegio=" + municipio_colegio);
			sb.append(",departamento_colegio=" + departamento_colegio);
			sb.append(",codigo_inscripcion="
					+ String.valueOf(codigo_inscripcion));
			sb.append(",inscripcion=" + inscripcion);
			sb.append(",biologia=" + String.valueOf(biologia));
			sb.append(",quimica=" + String.valueOf(quimica));
			sb.append(",fisica=" + String.valueOf(fisica));
			sb.append(",sociales=" + String.valueOf(sociales));
			sb.append(",aptitud_verbal=" + String.valueOf(aptitud_verbal));
			sb.append(",espanol_literatura="
					+ String.valueOf(espanol_literatura));
			sb.append(",aptitud_matematica="
					+ String.valueOf(aptitud_matematica));
			sb.append(",condicion_matematica="
					+ String.valueOf(condicion_matematica));
			sb.append(",filosofia=" + String.valueOf(filosofia));
			sb.append(",historia=" + String.valueOf(historia));
			sb.append(",geografia=" + String.valueOf(geografia));
			sb.append(",idioma=" + String.valueOf(idioma));
			sb.append(",interdiciplinar=" + String.valueOf(interdiciplinar));
			sb.append(",codiogo_interdiciplinar="
					+ String.valueOf(codiogo_interdiciplinar));
			sb.append(",puntos_icfes=" + String.valueOf(puntos_icfes));
			sb.append(",puntos_homologados="
					+ String.valueOf(puntos_homologados));
			sb.append(",profundizacion=" + profundizacion);
			sb.append(",valor_profundizacion=" + valor_profundizacion);
			sb.append(",profundizacion_dos=" + profundizacion_dos);
			sb.append(",valor_profundizacion_dos=" + valor_profundizacion_dos);
			sb.append(",profundizacion_tres=" + profundizacion_tres);
			sb.append(",valor_profundizacion_tres=" + valor_profundizacion_tres);
			sb.append(",codigo_estado=" + codigo_estado);
			sb.append(",estado=" + estado);
			sb.append(",codigo_estudiante=" + String.valueOf(codigo_estudiante));
			sb.append(",valor_matricula=" + String.valueOf(valor_matricula));
			sb.append(",anno_semestre=" + anno_semestre);
			sb.append(",fecha_carga=" + String.valueOf(fecha_carga));
			sb.append(",acuerdo=" + String.valueOf(acuerdo));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(primiparos_acuerdoStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id, other.id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_DMINDICADORES_acuerdo_estudiante = new byte[0];
		static byte[] commonByteArray_DMINDICADORES_acuerdo_estudiante = new byte[0];

		public long codigo_estudiante;

		public long getCodigo_estudiante() {
			return this.codigo_estudiante;
		}

		public Integer acuerdo;

		public Integer getAcuerdo() {
			return this.acuerdo;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DMINDICADORES_acuerdo_estudiante) {

				try {

					int length = 0;

					this.codigo_estudiante = dis.readLong();

					this.acuerdo = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// long

				dos.writeLong(this.codigo_estudiante);

				// Integer

				writeInteger(this.acuerdo, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("codigo_estudiante=" + String.valueOf(codigo_estudiante));
			sb.append(",acuerdo=" + String.valueOf(acuerdo));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tDBInput_1Struct implements
			routines.system.IPersistableRow<after_tDBInput_1Struct> {
		final static byte[] commonByteArrayLock_DMINDICADORES_acuerdo_estudiante = new byte[0];
		static byte[] commonByteArray_DMINDICADORES_acuerdo_estudiante = new byte[0];

		public long codigo_estudiante;

		public long getCodigo_estudiante() {
			return this.codigo_estudiante;
		}

		public Integer acuerdo;

		public Integer getAcuerdo() {
			return this.acuerdo;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DMINDICADORES_acuerdo_estudiante) {

				try {

					int length = 0;

					this.codigo_estudiante = dis.readLong();

					this.acuerdo = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// long

				dos.writeLong(this.codigo_estudiante);

				// Integer

				writeInteger(this.acuerdo, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("codigo_estudiante=" + String.valueOf(codigo_estudiante));
			sb.append(",acuerdo=" + String.valueOf(acuerdo));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tDBInput_1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				tDBInput_2Process(globalMap);

				row1Struct row1 = new row1Struct();
				primiparos_acuerdoStruct primiparos_acuerdo = new primiparos_acuerdoStruct();

				/**
				 * [tDBOutput_1 begin ] start
				 */

				ok_Hash.put("tDBOutput_1", false);
				start_Hash.put("tDBOutput_1", System.currentTimeMillis());

				currentComponent = "tDBOutput_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("primiparos_acuerdo"
								+ iterateId, 0, 0);

					}
				}

				int tos_count_tDBOutput_1 = 0;

				String dbschema_tDBOutput_1 = null;
				dbschema_tDBOutput_1 = "public";

				String tableName_tDBOutput_1 = null;
				if (dbschema_tDBOutput_1 == null
						|| dbschema_tDBOutput_1.trim().length() == 0) {
					tableName_tDBOutput_1 = "primiparos";
				} else {
					tableName_tDBOutput_1 = dbschema_tDBOutput_1 + "\".\""
							+ "primiparos";
				}

				int updateKeyCount_tDBOutput_1 = 1;
				if (updateKeyCount_tDBOutput_1 < 1) {
					throw new RuntimeException(
							"For update, Schema must have a key");
				}
				int nb_line_tDBOutput_1 = 0;
				int nb_line_update_tDBOutput_1 = 0;
				int nb_line_inserted_tDBOutput_1 = 0;
				int nb_line_deleted_tDBOutput_1 = 0;
				int nb_line_rejected_tDBOutput_1 = 0;

				int deletedCount_tDBOutput_1 = 0;
				int updatedCount_tDBOutput_1 = 0;
				int insertedCount_tDBOutput_1 = 0;
				int rejectedCount_tDBOutput_1 = 0;

				boolean whetherReject_tDBOutput_1 = false;

				java.sql.Connection conn_tDBOutput_1 = null;
				String dbUser_tDBOutput_1 = null;

				java.lang.Class.forName("org.postgresql.Driver");
				String url_tDBOutput_1 = "jdbc:postgresql://" + "10.20.0.88"
						+ ":" + "5432" + "/" + "DMINDICADORES";
				dbUser_tDBOutput_1 = "postgres";

				final String decryptedPassword_tDBOutput_1 = routines.system.PasswordEncryptUtil
						.decryptPassword("610243e4ca33e325f4f7aba1746784ea");

				String dbPwd_tDBOutput_1 = decryptedPassword_tDBOutput_1;

				conn_tDBOutput_1 = java.sql.DriverManager.getConnection(
						url_tDBOutput_1, dbUser_tDBOutput_1, dbPwd_tDBOutput_1);

				resourceMap.put("conn_tDBOutput_1", conn_tDBOutput_1);
				conn_tDBOutput_1.setAutoCommit(false);
				int commitEvery_tDBOutput_1 = 10000;
				int commitCounter_tDBOutput_1 = 0;

				int count_tDBOutput_1 = 0;
				java.sql.DatabaseMetaData dbMetaData_tDBOutput_1 = conn_tDBOutput_1
						.getMetaData();
				boolean whetherExist_tDBOutput_1 = false;
				try (java.sql.ResultSet rsTable_tDBOutput_1 = dbMetaData_tDBOutput_1
						.getTables(null, null, null, new String[] { "TABLE" })) {
					String defaultSchema_tDBOutput_1 = "public";
					if (dbschema_tDBOutput_1 == null
							|| dbschema_tDBOutput_1.trim().length() == 0) {
						try (java.sql.Statement stmtSchema_tDBOutput_1 = conn_tDBOutput_1
								.createStatement();
								java.sql.ResultSet rsSchema_tDBOutput_1 = stmtSchema_tDBOutput_1
										.executeQuery("select current_schema() ")) {
							while (rsSchema_tDBOutput_1.next()) {
								defaultSchema_tDBOutput_1 = rsSchema_tDBOutput_1
										.getString("current_schema");
							}
						}
					}
					while (rsTable_tDBOutput_1.next()) {
						String table_tDBOutput_1 = rsTable_tDBOutput_1
								.getString("TABLE_NAME");
						String schema_tDBOutput_1 = rsTable_tDBOutput_1
								.getString("TABLE_SCHEM");
						if (table_tDBOutput_1.equals("primiparos")
								&& (schema_tDBOutput_1
										.equals(dbschema_tDBOutput_1) || ((dbschema_tDBOutput_1 == null || dbschema_tDBOutput_1
										.trim().length() == 0) && defaultSchema_tDBOutput_1
										.equals(schema_tDBOutput_1)))) {
							whetherExist_tDBOutput_1 = true;
							break;
						}
					}
				}
				if (!whetherExist_tDBOutput_1) {
					try (java.sql.Statement stmtCreate_tDBOutput_1 = conn_tDBOutput_1
							.createStatement()) {
						stmtCreate_tDBOutput_1
								.execute("CREATE TABLE \""
										+ tableName_tDBOutput_1
										+ "\"(\"id\" INT4  not null ,\"codigo_ies\" INT4 ,\"anno\" INT4 ,\"semestre\" INT4 ,\"codigo_facultad\" INT4 ,\"facultad\" VARCHAR(64)  ,\"codigo_proyecto_snies\" INT4 ,\"proyecto_snies\" VARCHAR(100)  ,\"codigo_proyecto\" INT4 ,\"proyecto\" VARCHAR(100)  ,\"metodologia\" VARCHAR(2147483647)  ,\"modalidad\" VARCHAR(50)  ,\"nivel\" VARCHAR(10)  ,\"estrato\" INT4 ,\"genero\" VARCHAR(11)  ,\"codigo_departamento\" VARCHAR(2)  ,\"departamento\" VARCHAR(10)  ,\"codigo_municipio\" VARCHAR(4)  ,\"municipio\" VARCHAR(10)  ,\"documento\" INT8 ,\"nombre\" VARCHAR(50)  ,\"codigo_localidad\" INT4 ,\"localidad\" VARCHAR(30)  ,\"tipo_colegio\" VARCHAR(11)  ,\"codigo_localidad_colegio\" INT4 ,\"localidad_colegio\" VARCHAR(30)  ,\"calendario_colegio\" VARCHAR(11)  ,\"codigo_colegio\" INT8 ,\"colegio\" VARCHAR(100)  ,\"municipio_colegio\" VARCHAR(30)  ,\"departamento_colegio\" VARCHAR(15)  ,\"codigo_inscripcion\" INT4 ,\"inscripcion\" VARCHAR(50)  ,\"biologia\" FLOAT8 ,\"quimica\" FLOAT8 ,\"fisica\" FLOAT8 ,\"sociales\" FLOAT8 ,\"aptitud_verbal\" FLOAT8 ,\"espanol_literatura\" FLOAT8 ,\"aptitud_matematica\" FLOAT8 ,\"condicion_matematica\" FLOAT8 ,\"filosofia\" FLOAT8 ,\"historia\" FLOAT8 ,\"geografia\" FLOAT8 ,\"idioma\" FLOAT8 ,\"interdiciplinar\" FLOAT8 ,\"codiogo_interdiciplinar\" INT4 ,\"puntos_icfes\" FLOAT8 ,\"puntos_homologados\" FLOAT8 ,\"profundizacion\" VARCHAR(1)  ,\"valor_profundizacion\" VARCHAR(2)  ,\"profundizacion_dos\" VARCHAR(1)  ,\"valor_profundizacion_dos\" VARCHAR(2)  ,\"profundizacion_tres\" VARCHAR(1)  ,\"valor_profundizacion_tres\" VARCHAR(2)  ,\"codigo_estado\" VARCHAR(1)  ,\"estado\" VARCHAR(20)  ,\"codigo_estudiante\" INT8 ,\"valor_matricula\" FLOAT8 ,\"anno_semestre\" VARCHAR(2147483647)  ,\"fecha_carga\" TIMESTAMP(29)  ,\"acuerdo\" INT4 ,primary key(\"id\"))");
					}
				}
				String update_tDBOutput_1 = "UPDATE \""
						+ tableName_tDBOutput_1
						+ "\" SET \"codigo_ies\" = ?,\"anno\" = ?,\"semestre\" = ?,\"codigo_facultad\" = ?,\"facultad\" = ?,\"codigo_proyecto_snies\" = ?,\"proyecto_snies\" = ?,\"codigo_proyecto\" = ?,\"proyecto\" = ?,\"metodologia\" = ?,\"modalidad\" = ?,\"nivel\" = ?,\"estrato\" = ?,\"genero\" = ?,\"codigo_departamento\" = ?,\"departamento\" = ?,\"codigo_municipio\" = ?,\"municipio\" = ?,\"documento\" = ?,\"nombre\" = ?,\"codigo_localidad\" = ?,\"localidad\" = ?,\"tipo_colegio\" = ?,\"codigo_localidad_colegio\" = ?,\"localidad_colegio\" = ?,\"calendario_colegio\" = ?,\"codigo_colegio\" = ?,\"colegio\" = ?,\"municipio_colegio\" = ?,\"departamento_colegio\" = ?,\"codigo_inscripcion\" = ?,\"inscripcion\" = ?,\"biologia\" = ?,\"quimica\" = ?,\"fisica\" = ?,\"sociales\" = ?,\"aptitud_verbal\" = ?,\"espanol_literatura\" = ?,\"aptitud_matematica\" = ?,\"condicion_matematica\" = ?,\"filosofia\" = ?,\"historia\" = ?,\"geografia\" = ?,\"idioma\" = ?,\"interdiciplinar\" = ?,\"codiogo_interdiciplinar\" = ?,\"puntos_icfes\" = ?,\"puntos_homologados\" = ?,\"profundizacion\" = ?,\"valor_profundizacion\" = ?,\"profundizacion_dos\" = ?,\"valor_profundizacion_dos\" = ?,\"profundizacion_tres\" = ?,\"valor_profundizacion_tres\" = ?,\"codigo_estado\" = ?,\"estado\" = ?,\"codigo_estudiante\" = ?,\"valor_matricula\" = ?,\"anno_semestre\" = ?,\"fecha_carga\" = ?,\"acuerdo\" = ? WHERE \"id\" = ?";
				java.sql.PreparedStatement pstmtUpdate_tDBOutput_1 = conn_tDBOutput_1
						.prepareStatement(update_tDBOutput_1);
				resourceMap.put("pstmtUpdate_tDBOutput_1",
						pstmtUpdate_tDBOutput_1);
				String insert_tDBOutput_1 = "INSERT INTO \""
						+ tableName_tDBOutput_1
						+ "\" (\"id\",\"codigo_ies\",\"anno\",\"semestre\",\"codigo_facultad\",\"facultad\",\"codigo_proyecto_snies\",\"proyecto_snies\",\"codigo_proyecto\",\"proyecto\",\"metodologia\",\"modalidad\",\"nivel\",\"estrato\",\"genero\",\"codigo_departamento\",\"departamento\",\"codigo_municipio\",\"municipio\",\"documento\",\"nombre\",\"codigo_localidad\",\"localidad\",\"tipo_colegio\",\"codigo_localidad_colegio\",\"localidad_colegio\",\"calendario_colegio\",\"codigo_colegio\",\"colegio\",\"municipio_colegio\",\"departamento_colegio\",\"codigo_inscripcion\",\"inscripcion\",\"biologia\",\"quimica\",\"fisica\",\"sociales\",\"aptitud_verbal\",\"espanol_literatura\",\"aptitud_matematica\",\"condicion_matematica\",\"filosofia\",\"historia\",\"geografia\",\"idioma\",\"interdiciplinar\",\"codiogo_interdiciplinar\",\"puntos_icfes\",\"puntos_homologados\",\"profundizacion\",\"valor_profundizacion\",\"profundizacion_dos\",\"valor_profundizacion_dos\",\"profundizacion_tres\",\"valor_profundizacion_tres\",\"codigo_estado\",\"estado\",\"codigo_estudiante\",\"valor_matricula\",\"anno_semestre\",\"fecha_carga\",\"acuerdo\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
				java.sql.PreparedStatement pstmtInsert_tDBOutput_1 = conn_tDBOutput_1
						.prepareStatement(insert_tDBOutput_1);
				resourceMap.put("pstmtInsert_tDBOutput_1",
						pstmtInsert_tDBOutput_1);

				/**
				 * [tDBOutput_1 begin ] stop
				 */

				/**
				 * [tMap_2 begin ] start
				 */

				ok_Hash.put("tMap_2", false);
				start_Hash.put("tMap_2", System.currentTimeMillis());

				currentComponent = "tMap_2";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row1" + iterateId, 0, 0);

					}
				}

				int tos_count_tMap_2 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) globalMap
						.get("tHash_Lookup_row2"));

				row2Struct row2HashKey = new row2Struct();
				row2Struct row2Default = new row2Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_2__Struct {
				}
				Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				primiparos_acuerdoStruct primiparos_acuerdo_tmp = new primiparos_acuerdoStruct();
				// ###############################

				/**
				 * [tMap_2 begin ] stop
				 */

				/**
				 * [tDBInput_1 begin ] start
				 */

				ok_Hash.put("tDBInput_1", false);
				start_Hash.put("tDBInput_1", System.currentTimeMillis());

				currentComponent = "tDBInput_1";

				int tos_count_tDBInput_1 = 0;

				int nb_line_tDBInput_1 = 0;
				java.sql.Connection conn_tDBInput_1 = null;
				String driverClass_tDBInput_1 = "org.postgresql.Driver";
				java.lang.Class.forName(driverClass_tDBInput_1);
				String dbUser_tDBInput_1 = "postgres";

				final String decryptedPassword_tDBInput_1 = routines.system.PasswordEncryptUtil
						.decryptPassword("610243e4ca33e325f4f7aba1746784ea");

				String dbPwd_tDBInput_1 = decryptedPassword_tDBInput_1;

				String url_tDBInput_1 = "jdbc:postgresql://" + "10.20.0.88"
						+ ":" + "5432" + "/" + "DMINDICADORES";

				conn_tDBInput_1 = java.sql.DriverManager.getConnection(
						url_tDBInput_1, dbUser_tDBInput_1, dbPwd_tDBInput_1);

				conn_tDBInput_1.setAutoCommit(false);

				java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1
						.createStatement();

				String dbquery_tDBInput_1 = "select codigo_estudiante, acuerdo from estudiantes";

				globalMap.put("tDBInput_1_QUERY", dbquery_tDBInput_1);
				java.sql.ResultSet rs_tDBInput_1 = null;

				try {
					rs_tDBInput_1 = stmt_tDBInput_1
							.executeQuery(dbquery_tDBInput_1);
					java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1
							.getMetaData();
					int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1
							.getColumnCount();

					String tmpContent_tDBInput_1 = null;

					while (rs_tDBInput_1.next()) {
						nb_line_tDBInput_1++;

						if (colQtyInRs_tDBInput_1 < 1) {
							row1.codigo_estudiante = 0;
						} else {

							if (rs_tDBInput_1.getObject(1) != null) {
								row1.codigo_estudiante = rs_tDBInput_1
										.getLong(1);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 2) {
							row1.acuerdo = null;
						} else {

							if (rs_tDBInput_1.getObject(2) != null) {
								row1.acuerdo = rs_tDBInput_1.getInt(2);
							} else {
								row1.acuerdo = null;
							}
						}

						/**
						 * [tDBInput_1 begin ] stop
						 */

						/**
						 * [tDBInput_1 main ] start
						 */

						currentComponent = "tDBInput_1";

						tos_count_tDBInput_1++;

						/**
						 * [tDBInput_1 main ] stop
						 */

						/**
						 * [tDBInput_1 process_data_begin ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_begin ] stop
						 */

						/**
						 * [tMap_2 main ] start
						 */

						currentComponent = "tMap_2";

						// row1
						// row1

						if (execStat) {
							runStat.updateStatOnConnection("row1" + iterateId,
									1, 1);
						}

						boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_2 = false;
						boolean mainRowRejected_tMap_2 = false;

						// /////////////////////////////////////////////
						// Starting Lookup Table "row2"
						// /////////////////////////////////////////////

						boolean forceLooprow2 = false;

						row2Struct row2ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_2) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_2 = false;

							row2HashKey.codigo_estudiante = row1.codigo_estudiante;

							row2HashKey.hashCodeDirty = true;

							tHash_Lookup_row2.lookup(row2HashKey);

						} // G_TM_M_020

						if (tHash_Lookup_row2 != null
								&& tHash_Lookup_row2.getCount(row2HashKey) > 1) { // G
																					// 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row2' and it contains more one result from keys :  row2.codigo_estudiante = '"
							// + row2HashKey.codigo_estudiante + "'");
						} // G 071

						row2Struct row2 = null;

						row2Struct fromLookup_row2 = null;
						row2 = row2Default;

						if (tHash_Lookup_row2 != null
								&& tHash_Lookup_row2.hasNext()) { // G 099

							fromLookup_row2 = tHash_Lookup_row2.next();

						} // G 099

						if (fromLookup_row2 != null) {
							row2 = fromLookup_row2;
						}

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
							// ###############################
							// # Output tables

							primiparos_acuerdo = null;

							// # Output table : 'primiparos_acuerdo'
							primiparos_acuerdo_tmp.id = row2.id;
							primiparos_acuerdo_tmp.codigo_ies = row2.codigo_ies;
							primiparos_acuerdo_tmp.anno = row2.anno;
							primiparos_acuerdo_tmp.semestre = row2.semestre;
							primiparos_acuerdo_tmp.codigo_facultad = row2.codigo_facultad;
							primiparos_acuerdo_tmp.facultad = row2.facultad;
							primiparos_acuerdo_tmp.codigo_proyecto_snies = row2.codigo_proyecto_snies;
							primiparos_acuerdo_tmp.proyecto_snies = row2.proyecto_snies;
							primiparos_acuerdo_tmp.codigo_proyecto = row2.codigo_proyecto;
							primiparos_acuerdo_tmp.proyecto = row2.proyecto;
							primiparos_acuerdo_tmp.metodologia = row2.metodologia;
							primiparos_acuerdo_tmp.modalidad = row2.modalidad;
							primiparos_acuerdo_tmp.nivel = row2.nivel;
							primiparos_acuerdo_tmp.estrato = row2.estrato;
							primiparos_acuerdo_tmp.genero = row2.genero;
							primiparos_acuerdo_tmp.codigo_departamento = row2.codigo_departamento;
							primiparos_acuerdo_tmp.departamento = row2.departamento;
							primiparos_acuerdo_tmp.codigo_municipio = row2.codigo_municipio;
							primiparos_acuerdo_tmp.municipio = row2.municipio;
							primiparos_acuerdo_tmp.documento = row2.documento;
							primiparos_acuerdo_tmp.nombre = row2.nombre;
							primiparos_acuerdo_tmp.codigo_localidad = row2.codigo_localidad;
							primiparos_acuerdo_tmp.localidad = row2.localidad;
							primiparos_acuerdo_tmp.tipo_colegio = row2.tipo_colegio;
							primiparos_acuerdo_tmp.codigo_localidad_colegio = row2.codigo_localidad_colegio;
							primiparos_acuerdo_tmp.localidad_colegio = row2.localidad_colegio;
							primiparos_acuerdo_tmp.calendario_colegio = row2.calendario_colegio;
							primiparos_acuerdo_tmp.codigo_colegio = row2.codigo_colegio;
							primiparos_acuerdo_tmp.colegio = row2.colegio;
							primiparos_acuerdo_tmp.municipio_colegio = row2.municipio_colegio;
							primiparos_acuerdo_tmp.departamento_colegio = row2.departamento_colegio;
							primiparos_acuerdo_tmp.codigo_inscripcion = row2.codigo_inscripcion;
							primiparos_acuerdo_tmp.inscripcion = row2.inscripcion;
							primiparos_acuerdo_tmp.biologia = row2.biologia;
							primiparos_acuerdo_tmp.quimica = row2.quimica;
							primiparos_acuerdo_tmp.fisica = row2.fisica;
							primiparos_acuerdo_tmp.sociales = row2.sociales;
							primiparos_acuerdo_tmp.aptitud_verbal = row2.aptitud_verbal;
							primiparos_acuerdo_tmp.espanol_literatura = row2.espanol_literatura;
							primiparos_acuerdo_tmp.aptitud_matematica = row2.aptitud_matematica;
							primiparos_acuerdo_tmp.condicion_matematica = row2.condicion_matematica;
							primiparos_acuerdo_tmp.filosofia = row2.filosofia;
							primiparos_acuerdo_tmp.historia = row2.historia;
							primiparos_acuerdo_tmp.geografia = row2.geografia;
							primiparos_acuerdo_tmp.idioma = row2.idioma;
							primiparos_acuerdo_tmp.interdiciplinar = row2.interdiciplinar;
							primiparos_acuerdo_tmp.codiogo_interdiciplinar = row2.codiogo_interdiciplinar;
							primiparos_acuerdo_tmp.puntos_icfes = row2.puntos_icfes;
							primiparos_acuerdo_tmp.puntos_homologados = row2.puntos_homologados;
							primiparos_acuerdo_tmp.profundizacion = row2.profundizacion;
							primiparos_acuerdo_tmp.valor_profundizacion = row2.valor_profundizacion;
							primiparos_acuerdo_tmp.profundizacion_dos = row2.profundizacion_dos;
							primiparos_acuerdo_tmp.valor_profundizacion_dos = row2.valor_profundizacion_dos;
							primiparos_acuerdo_tmp.profundizacion_tres = row2.profundizacion_tres;
							primiparos_acuerdo_tmp.valor_profundizacion_tres = row2.valor_profundizacion_tres;
							primiparos_acuerdo_tmp.codigo_estado = row2.codigo_estado;
							primiparos_acuerdo_tmp.estado = row2.estado;
							primiparos_acuerdo_tmp.codigo_estudiante = row1.codigo_estudiante;
							primiparos_acuerdo_tmp.valor_matricula = row2.valor_matricula;
							primiparos_acuerdo_tmp.anno_semestre = row2.anno_semestre;
							primiparos_acuerdo_tmp.fecha_carga = row2.fecha_carga;
							primiparos_acuerdo_tmp.acuerdo = row1.acuerdo;
							primiparos_acuerdo = primiparos_acuerdo_tmp;
							// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_2 = false;

						tos_count_tMap_2++;

						/**
						 * [tMap_2 main ] stop
						 */

						/**
						 * [tMap_2 process_data_begin ] start
						 */

						currentComponent = "tMap_2";

						/**
						 * [tMap_2 process_data_begin ] stop
						 */
						// Start of branch "primiparos_acuerdo"
						if (primiparos_acuerdo != null) {

							/**
							 * [tDBOutput_1 main ] start
							 */

							currentComponent = "tDBOutput_1";

							// primiparos_acuerdo
							// primiparos_acuerdo

							if (execStat) {
								runStat.updateStatOnConnection(
										"primiparos_acuerdo" + iterateId, 1, 1);
							}

							whetherReject_tDBOutput_1 = false;
							int updateFlag_tDBOutput_1 = 0;
							if (primiparos_acuerdo.codigo_ies == null) {
								pstmtUpdate_tDBOutput_1.setNull(1,
										java.sql.Types.INTEGER);
							} else {
								pstmtUpdate_tDBOutput_1.setInt(1,
										primiparos_acuerdo.codigo_ies);
							}

							if (primiparos_acuerdo.anno == null) {
								pstmtUpdate_tDBOutput_1.setNull(2,
										java.sql.Types.INTEGER);
							} else {
								pstmtUpdate_tDBOutput_1.setInt(2,
										primiparos_acuerdo.anno);
							}

							if (primiparos_acuerdo.semestre == null) {
								pstmtUpdate_tDBOutput_1.setNull(3,
										java.sql.Types.INTEGER);
							} else {
								pstmtUpdate_tDBOutput_1.setInt(3,
										primiparos_acuerdo.semestre);
							}

							if (primiparos_acuerdo.codigo_facultad == null) {
								pstmtUpdate_tDBOutput_1.setNull(4,
										java.sql.Types.INTEGER);
							} else {
								pstmtUpdate_tDBOutput_1.setInt(4,
										primiparos_acuerdo.codigo_facultad);
							}

							if (primiparos_acuerdo.facultad == null) {
								pstmtUpdate_tDBOutput_1.setNull(5,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tDBOutput_1.setString(5,
										primiparos_acuerdo.facultad);
							}

							if (primiparos_acuerdo.codigo_proyecto_snies == null) {
								pstmtUpdate_tDBOutput_1.setNull(6,
										java.sql.Types.INTEGER);
							} else {
								pstmtUpdate_tDBOutput_1
										.setInt(6,
												primiparos_acuerdo.codigo_proyecto_snies);
							}

							if (primiparos_acuerdo.proyecto_snies == null) {
								pstmtUpdate_tDBOutput_1.setNull(7,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tDBOutput_1.setString(7,
										primiparos_acuerdo.proyecto_snies);
							}

							if (primiparos_acuerdo.codigo_proyecto == null) {
								pstmtUpdate_tDBOutput_1.setNull(8,
										java.sql.Types.INTEGER);
							} else {
								pstmtUpdate_tDBOutput_1.setInt(8,
										primiparos_acuerdo.codigo_proyecto);
							}

							if (primiparos_acuerdo.proyecto == null) {
								pstmtUpdate_tDBOutput_1.setNull(9,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tDBOutput_1.setString(9,
										primiparos_acuerdo.proyecto);
							}

							if (primiparos_acuerdo.metodologia == null) {
								pstmtUpdate_tDBOutput_1.setNull(10,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tDBOutput_1.setString(10,
										primiparos_acuerdo.metodologia);
							}

							if (primiparos_acuerdo.modalidad == null) {
								pstmtUpdate_tDBOutput_1.setNull(11,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tDBOutput_1.setString(11,
										primiparos_acuerdo.modalidad);
							}

							if (primiparos_acuerdo.nivel == null) {
								pstmtUpdate_tDBOutput_1.setNull(12,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tDBOutput_1.setString(12,
										primiparos_acuerdo.nivel);
							}

							if (primiparos_acuerdo.estrato == null) {
								pstmtUpdate_tDBOutput_1.setNull(13,
										java.sql.Types.INTEGER);
							} else {
								pstmtUpdate_tDBOutput_1.setInt(13,
										primiparos_acuerdo.estrato);
							}

							if (primiparos_acuerdo.genero == null) {
								pstmtUpdate_tDBOutput_1.setNull(14,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tDBOutput_1.setString(14,
										primiparos_acuerdo.genero);
							}

							if (primiparos_acuerdo.codigo_departamento == null) {
								pstmtUpdate_tDBOutput_1.setNull(15,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tDBOutput_1.setString(15,
										primiparos_acuerdo.codigo_departamento);
							}

							if (primiparos_acuerdo.departamento == null) {
								pstmtUpdate_tDBOutput_1.setNull(16,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tDBOutput_1.setString(16,
										primiparos_acuerdo.departamento);
							}

							if (primiparos_acuerdo.codigo_municipio == null) {
								pstmtUpdate_tDBOutput_1.setNull(17,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tDBOutput_1.setString(17,
										primiparos_acuerdo.codigo_municipio);
							}

							if (primiparos_acuerdo.municipio == null) {
								pstmtUpdate_tDBOutput_1.setNull(18,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tDBOutput_1.setString(18,
										primiparos_acuerdo.municipio);
							}

							if (primiparos_acuerdo.documento == null) {
								pstmtUpdate_tDBOutput_1.setNull(19,
										java.sql.Types.INTEGER);
							} else {
								pstmtUpdate_tDBOutput_1.setLong(19,
										primiparos_acuerdo.documento);
							}

							if (primiparos_acuerdo.nombre == null) {
								pstmtUpdate_tDBOutput_1.setNull(20,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tDBOutput_1.setString(20,
										primiparos_acuerdo.nombre);
							}

							if (primiparos_acuerdo.codigo_localidad == null) {
								pstmtUpdate_tDBOutput_1.setNull(21,
										java.sql.Types.INTEGER);
							} else {
								pstmtUpdate_tDBOutput_1.setInt(21,
										primiparos_acuerdo.codigo_localidad);
							}

							if (primiparos_acuerdo.localidad == null) {
								pstmtUpdate_tDBOutput_1.setNull(22,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tDBOutput_1.setString(22,
										primiparos_acuerdo.localidad);
							}

							if (primiparos_acuerdo.tipo_colegio == null) {
								pstmtUpdate_tDBOutput_1.setNull(23,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tDBOutput_1.setString(23,
										primiparos_acuerdo.tipo_colegio);
							}

							if (primiparos_acuerdo.codigo_localidad_colegio == null) {
								pstmtUpdate_tDBOutput_1.setNull(24,
										java.sql.Types.INTEGER);
							} else {
								pstmtUpdate_tDBOutput_1
										.setInt(24,
												primiparos_acuerdo.codigo_localidad_colegio);
							}

							if (primiparos_acuerdo.localidad_colegio == null) {
								pstmtUpdate_tDBOutput_1.setNull(25,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tDBOutput_1.setString(25,
										primiparos_acuerdo.localidad_colegio);
							}

							if (primiparos_acuerdo.calendario_colegio == null) {
								pstmtUpdate_tDBOutput_1.setNull(26,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tDBOutput_1.setString(26,
										primiparos_acuerdo.calendario_colegio);
							}

							if (primiparos_acuerdo.codigo_colegio == null) {
								pstmtUpdate_tDBOutput_1.setNull(27,
										java.sql.Types.INTEGER);
							} else {
								pstmtUpdate_tDBOutput_1.setLong(27,
										primiparos_acuerdo.codigo_colegio);
							}

							if (primiparos_acuerdo.colegio == null) {
								pstmtUpdate_tDBOutput_1.setNull(28,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tDBOutput_1.setString(28,
										primiparos_acuerdo.colegio);
							}

							if (primiparos_acuerdo.municipio_colegio == null) {
								pstmtUpdate_tDBOutput_1.setNull(29,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tDBOutput_1.setString(29,
										primiparos_acuerdo.municipio_colegio);
							}

							if (primiparos_acuerdo.departamento_colegio == null) {
								pstmtUpdate_tDBOutput_1.setNull(30,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tDBOutput_1
										.setString(
												30,
												primiparos_acuerdo.departamento_colegio);
							}

							if (primiparos_acuerdo.codigo_inscripcion == null) {
								pstmtUpdate_tDBOutput_1.setNull(31,
										java.sql.Types.INTEGER);
							} else {
								pstmtUpdate_tDBOutput_1.setInt(31,
										primiparos_acuerdo.codigo_inscripcion);
							}

							if (primiparos_acuerdo.inscripcion == null) {
								pstmtUpdate_tDBOutput_1.setNull(32,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tDBOutput_1.setString(32,
										primiparos_acuerdo.inscripcion);
							}

							if (primiparos_acuerdo.biologia == null) {
								pstmtUpdate_tDBOutput_1.setNull(33,
										java.sql.Types.DOUBLE);
							} else {
								pstmtUpdate_tDBOutput_1.setDouble(33,
										primiparos_acuerdo.biologia);
							}

							if (primiparos_acuerdo.quimica == null) {
								pstmtUpdate_tDBOutput_1.setNull(34,
										java.sql.Types.DOUBLE);
							} else {
								pstmtUpdate_tDBOutput_1.setDouble(34,
										primiparos_acuerdo.quimica);
							}

							if (primiparos_acuerdo.fisica == null) {
								pstmtUpdate_tDBOutput_1.setNull(35,
										java.sql.Types.DOUBLE);
							} else {
								pstmtUpdate_tDBOutput_1.setDouble(35,
										primiparos_acuerdo.fisica);
							}

							if (primiparos_acuerdo.sociales == null) {
								pstmtUpdate_tDBOutput_1.setNull(36,
										java.sql.Types.DOUBLE);
							} else {
								pstmtUpdate_tDBOutput_1.setDouble(36,
										primiparos_acuerdo.sociales);
							}

							if (primiparos_acuerdo.aptitud_verbal == null) {
								pstmtUpdate_tDBOutput_1.setNull(37,
										java.sql.Types.DOUBLE);
							} else {
								pstmtUpdate_tDBOutput_1.setDouble(37,
										primiparos_acuerdo.aptitud_verbal);
							}

							if (primiparos_acuerdo.espanol_literatura == null) {
								pstmtUpdate_tDBOutput_1.setNull(38,
										java.sql.Types.DOUBLE);
							} else {
								pstmtUpdate_tDBOutput_1.setDouble(38,
										primiparos_acuerdo.espanol_literatura);
							}

							if (primiparos_acuerdo.aptitud_matematica == null) {
								pstmtUpdate_tDBOutput_1.setNull(39,
										java.sql.Types.DOUBLE);
							} else {
								pstmtUpdate_tDBOutput_1.setDouble(39,
										primiparos_acuerdo.aptitud_matematica);
							}

							if (primiparos_acuerdo.condicion_matematica == null) {
								pstmtUpdate_tDBOutput_1.setNull(40,
										java.sql.Types.DOUBLE);
							} else {
								pstmtUpdate_tDBOutput_1
										.setDouble(
												40,
												primiparos_acuerdo.condicion_matematica);
							}

							if (primiparos_acuerdo.filosofia == null) {
								pstmtUpdate_tDBOutput_1.setNull(41,
										java.sql.Types.DOUBLE);
							} else {
								pstmtUpdate_tDBOutput_1.setDouble(41,
										primiparos_acuerdo.filosofia);
							}

							if (primiparos_acuerdo.historia == null) {
								pstmtUpdate_tDBOutput_1.setNull(42,
										java.sql.Types.DOUBLE);
							} else {
								pstmtUpdate_tDBOutput_1.setDouble(42,
										primiparos_acuerdo.historia);
							}

							if (primiparos_acuerdo.geografia == null) {
								pstmtUpdate_tDBOutput_1.setNull(43,
										java.sql.Types.DOUBLE);
							} else {
								pstmtUpdate_tDBOutput_1.setDouble(43,
										primiparos_acuerdo.geografia);
							}

							if (primiparos_acuerdo.idioma == null) {
								pstmtUpdate_tDBOutput_1.setNull(44,
										java.sql.Types.DOUBLE);
							} else {
								pstmtUpdate_tDBOutput_1.setDouble(44,
										primiparos_acuerdo.idioma);
							}

							if (primiparos_acuerdo.interdiciplinar == null) {
								pstmtUpdate_tDBOutput_1.setNull(45,
										java.sql.Types.DOUBLE);
							} else {
								pstmtUpdate_tDBOutput_1.setDouble(45,
										primiparos_acuerdo.interdiciplinar);
							}

							if (primiparos_acuerdo.codiogo_interdiciplinar == null) {
								pstmtUpdate_tDBOutput_1.setNull(46,
										java.sql.Types.INTEGER);
							} else {
								pstmtUpdate_tDBOutput_1
										.setInt(46,
												primiparos_acuerdo.codiogo_interdiciplinar);
							}

							if (primiparos_acuerdo.puntos_icfes == null) {
								pstmtUpdate_tDBOutput_1.setNull(47,
										java.sql.Types.DOUBLE);
							} else {
								pstmtUpdate_tDBOutput_1.setDouble(47,
										primiparos_acuerdo.puntos_icfes);
							}

							if (primiparos_acuerdo.puntos_homologados == null) {
								pstmtUpdate_tDBOutput_1.setNull(48,
										java.sql.Types.DOUBLE);
							} else {
								pstmtUpdate_tDBOutput_1.setDouble(48,
										primiparos_acuerdo.puntos_homologados);
							}

							if (primiparos_acuerdo.profundizacion == null) {
								pstmtUpdate_tDBOutput_1.setNull(49,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tDBOutput_1.setString(49,
										primiparos_acuerdo.profundizacion);
							}

							if (primiparos_acuerdo.valor_profundizacion == null) {
								pstmtUpdate_tDBOutput_1.setNull(50,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tDBOutput_1
										.setString(
												50,
												primiparos_acuerdo.valor_profundizacion);
							}

							if (primiparos_acuerdo.profundizacion_dos == null) {
								pstmtUpdate_tDBOutput_1.setNull(51,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tDBOutput_1.setString(51,
										primiparos_acuerdo.profundizacion_dos);
							}

							if (primiparos_acuerdo.valor_profundizacion_dos == null) {
								pstmtUpdate_tDBOutput_1.setNull(52,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tDBOutput_1
										.setString(
												52,
												primiparos_acuerdo.valor_profundizacion_dos);
							}

							if (primiparos_acuerdo.profundizacion_tres == null) {
								pstmtUpdate_tDBOutput_1.setNull(53,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tDBOutput_1.setString(53,
										primiparos_acuerdo.profundizacion_tres);
							}

							if (primiparos_acuerdo.valor_profundizacion_tres == null) {
								pstmtUpdate_tDBOutput_1.setNull(54,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tDBOutput_1
										.setString(
												54,
												primiparos_acuerdo.valor_profundizacion_tres);
							}

							if (primiparos_acuerdo.codigo_estado == null) {
								pstmtUpdate_tDBOutput_1.setNull(55,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tDBOutput_1.setString(55,
										primiparos_acuerdo.codigo_estado);
							}

							if (primiparos_acuerdo.estado == null) {
								pstmtUpdate_tDBOutput_1.setNull(56,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tDBOutput_1.setString(56,
										primiparos_acuerdo.estado);
							}

							if (primiparos_acuerdo.codigo_estudiante == null) {
								pstmtUpdate_tDBOutput_1.setNull(57,
										java.sql.Types.INTEGER);
							} else {
								pstmtUpdate_tDBOutput_1.setLong(57,
										primiparos_acuerdo.codigo_estudiante);
							}

							if (primiparos_acuerdo.valor_matricula == null) {
								pstmtUpdate_tDBOutput_1.setNull(58,
										java.sql.Types.DOUBLE);
							} else {
								pstmtUpdate_tDBOutput_1.setDouble(58,
										primiparos_acuerdo.valor_matricula);
							}

							if (primiparos_acuerdo.anno_semestre == null) {
								pstmtUpdate_tDBOutput_1.setNull(59,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tDBOutput_1.setString(59,
										primiparos_acuerdo.anno_semestre);
							}

							if (primiparos_acuerdo.fecha_carga != null) {
								pstmtUpdate_tDBOutput_1.setTimestamp(
										60,
										new java.sql.Timestamp(
												primiparos_acuerdo.fecha_carga
														.getTime()));
							} else {
								pstmtUpdate_tDBOutput_1.setNull(60,
										java.sql.Types.TIMESTAMP);
							}

							if (primiparos_acuerdo.acuerdo == null) {
								pstmtUpdate_tDBOutput_1.setNull(61,
										java.sql.Types.INTEGER);
							} else {
								pstmtUpdate_tDBOutput_1.setInt(61,
										primiparos_acuerdo.acuerdo);
							}

							pstmtUpdate_tDBOutput_1.setInt(
									62 + count_tDBOutput_1,
									primiparos_acuerdo.id);

							try {

								updateFlag_tDBOutput_1 = pstmtUpdate_tDBOutput_1
										.executeUpdate();
								updatedCount_tDBOutput_1 = updatedCount_tDBOutput_1
										+ updateFlag_tDBOutput_1;

								if (updateFlag_tDBOutput_1 == 0) {

									pstmtInsert_tDBOutput_1.setInt(1,
											primiparos_acuerdo.id);

									if (primiparos_acuerdo.codigo_ies == null) {
										pstmtInsert_tDBOutput_1.setNull(2,
												java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_1.setInt(2,
												primiparos_acuerdo.codigo_ies);
									}

									if (primiparos_acuerdo.anno == null) {
										pstmtInsert_tDBOutput_1.setNull(3,
												java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_1.setInt(3,
												primiparos_acuerdo.anno);
									}

									if (primiparos_acuerdo.semestre == null) {
										pstmtInsert_tDBOutput_1.setNull(4,
												java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_1.setInt(4,
												primiparos_acuerdo.semestre);
									}

									if (primiparos_acuerdo.codigo_facultad == null) {
										pstmtInsert_tDBOutput_1.setNull(5,
												java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_1
												.setInt(5,
														primiparos_acuerdo.codigo_facultad);
									}

									if (primiparos_acuerdo.facultad == null) {
										pstmtInsert_tDBOutput_1.setNull(6,
												java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_1.setString(6,
												primiparos_acuerdo.facultad);
									}

									if (primiparos_acuerdo.codigo_proyecto_snies == null) {
										pstmtInsert_tDBOutput_1.setNull(7,
												java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_1
												.setInt(7,
														primiparos_acuerdo.codigo_proyecto_snies);
									}

									if (primiparos_acuerdo.proyecto_snies == null) {
										pstmtInsert_tDBOutput_1.setNull(8,
												java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_1
												.setString(
														8,
														primiparos_acuerdo.proyecto_snies);
									}

									if (primiparos_acuerdo.codigo_proyecto == null) {
										pstmtInsert_tDBOutput_1.setNull(9,
												java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_1
												.setInt(9,
														primiparos_acuerdo.codigo_proyecto);
									}

									if (primiparos_acuerdo.proyecto == null) {
										pstmtInsert_tDBOutput_1.setNull(10,
												java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_1.setString(10,
												primiparos_acuerdo.proyecto);
									}

									if (primiparos_acuerdo.metodologia == null) {
										pstmtInsert_tDBOutput_1.setNull(11,
												java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_1.setString(11,
												primiparos_acuerdo.metodologia);
									}

									if (primiparos_acuerdo.modalidad == null) {
										pstmtInsert_tDBOutput_1.setNull(12,
												java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_1.setString(12,
												primiparos_acuerdo.modalidad);
									}

									if (primiparos_acuerdo.nivel == null) {
										pstmtInsert_tDBOutput_1.setNull(13,
												java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_1.setString(13,
												primiparos_acuerdo.nivel);
									}

									if (primiparos_acuerdo.estrato == null) {
										pstmtInsert_tDBOutput_1.setNull(14,
												java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_1.setInt(14,
												primiparos_acuerdo.estrato);
									}

									if (primiparos_acuerdo.genero == null) {
										pstmtInsert_tDBOutput_1.setNull(15,
												java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_1.setString(15,
												primiparos_acuerdo.genero);
									}

									if (primiparos_acuerdo.codigo_departamento == null) {
										pstmtInsert_tDBOutput_1.setNull(16,
												java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_1
												.setString(
														16,
														primiparos_acuerdo.codigo_departamento);
									}

									if (primiparos_acuerdo.departamento == null) {
										pstmtInsert_tDBOutput_1.setNull(17,
												java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_1
												.setString(
														17,
														primiparos_acuerdo.departamento);
									}

									if (primiparos_acuerdo.codigo_municipio == null) {
										pstmtInsert_tDBOutput_1.setNull(18,
												java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_1
												.setString(
														18,
														primiparos_acuerdo.codigo_municipio);
									}

									if (primiparos_acuerdo.municipio == null) {
										pstmtInsert_tDBOutput_1.setNull(19,
												java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_1.setString(19,
												primiparos_acuerdo.municipio);
									}

									if (primiparos_acuerdo.documento == null) {
										pstmtInsert_tDBOutput_1.setNull(20,
												java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_1.setLong(20,
												primiparos_acuerdo.documento);
									}

									if (primiparos_acuerdo.nombre == null) {
										pstmtInsert_tDBOutput_1.setNull(21,
												java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_1.setString(21,
												primiparos_acuerdo.nombre);
									}

									if (primiparos_acuerdo.codigo_localidad == null) {
										pstmtInsert_tDBOutput_1.setNull(22,
												java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_1
												.setInt(22,
														primiparos_acuerdo.codigo_localidad);
									}

									if (primiparos_acuerdo.localidad == null) {
										pstmtInsert_tDBOutput_1.setNull(23,
												java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_1.setString(23,
												primiparos_acuerdo.localidad);
									}

									if (primiparos_acuerdo.tipo_colegio == null) {
										pstmtInsert_tDBOutput_1.setNull(24,
												java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_1
												.setString(
														24,
														primiparos_acuerdo.tipo_colegio);
									}

									if (primiparos_acuerdo.codigo_localidad_colegio == null) {
										pstmtInsert_tDBOutput_1.setNull(25,
												java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_1
												.setInt(25,
														primiparos_acuerdo.codigo_localidad_colegio);
									}

									if (primiparos_acuerdo.localidad_colegio == null) {
										pstmtInsert_tDBOutput_1.setNull(26,
												java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_1
												.setString(
														26,
														primiparos_acuerdo.localidad_colegio);
									}

									if (primiparos_acuerdo.calendario_colegio == null) {
										pstmtInsert_tDBOutput_1.setNull(27,
												java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_1
												.setString(
														27,
														primiparos_acuerdo.calendario_colegio);
									}

									if (primiparos_acuerdo.codigo_colegio == null) {
										pstmtInsert_tDBOutput_1.setNull(28,
												java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_1
												.setLong(
														28,
														primiparos_acuerdo.codigo_colegio);
									}

									if (primiparos_acuerdo.colegio == null) {
										pstmtInsert_tDBOutput_1.setNull(29,
												java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_1.setString(29,
												primiparos_acuerdo.colegio);
									}

									if (primiparos_acuerdo.municipio_colegio == null) {
										pstmtInsert_tDBOutput_1.setNull(30,
												java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_1
												.setString(
														30,
														primiparos_acuerdo.municipio_colegio);
									}

									if (primiparos_acuerdo.departamento_colegio == null) {
										pstmtInsert_tDBOutput_1.setNull(31,
												java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_1
												.setString(
														31,
														primiparos_acuerdo.departamento_colegio);
									}

									if (primiparos_acuerdo.codigo_inscripcion == null) {
										pstmtInsert_tDBOutput_1.setNull(32,
												java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_1
												.setInt(32,
														primiparos_acuerdo.codigo_inscripcion);
									}

									if (primiparos_acuerdo.inscripcion == null) {
										pstmtInsert_tDBOutput_1.setNull(33,
												java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_1.setString(33,
												primiparos_acuerdo.inscripcion);
									}

									if (primiparos_acuerdo.biologia == null) {
										pstmtInsert_tDBOutput_1.setNull(34,
												java.sql.Types.DOUBLE);
									} else {
										pstmtInsert_tDBOutput_1.setDouble(34,
												primiparos_acuerdo.biologia);
									}

									if (primiparos_acuerdo.quimica == null) {
										pstmtInsert_tDBOutput_1.setNull(35,
												java.sql.Types.DOUBLE);
									} else {
										pstmtInsert_tDBOutput_1.setDouble(35,
												primiparos_acuerdo.quimica);
									}

									if (primiparos_acuerdo.fisica == null) {
										pstmtInsert_tDBOutput_1.setNull(36,
												java.sql.Types.DOUBLE);
									} else {
										pstmtInsert_tDBOutput_1.setDouble(36,
												primiparos_acuerdo.fisica);
									}

									if (primiparos_acuerdo.sociales == null) {
										pstmtInsert_tDBOutput_1.setNull(37,
												java.sql.Types.DOUBLE);
									} else {
										pstmtInsert_tDBOutput_1.setDouble(37,
												primiparos_acuerdo.sociales);
									}

									if (primiparos_acuerdo.aptitud_verbal == null) {
										pstmtInsert_tDBOutput_1.setNull(38,
												java.sql.Types.DOUBLE);
									} else {
										pstmtInsert_tDBOutput_1
												.setDouble(
														38,
														primiparos_acuerdo.aptitud_verbal);
									}

									if (primiparos_acuerdo.espanol_literatura == null) {
										pstmtInsert_tDBOutput_1.setNull(39,
												java.sql.Types.DOUBLE);
									} else {
										pstmtInsert_tDBOutput_1
												.setDouble(
														39,
														primiparos_acuerdo.espanol_literatura);
									}

									if (primiparos_acuerdo.aptitud_matematica == null) {
										pstmtInsert_tDBOutput_1.setNull(40,
												java.sql.Types.DOUBLE);
									} else {
										pstmtInsert_tDBOutput_1
												.setDouble(
														40,
														primiparos_acuerdo.aptitud_matematica);
									}

									if (primiparos_acuerdo.condicion_matematica == null) {
										pstmtInsert_tDBOutput_1.setNull(41,
												java.sql.Types.DOUBLE);
									} else {
										pstmtInsert_tDBOutput_1
												.setDouble(
														41,
														primiparos_acuerdo.condicion_matematica);
									}

									if (primiparos_acuerdo.filosofia == null) {
										pstmtInsert_tDBOutput_1.setNull(42,
												java.sql.Types.DOUBLE);
									} else {
										pstmtInsert_tDBOutput_1.setDouble(42,
												primiparos_acuerdo.filosofia);
									}

									if (primiparos_acuerdo.historia == null) {
										pstmtInsert_tDBOutput_1.setNull(43,
												java.sql.Types.DOUBLE);
									} else {
										pstmtInsert_tDBOutput_1.setDouble(43,
												primiparos_acuerdo.historia);
									}

									if (primiparos_acuerdo.geografia == null) {
										pstmtInsert_tDBOutput_1.setNull(44,
												java.sql.Types.DOUBLE);
									} else {
										pstmtInsert_tDBOutput_1.setDouble(44,
												primiparos_acuerdo.geografia);
									}

									if (primiparos_acuerdo.idioma == null) {
										pstmtInsert_tDBOutput_1.setNull(45,
												java.sql.Types.DOUBLE);
									} else {
										pstmtInsert_tDBOutput_1.setDouble(45,
												primiparos_acuerdo.idioma);
									}

									if (primiparos_acuerdo.interdiciplinar == null) {
										pstmtInsert_tDBOutput_1.setNull(46,
												java.sql.Types.DOUBLE);
									} else {
										pstmtInsert_tDBOutput_1
												.setDouble(
														46,
														primiparos_acuerdo.interdiciplinar);
									}

									if (primiparos_acuerdo.codiogo_interdiciplinar == null) {
										pstmtInsert_tDBOutput_1.setNull(47,
												java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_1
												.setInt(47,
														primiparos_acuerdo.codiogo_interdiciplinar);
									}

									if (primiparos_acuerdo.puntos_icfes == null) {
										pstmtInsert_tDBOutput_1.setNull(48,
												java.sql.Types.DOUBLE);
									} else {
										pstmtInsert_tDBOutput_1
												.setDouble(
														48,
														primiparos_acuerdo.puntos_icfes);
									}

									if (primiparos_acuerdo.puntos_homologados == null) {
										pstmtInsert_tDBOutput_1.setNull(49,
												java.sql.Types.DOUBLE);
									} else {
										pstmtInsert_tDBOutput_1
												.setDouble(
														49,
														primiparos_acuerdo.puntos_homologados);
									}

									if (primiparos_acuerdo.profundizacion == null) {
										pstmtInsert_tDBOutput_1.setNull(50,
												java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_1
												.setString(
														50,
														primiparos_acuerdo.profundizacion);
									}

									if (primiparos_acuerdo.valor_profundizacion == null) {
										pstmtInsert_tDBOutput_1.setNull(51,
												java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_1
												.setString(
														51,
														primiparos_acuerdo.valor_profundizacion);
									}

									if (primiparos_acuerdo.profundizacion_dos == null) {
										pstmtInsert_tDBOutput_1.setNull(52,
												java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_1
												.setString(
														52,
														primiparos_acuerdo.profundizacion_dos);
									}

									if (primiparos_acuerdo.valor_profundizacion_dos == null) {
										pstmtInsert_tDBOutput_1.setNull(53,
												java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_1
												.setString(
														53,
														primiparos_acuerdo.valor_profundizacion_dos);
									}

									if (primiparos_acuerdo.profundizacion_tres == null) {
										pstmtInsert_tDBOutput_1.setNull(54,
												java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_1
												.setString(
														54,
														primiparos_acuerdo.profundizacion_tres);
									}

									if (primiparos_acuerdo.valor_profundizacion_tres == null) {
										pstmtInsert_tDBOutput_1.setNull(55,
												java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_1
												.setString(
														55,
														primiparos_acuerdo.valor_profundizacion_tres);
									}

									if (primiparos_acuerdo.codigo_estado == null) {
										pstmtInsert_tDBOutput_1.setNull(56,
												java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_1
												.setString(
														56,
														primiparos_acuerdo.codigo_estado);
									}

									if (primiparos_acuerdo.estado == null) {
										pstmtInsert_tDBOutput_1.setNull(57,
												java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_1.setString(57,
												primiparos_acuerdo.estado);
									}

									if (primiparos_acuerdo.codigo_estudiante == null) {
										pstmtInsert_tDBOutput_1.setNull(58,
												java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_1
												.setLong(
														58,
														primiparos_acuerdo.codigo_estudiante);
									}

									if (primiparos_acuerdo.valor_matricula == null) {
										pstmtInsert_tDBOutput_1.setNull(59,
												java.sql.Types.DOUBLE);
									} else {
										pstmtInsert_tDBOutput_1
												.setDouble(
														59,
														primiparos_acuerdo.valor_matricula);
									}

									if (primiparos_acuerdo.anno_semestre == null) {
										pstmtInsert_tDBOutput_1.setNull(60,
												java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_1
												.setString(
														60,
														primiparos_acuerdo.anno_semestre);
									}

									if (primiparos_acuerdo.fecha_carga != null) {
										pstmtInsert_tDBOutput_1
												.setTimestamp(
														61,
														new java.sql.Timestamp(
																primiparos_acuerdo.fecha_carga
																		.getTime()));
									} else {
										pstmtInsert_tDBOutput_1.setNull(61,
												java.sql.Types.TIMESTAMP);
									}

									if (primiparos_acuerdo.acuerdo == null) {
										pstmtInsert_tDBOutput_1.setNull(62,
												java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_1.setInt(62,
												primiparos_acuerdo.acuerdo);
									}

									insertedCount_tDBOutput_1 = insertedCount_tDBOutput_1
											+ pstmtInsert_tDBOutput_1
													.executeUpdate();
									nb_line_tDBOutput_1++;

								} else {
									nb_line_tDBOutput_1++;

								}
							} catch (java.lang.Exception e) {

								whetherReject_tDBOutput_1 = true;
								nb_line_tDBOutput_1++;
								System.err.print(e.getMessage());
							}
							commitCounter_tDBOutput_1++;
							if (commitEvery_tDBOutput_1 <= commitCounter_tDBOutput_1) {
								conn_tDBOutput_1.commit();

								commitCounter_tDBOutput_1 = 0;
							}

							tos_count_tDBOutput_1++;

							/**
							 * [tDBOutput_1 main ] stop
							 */

							/**
							 * [tDBOutput_1 process_data_begin ] start
							 */

							currentComponent = "tDBOutput_1";

							/**
							 * [tDBOutput_1 process_data_begin ] stop
							 */

							/**
							 * [tDBOutput_1 process_data_end ] start
							 */

							currentComponent = "tDBOutput_1";

							/**
							 * [tDBOutput_1 process_data_end ] stop
							 */

						} // End of branch "primiparos_acuerdo"

						/**
						 * [tMap_2 process_data_end ] start
						 */

						currentComponent = "tMap_2";

						/**
						 * [tMap_2 process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 process_data_end ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 end ] start
						 */

						currentComponent = "tDBInput_1";

					}
				} finally {
					if (rs_tDBInput_1 != null) {
						rs_tDBInput_1.close();
					}
					if (stmt_tDBInput_1 != null) {
						stmt_tDBInput_1.close();
					}
					if (conn_tDBInput_1 != null && !conn_tDBInput_1.isClosed()) {

						conn_tDBInput_1.commit();

						conn_tDBInput_1.close();

					}

				}
				globalMap.put("tDBInput_1_NB_LINE", nb_line_tDBInput_1);

				ok_Hash.put("tDBInput_1", true);
				end_Hash.put("tDBInput_1", System.currentTimeMillis());

				/**
				 * [tDBInput_1 end ] stop
				 */

				/**
				 * [tMap_2 end ] start
				 */

				currentComponent = "tMap_2";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row2 != null) {
					tHash_Lookup_row2.endGet();
				}
				globalMap.remove("tHash_Lookup_row2");

				// ###############################

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row1" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tMap_2", true);
				end_Hash.put("tMap_2", System.currentTimeMillis());

				/**
				 * [tMap_2 end ] stop
				 */

				/**
				 * [tDBOutput_1 end ] start
				 */

				currentComponent = "tDBOutput_1";

				if (pstmtUpdate_tDBOutput_1 != null) {
					pstmtUpdate_tDBOutput_1.close();
					resourceMap.remove("pstmtUpdate_tDBOutput_1");
				}
				if (pstmtInsert_tDBOutput_1 != null) {
					pstmtInsert_tDBOutput_1.close();
					resourceMap.remove("pstmtInsert_tDBOutput_1");
				}
				resourceMap.put("statementClosed_tDBOutput_1", true);

				conn_tDBOutput_1.commit();

				conn_tDBOutput_1.close();

				resourceMap.put("finish_tDBOutput_1", true);

				nb_line_deleted_tDBOutput_1 = nb_line_deleted_tDBOutput_1
						+ deletedCount_tDBOutput_1;
				nb_line_update_tDBOutput_1 = nb_line_update_tDBOutput_1
						+ updatedCount_tDBOutput_1;
				nb_line_inserted_tDBOutput_1 = nb_line_inserted_tDBOutput_1
						+ insertedCount_tDBOutput_1;
				nb_line_rejected_tDBOutput_1 = nb_line_rejected_tDBOutput_1
						+ rejectedCount_tDBOutput_1;

				globalMap.put("tDBOutput_1_NB_LINE", nb_line_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_UPDATED",
						nb_line_update_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_INSERTED",
						nb_line_inserted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_DELETED",
						nb_line_deleted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_REJECTED",
						nb_line_rejected_tDBOutput_1);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("primiparos_acuerdo"
								+ iterateId, 2, 0);
					}
				}

				ok_Hash.put("tDBOutput_1", true);
				end_Hash.put("tDBOutput_1", System.currentTimeMillis());

				/**
				 * [tDBOutput_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tMap_2"
			globalMap.remove("tHash_Lookup_row2");

			try {

				/**
				 * [tDBInput_1 finally ] start
				 */

				currentComponent = "tDBInput_1";

				/**
				 * [tDBInput_1 finally ] stop
				 */

				/**
				 * [tMap_2 finally ] start
				 */

				currentComponent = "tMap_2";

				/**
				 * [tMap_2 finally ] stop
				 */

				/**
				 * [tDBOutput_1 finally ] start
				 */

				currentComponent = "tDBOutput_1";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
						java.sql.PreparedStatement pstmtUpdateToClose_tDBOutput_1 = null;
						if ((pstmtUpdateToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmtUpdate_tDBOutput_1")) != null) {
							pstmtUpdateToClose_tDBOutput_1.close();
						}
						java.sql.PreparedStatement pstmtInsertToClose_tDBOutput_1 = null;
						if ((pstmtInsertToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmtInsert_tDBOutput_1")) != null) {
							pstmtInsertToClose_tDBOutput_1.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_1") == null) {
						java.sql.Connection ctn_tDBOutput_1 = null;
						if ((ctn_tDBOutput_1 = (java.sql.Connection) resourceMap
								.get("conn_tDBOutput_1")) != null) {
							try {
								ctn_tDBOutput_1.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_1) {
								String errorMessage_tDBOutput_1 = "failed to close the connection in tDBOutput_1 :"
										+ sqlEx_tDBOutput_1.getMessage();
								System.err.println(errorMessage_tDBOutput_1);
							}
						}
					}
				}

				/**
				 * [tDBOutput_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}

	public static class row2Struct implements
			routines.system.IPersistableComparableLookupRow<row2Struct> {
		final static byte[] commonByteArrayLock_DMINDICADORES_acuerdo_estudiante = new byte[0];
		static byte[] commonByteArray_DMINDICADORES_acuerdo_estudiante = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id;

		public int getId() {
			return this.id;
		}

		public Integer codigo_ies;

		public Integer getCodigo_ies() {
			return this.codigo_ies;
		}

		public Integer anno;

		public Integer getAnno() {
			return this.anno;
		}

		public Integer semestre;

		public Integer getSemestre() {
			return this.semestre;
		}

		public Integer codigo_facultad;

		public Integer getCodigo_facultad() {
			return this.codigo_facultad;
		}

		public String facultad;

		public String getFacultad() {
			return this.facultad;
		}

		public Integer codigo_proyecto_snies;

		public Integer getCodigo_proyecto_snies() {
			return this.codigo_proyecto_snies;
		}

		public String proyecto_snies;

		public String getProyecto_snies() {
			return this.proyecto_snies;
		}

		public Integer codigo_proyecto;

		public Integer getCodigo_proyecto() {
			return this.codigo_proyecto;
		}

		public String proyecto;

		public String getProyecto() {
			return this.proyecto;
		}

		public String metodologia;

		public String getMetodologia() {
			return this.metodologia;
		}

		public String modalidad;

		public String getModalidad() {
			return this.modalidad;
		}

		public String nivel;

		public String getNivel() {
			return this.nivel;
		}

		public Integer estrato;

		public Integer getEstrato() {
			return this.estrato;
		}

		public String genero;

		public String getGenero() {
			return this.genero;
		}

		public String codigo_departamento;

		public String getCodigo_departamento() {
			return this.codigo_departamento;
		}

		public String departamento;

		public String getDepartamento() {
			return this.departamento;
		}

		public String codigo_municipio;

		public String getCodigo_municipio() {
			return this.codigo_municipio;
		}

		public String municipio;

		public String getMunicipio() {
			return this.municipio;
		}

		public Long documento;

		public Long getDocumento() {
			return this.documento;
		}

		public String nombre;

		public String getNombre() {
			return this.nombre;
		}

		public Integer codigo_localidad;

		public Integer getCodigo_localidad() {
			return this.codigo_localidad;
		}

		public String localidad;

		public String getLocalidad() {
			return this.localidad;
		}

		public String tipo_colegio;

		public String getTipo_colegio() {
			return this.tipo_colegio;
		}

		public Integer codigo_localidad_colegio;

		public Integer getCodigo_localidad_colegio() {
			return this.codigo_localidad_colegio;
		}

		public String localidad_colegio;

		public String getLocalidad_colegio() {
			return this.localidad_colegio;
		}

		public String calendario_colegio;

		public String getCalendario_colegio() {
			return this.calendario_colegio;
		}

		public Long codigo_colegio;

		public Long getCodigo_colegio() {
			return this.codigo_colegio;
		}

		public String colegio;

		public String getColegio() {
			return this.colegio;
		}

		public String municipio_colegio;

		public String getMunicipio_colegio() {
			return this.municipio_colegio;
		}

		public String departamento_colegio;

		public String getDepartamento_colegio() {
			return this.departamento_colegio;
		}

		public Integer codigo_inscripcion;

		public Integer getCodigo_inscripcion() {
			return this.codigo_inscripcion;
		}

		public String inscripcion;

		public String getInscripcion() {
			return this.inscripcion;
		}

		public Double biologia;

		public Double getBiologia() {
			return this.biologia;
		}

		public Double quimica;

		public Double getQuimica() {
			return this.quimica;
		}

		public Double fisica;

		public Double getFisica() {
			return this.fisica;
		}

		public Double sociales;

		public Double getSociales() {
			return this.sociales;
		}

		public Double aptitud_verbal;

		public Double getAptitud_verbal() {
			return this.aptitud_verbal;
		}

		public Double espanol_literatura;

		public Double getEspanol_literatura() {
			return this.espanol_literatura;
		}

		public Double aptitud_matematica;

		public Double getAptitud_matematica() {
			return this.aptitud_matematica;
		}

		public Double condicion_matematica;

		public Double getCondicion_matematica() {
			return this.condicion_matematica;
		}

		public Double filosofia;

		public Double getFilosofia() {
			return this.filosofia;
		}

		public Double historia;

		public Double getHistoria() {
			return this.historia;
		}

		public Double geografia;

		public Double getGeografia() {
			return this.geografia;
		}

		public Double idioma;

		public Double getIdioma() {
			return this.idioma;
		}

		public Double interdiciplinar;

		public Double getInterdiciplinar() {
			return this.interdiciplinar;
		}

		public Integer codiogo_interdiciplinar;

		public Integer getCodiogo_interdiciplinar() {
			return this.codiogo_interdiciplinar;
		}

		public Double puntos_icfes;

		public Double getPuntos_icfes() {
			return this.puntos_icfes;
		}

		public Double puntos_homologados;

		public Double getPuntos_homologados() {
			return this.puntos_homologados;
		}

		public String profundizacion;

		public String getProfundizacion() {
			return this.profundizacion;
		}

		public String valor_profundizacion;

		public String getValor_profundizacion() {
			return this.valor_profundizacion;
		}

		public String profundizacion_dos;

		public String getProfundizacion_dos() {
			return this.profundizacion_dos;
		}

		public String valor_profundizacion_dos;

		public String getValor_profundizacion_dos() {
			return this.valor_profundizacion_dos;
		}

		public String profundizacion_tres;

		public String getProfundizacion_tres() {
			return this.profundizacion_tres;
		}

		public String valor_profundizacion_tres;

		public String getValor_profundizacion_tres() {
			return this.valor_profundizacion_tres;
		}

		public String codigo_estado;

		public String getCodigo_estado() {
			return this.codigo_estado;
		}

		public String estado;

		public String getEstado() {
			return this.estado;
		}

		public Long codigo_estudiante;

		public Long getCodigo_estudiante() {
			return this.codigo_estudiante;
		}

		public Double valor_matricula;

		public Double getValor_matricula() {
			return this.valor_matricula;
		}

		public String anno_semestre;

		public String getAnno_semestre() {
			return this.anno_semestre;
		}

		public java.util.Date fecha_carga;

		public java.util.Date getFecha_carga() {
			return this.fecha_carga;
		}

		public Integer acuerdo;

		public Integer getAcuerdo() {
			return this.acuerdo;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.codigo_estudiante == null) ? 0
								: this.codigo_estudiante.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row2Struct other = (row2Struct) obj;

			if (this.codigo_estudiante == null) {
				if (other.codigo_estudiante != null)
					return false;

			} else if (!this.codigo_estudiante.equals(other.codigo_estudiante))

				return false;

			return true;
		}

		public void copyDataTo(row2Struct other) {

			other.id = this.id;
			other.codigo_ies = this.codigo_ies;
			other.anno = this.anno;
			other.semestre = this.semestre;
			other.codigo_facultad = this.codigo_facultad;
			other.facultad = this.facultad;
			other.codigo_proyecto_snies = this.codigo_proyecto_snies;
			other.proyecto_snies = this.proyecto_snies;
			other.codigo_proyecto = this.codigo_proyecto;
			other.proyecto = this.proyecto;
			other.metodologia = this.metodologia;
			other.modalidad = this.modalidad;
			other.nivel = this.nivel;
			other.estrato = this.estrato;
			other.genero = this.genero;
			other.codigo_departamento = this.codigo_departamento;
			other.departamento = this.departamento;
			other.codigo_municipio = this.codigo_municipio;
			other.municipio = this.municipio;
			other.documento = this.documento;
			other.nombre = this.nombre;
			other.codigo_localidad = this.codigo_localidad;
			other.localidad = this.localidad;
			other.tipo_colegio = this.tipo_colegio;
			other.codigo_localidad_colegio = this.codigo_localidad_colegio;
			other.localidad_colegio = this.localidad_colegio;
			other.calendario_colegio = this.calendario_colegio;
			other.codigo_colegio = this.codigo_colegio;
			other.colegio = this.colegio;
			other.municipio_colegio = this.municipio_colegio;
			other.departamento_colegio = this.departamento_colegio;
			other.codigo_inscripcion = this.codigo_inscripcion;
			other.inscripcion = this.inscripcion;
			other.biologia = this.biologia;
			other.quimica = this.quimica;
			other.fisica = this.fisica;
			other.sociales = this.sociales;
			other.aptitud_verbal = this.aptitud_verbal;
			other.espanol_literatura = this.espanol_literatura;
			other.aptitud_matematica = this.aptitud_matematica;
			other.condicion_matematica = this.condicion_matematica;
			other.filosofia = this.filosofia;
			other.historia = this.historia;
			other.geografia = this.geografia;
			other.idioma = this.idioma;
			other.interdiciplinar = this.interdiciplinar;
			other.codiogo_interdiciplinar = this.codiogo_interdiciplinar;
			other.puntos_icfes = this.puntos_icfes;
			other.puntos_homologados = this.puntos_homologados;
			other.profundizacion = this.profundizacion;
			other.valor_profundizacion = this.valor_profundizacion;
			other.profundizacion_dos = this.profundizacion_dos;
			other.valor_profundizacion_dos = this.valor_profundizacion_dos;
			other.profundizacion_tres = this.profundizacion_tres;
			other.valor_profundizacion_tres = this.valor_profundizacion_tres;
			other.codigo_estado = this.codigo_estado;
			other.estado = this.estado;
			other.codigo_estudiante = this.codigo_estudiante;
			other.valor_matricula = this.valor_matricula;
			other.anno_semestre = this.anno_semestre;
			other.fecha_carga = this.fecha_carga;
			other.acuerdo = this.acuerdo;

		}

		public void copyKeysDataTo(row2Struct other) {

			other.codigo_estudiante = this.codigo_estudiante;

		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(DataInputStream dis,
				ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DMINDICADORES_acuerdo_estudiante) {

				try {

					int length = 0;

					length = dis.readByte();
					if (length == -1) {
						this.codigo_estudiante = null;
					} else {
						this.codigo_estudiante = dis.readLong();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// Long

				if (this.codigo_estudiante == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.codigo_estudiante);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.id = dis.readInt();

				this.codigo_ies = readInteger(dis, ois);

				this.anno = readInteger(dis, ois);

				this.semestre = readInteger(dis, ois);

				this.codigo_facultad = readInteger(dis, ois);

				this.facultad = readString(dis, ois);

				this.codigo_proyecto_snies = readInteger(dis, ois);

				this.proyecto_snies = readString(dis, ois);

				this.codigo_proyecto = readInteger(dis, ois);

				this.proyecto = readString(dis, ois);

				this.metodologia = readString(dis, ois);

				this.modalidad = readString(dis, ois);

				this.nivel = readString(dis, ois);

				this.estrato = readInteger(dis, ois);

				this.genero = readString(dis, ois);

				this.codigo_departamento = readString(dis, ois);

				this.departamento = readString(dis, ois);

				this.codigo_municipio = readString(dis, ois);

				this.municipio = readString(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.documento = null;
				} else {
					this.documento = dis.readLong();
				}

				this.nombre = readString(dis, ois);

				this.codigo_localidad = readInteger(dis, ois);

				this.localidad = readString(dis, ois);

				this.tipo_colegio = readString(dis, ois);

				this.codigo_localidad_colegio = readInteger(dis, ois);

				this.localidad_colegio = readString(dis, ois);

				this.calendario_colegio = readString(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.codigo_colegio = null;
				} else {
					this.codigo_colegio = dis.readLong();
				}

				this.colegio = readString(dis, ois);

				this.municipio_colegio = readString(dis, ois);

				this.departamento_colegio = readString(dis, ois);

				this.codigo_inscripcion = readInteger(dis, ois);

				this.inscripcion = readString(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.biologia = null;
				} else {
					this.biologia = dis.readDouble();
				}

				length = dis.readByte();
				if (length == -1) {
					this.quimica = null;
				} else {
					this.quimica = dis.readDouble();
				}

				length = dis.readByte();
				if (length == -1) {
					this.fisica = null;
				} else {
					this.fisica = dis.readDouble();
				}

				length = dis.readByte();
				if (length == -1) {
					this.sociales = null;
				} else {
					this.sociales = dis.readDouble();
				}

				length = dis.readByte();
				if (length == -1) {
					this.aptitud_verbal = null;
				} else {
					this.aptitud_verbal = dis.readDouble();
				}

				length = dis.readByte();
				if (length == -1) {
					this.espanol_literatura = null;
				} else {
					this.espanol_literatura = dis.readDouble();
				}

				length = dis.readByte();
				if (length == -1) {
					this.aptitud_matematica = null;
				} else {
					this.aptitud_matematica = dis.readDouble();
				}

				length = dis.readByte();
				if (length == -1) {
					this.condicion_matematica = null;
				} else {
					this.condicion_matematica = dis.readDouble();
				}

				length = dis.readByte();
				if (length == -1) {
					this.filosofia = null;
				} else {
					this.filosofia = dis.readDouble();
				}

				length = dis.readByte();
				if (length == -1) {
					this.historia = null;
				} else {
					this.historia = dis.readDouble();
				}

				length = dis.readByte();
				if (length == -1) {
					this.geografia = null;
				} else {
					this.geografia = dis.readDouble();
				}

				length = dis.readByte();
				if (length == -1) {
					this.idioma = null;
				} else {
					this.idioma = dis.readDouble();
				}

				length = dis.readByte();
				if (length == -1) {
					this.interdiciplinar = null;
				} else {
					this.interdiciplinar = dis.readDouble();
				}

				this.codiogo_interdiciplinar = readInteger(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.puntos_icfes = null;
				} else {
					this.puntos_icfes = dis.readDouble();
				}

				length = dis.readByte();
				if (length == -1) {
					this.puntos_homologados = null;
				} else {
					this.puntos_homologados = dis.readDouble();
				}

				this.profundizacion = readString(dis, ois);

				this.valor_profundizacion = readString(dis, ois);

				this.profundizacion_dos = readString(dis, ois);

				this.valor_profundizacion_dos = readString(dis, ois);

				this.profundizacion_tres = readString(dis, ois);

				this.valor_profundizacion_tres = readString(dis, ois);

				this.codigo_estado = readString(dis, ois);

				this.estado = readString(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.valor_matricula = null;
				} else {
					this.valor_matricula = dis.readDouble();
				}

				this.anno_semestre = readString(dis, ois);

				this.fecha_carga = readDate(dis, ois);

				this.acuerdo = readInteger(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				dos.writeInt(this.id);

				writeInteger(this.codigo_ies, dos, oos);

				writeInteger(this.anno, dos, oos);

				writeInteger(this.semestre, dos, oos);

				writeInteger(this.codigo_facultad, dos, oos);

				writeString(this.facultad, dos, oos);

				writeInteger(this.codigo_proyecto_snies, dos, oos);

				writeString(this.proyecto_snies, dos, oos);

				writeInteger(this.codigo_proyecto, dos, oos);

				writeString(this.proyecto, dos, oos);

				writeString(this.metodologia, dos, oos);

				writeString(this.modalidad, dos, oos);

				writeString(this.nivel, dos, oos);

				writeInteger(this.estrato, dos, oos);

				writeString(this.genero, dos, oos);

				writeString(this.codigo_departamento, dos, oos);

				writeString(this.departamento, dos, oos);

				writeString(this.codigo_municipio, dos, oos);

				writeString(this.municipio, dos, oos);

				if (this.documento == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.documento);
				}

				writeString(this.nombre, dos, oos);

				writeInteger(this.codigo_localidad, dos, oos);

				writeString(this.localidad, dos, oos);

				writeString(this.tipo_colegio, dos, oos);

				writeInteger(this.codigo_localidad_colegio, dos, oos);

				writeString(this.localidad_colegio, dos, oos);

				writeString(this.calendario_colegio, dos, oos);

				if (this.codigo_colegio == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.codigo_colegio);
				}

				writeString(this.colegio, dos, oos);

				writeString(this.municipio_colegio, dos, oos);

				writeString(this.departamento_colegio, dos, oos);

				writeInteger(this.codigo_inscripcion, dos, oos);

				writeString(this.inscripcion, dos, oos);

				if (this.biologia == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.biologia);
				}

				if (this.quimica == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.quimica);
				}

				if (this.fisica == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.fisica);
				}

				if (this.sociales == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.sociales);
				}

				if (this.aptitud_verbal == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.aptitud_verbal);
				}

				if (this.espanol_literatura == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.espanol_literatura);
				}

				if (this.aptitud_matematica == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.aptitud_matematica);
				}

				if (this.condicion_matematica == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.condicion_matematica);
				}

				if (this.filosofia == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.filosofia);
				}

				if (this.historia == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.historia);
				}

				if (this.geografia == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.geografia);
				}

				if (this.idioma == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.idioma);
				}

				if (this.interdiciplinar == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.interdiciplinar);
				}

				writeInteger(this.codiogo_interdiciplinar, dos, oos);

				if (this.puntos_icfes == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.puntos_icfes);
				}

				if (this.puntos_homologados == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.puntos_homologados);
				}

				writeString(this.profundizacion, dos, oos);

				writeString(this.valor_profundizacion, dos, oos);

				writeString(this.profundizacion_dos, dos, oos);

				writeString(this.valor_profundizacion_dos, dos, oos);

				writeString(this.profundizacion_tres, dos, oos);

				writeString(this.valor_profundizacion_tres, dos, oos);

				writeString(this.codigo_estado, dos, oos);

				writeString(this.estado, dos, oos);

				if (this.valor_matricula == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.valor_matricula);
				}

				writeString(this.anno_semestre, dos, oos);

				writeDate(this.fecha_carga, dos, oos);

				writeInteger(this.acuerdo, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",codigo_ies=" + String.valueOf(codigo_ies));
			sb.append(",anno=" + String.valueOf(anno));
			sb.append(",semestre=" + String.valueOf(semestre));
			sb.append(",codigo_facultad=" + String.valueOf(codigo_facultad));
			sb.append(",facultad=" + facultad);
			sb.append(",codigo_proyecto_snies="
					+ String.valueOf(codigo_proyecto_snies));
			sb.append(",proyecto_snies=" + proyecto_snies);
			sb.append(",codigo_proyecto=" + String.valueOf(codigo_proyecto));
			sb.append(",proyecto=" + proyecto);
			sb.append(",metodologia=" + metodologia);
			sb.append(",modalidad=" + modalidad);
			sb.append(",nivel=" + nivel);
			sb.append(",estrato=" + String.valueOf(estrato));
			sb.append(",genero=" + genero);
			sb.append(",codigo_departamento=" + codigo_departamento);
			sb.append(",departamento=" + departamento);
			sb.append(",codigo_municipio=" + codigo_municipio);
			sb.append(",municipio=" + municipio);
			sb.append(",documento=" + String.valueOf(documento));
			sb.append(",nombre=" + nombre);
			sb.append(",codigo_localidad=" + String.valueOf(codigo_localidad));
			sb.append(",localidad=" + localidad);
			sb.append(",tipo_colegio=" + tipo_colegio);
			sb.append(",codigo_localidad_colegio="
					+ String.valueOf(codigo_localidad_colegio));
			sb.append(",localidad_colegio=" + localidad_colegio);
			sb.append(",calendario_colegio=" + calendario_colegio);
			sb.append(",codigo_colegio=" + String.valueOf(codigo_colegio));
			sb.append(",colegio=" + colegio);
			sb.append(",municipio_colegio=" + municipio_colegio);
			sb.append(",departamento_colegio=" + departamento_colegio);
			sb.append(",codigo_inscripcion="
					+ String.valueOf(codigo_inscripcion));
			sb.append(",inscripcion=" + inscripcion);
			sb.append(",biologia=" + String.valueOf(biologia));
			sb.append(",quimica=" + String.valueOf(quimica));
			sb.append(",fisica=" + String.valueOf(fisica));
			sb.append(",sociales=" + String.valueOf(sociales));
			sb.append(",aptitud_verbal=" + String.valueOf(aptitud_verbal));
			sb.append(",espanol_literatura="
					+ String.valueOf(espanol_literatura));
			sb.append(",aptitud_matematica="
					+ String.valueOf(aptitud_matematica));
			sb.append(",condicion_matematica="
					+ String.valueOf(condicion_matematica));
			sb.append(",filosofia=" + String.valueOf(filosofia));
			sb.append(",historia=" + String.valueOf(historia));
			sb.append(",geografia=" + String.valueOf(geografia));
			sb.append(",idioma=" + String.valueOf(idioma));
			sb.append(",interdiciplinar=" + String.valueOf(interdiciplinar));
			sb.append(",codiogo_interdiciplinar="
					+ String.valueOf(codiogo_interdiciplinar));
			sb.append(",puntos_icfes=" + String.valueOf(puntos_icfes));
			sb.append(",puntos_homologados="
					+ String.valueOf(puntos_homologados));
			sb.append(",profundizacion=" + profundizacion);
			sb.append(",valor_profundizacion=" + valor_profundizacion);
			sb.append(",profundizacion_dos=" + profundizacion_dos);
			sb.append(",valor_profundizacion_dos=" + valor_profundizacion_dos);
			sb.append(",profundizacion_tres=" + profundizacion_tres);
			sb.append(",valor_profundizacion_tres=" + valor_profundizacion_tres);
			sb.append(",codigo_estado=" + codigo_estado);
			sb.append(",estado=" + estado);
			sb.append(",codigo_estudiante=" + String.valueOf(codigo_estudiante));
			sb.append(",valor_matricula=" + String.valueOf(valor_matricula));
			sb.append(",anno_semestre=" + anno_semestre);
			sb.append(",fecha_carga=" + String.valueOf(fecha_carga));
			sb.append(",acuerdo=" + String.valueOf(acuerdo));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.codigo_estudiante,
					other.codigo_estudiante);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_2Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row2Struct row2 = new row2Struct();

				/**
				 * [tAdvancedHash_row2 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row2", false);
				start_Hash
						.put("tAdvancedHash_row2", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row2";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row2" + iterateId, 0, 0);

					}
				}

				int tos_count_tAdvancedHash_row2 = 0;

				// connection name:row2
				// source node:tDBInput_2 - inputs:(after_tDBInput_1)
				// outputs:(row2,row2) | target node:tAdvancedHash_row2 -
				// inputs:(row2) outputs:()
				// linked node: tMap_2 - inputs:(row1,row2)
				// outputs:(primiparos_acuerdo)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row2 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row2Struct> getLookup(matchingModeEnum_row2);

				globalMap.put("tHash_Lookup_row2", tHash_Lookup_row2);

				/**
				 * [tAdvancedHash_row2 begin ] stop
				 */

				/**
				 * [tDBInput_2 begin ] start
				 */

				ok_Hash.put("tDBInput_2", false);
				start_Hash.put("tDBInput_2", System.currentTimeMillis());

				currentComponent = "tDBInput_2";

				int tos_count_tDBInput_2 = 0;

				int nb_line_tDBInput_2 = 0;
				java.sql.Connection conn_tDBInput_2 = null;
				String driverClass_tDBInput_2 = "org.postgresql.Driver";
				java.lang.Class.forName(driverClass_tDBInput_2);
				String dbUser_tDBInput_2 = "postgres";

				final String decryptedPassword_tDBInput_2 = routines.system.PasswordEncryptUtil
						.decryptPassword("610243e4ca33e325f4f7aba1746784ea");

				String dbPwd_tDBInput_2 = decryptedPassword_tDBInput_2;

				String url_tDBInput_2 = "jdbc:postgresql://" + "10.20.0.88"
						+ ":" + "5432" + "/" + "DMINDICADORES";

				conn_tDBInput_2 = java.sql.DriverManager.getConnection(
						url_tDBInput_2, dbUser_tDBInput_2, dbPwd_tDBInput_2);

				conn_tDBInput_2.setAutoCommit(false);

				java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2
						.createStatement();

				String dbquery_tDBInput_2 = "select * from primiparos";

				globalMap.put("tDBInput_2_QUERY", dbquery_tDBInput_2);
				java.sql.ResultSet rs_tDBInput_2 = null;

				try {
					rs_tDBInput_2 = stmt_tDBInput_2
							.executeQuery(dbquery_tDBInput_2);
					java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2
							.getMetaData();
					int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2
							.getColumnCount();

					String tmpContent_tDBInput_2 = null;

					while (rs_tDBInput_2.next()) {
						nb_line_tDBInput_2++;

						if (colQtyInRs_tDBInput_2 < 1) {
							row2.id = 0;
						} else {

							if (rs_tDBInput_2.getObject(1) != null) {
								row2.id = rs_tDBInput_2.getInt(1);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 2) {
							row2.codigo_ies = null;
						} else {

							if (rs_tDBInput_2.getObject(2) != null) {
								row2.codigo_ies = rs_tDBInput_2.getInt(2);
							} else {
								row2.codigo_ies = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 3) {
							row2.anno = null;
						} else {

							if (rs_tDBInput_2.getObject(3) != null) {
								row2.anno = rs_tDBInput_2.getInt(3);
							} else {
								row2.anno = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 4) {
							row2.semestre = null;
						} else {

							if (rs_tDBInput_2.getObject(4) != null) {
								row2.semestre = rs_tDBInput_2.getInt(4);
							} else {
								row2.semestre = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 5) {
							row2.codigo_facultad = null;
						} else {

							if (rs_tDBInput_2.getObject(5) != null) {
								row2.codigo_facultad = rs_tDBInput_2.getInt(5);
							} else {
								row2.codigo_facultad = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 6) {
							row2.facultad = null;
						} else {

							row2.facultad = routines.system.JDBCUtil.getString(
									rs_tDBInput_2, 6, false);
						}
						if (colQtyInRs_tDBInput_2 < 7) {
							row2.codigo_proyecto_snies = null;
						} else {

							if (rs_tDBInput_2.getObject(7) != null) {
								row2.codigo_proyecto_snies = rs_tDBInput_2
										.getInt(7);
							} else {
								row2.codigo_proyecto_snies = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 8) {
							row2.proyecto_snies = null;
						} else {

							row2.proyecto_snies = routines.system.JDBCUtil
									.getString(rs_tDBInput_2, 8, false);
						}
						if (colQtyInRs_tDBInput_2 < 9) {
							row2.codigo_proyecto = null;
						} else {

							if (rs_tDBInput_2.getObject(9) != null) {
								row2.codigo_proyecto = rs_tDBInput_2.getInt(9);
							} else {
								row2.codigo_proyecto = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 10) {
							row2.proyecto = null;
						} else {

							row2.proyecto = routines.system.JDBCUtil.getString(
									rs_tDBInput_2, 10, false);
						}
						if (colQtyInRs_tDBInput_2 < 11) {
							row2.metodologia = null;
						} else {

							row2.metodologia = routines.system.JDBCUtil
									.getString(rs_tDBInput_2, 11, false);
						}
						if (colQtyInRs_tDBInput_2 < 12) {
							row2.modalidad = null;
						} else {

							row2.modalidad = routines.system.JDBCUtil
									.getString(rs_tDBInput_2, 12, false);
						}
						if (colQtyInRs_tDBInput_2 < 13) {
							row2.nivel = null;
						} else {

							row2.nivel = routines.system.JDBCUtil.getString(
									rs_tDBInput_2, 13, false);
						}
						if (colQtyInRs_tDBInput_2 < 14) {
							row2.estrato = null;
						} else {

							if (rs_tDBInput_2.getObject(14) != null) {
								row2.estrato = rs_tDBInput_2.getInt(14);
							} else {
								row2.estrato = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 15) {
							row2.genero = null;
						} else {

							row2.genero = routines.system.JDBCUtil.getString(
									rs_tDBInput_2, 15, false);
						}
						if (colQtyInRs_tDBInput_2 < 16) {
							row2.codigo_departamento = null;
						} else {

							row2.codigo_departamento = routines.system.JDBCUtil
									.getString(rs_tDBInput_2, 16, false);
						}
						if (colQtyInRs_tDBInput_2 < 17) {
							row2.departamento = null;
						} else {

							row2.departamento = routines.system.JDBCUtil
									.getString(rs_tDBInput_2, 17, false);
						}
						if (colQtyInRs_tDBInput_2 < 18) {
							row2.codigo_municipio = null;
						} else {

							row2.codigo_municipio = routines.system.JDBCUtil
									.getString(rs_tDBInput_2, 18, false);
						}
						if (colQtyInRs_tDBInput_2 < 19) {
							row2.municipio = null;
						} else {

							row2.municipio = routines.system.JDBCUtil
									.getString(rs_tDBInput_2, 19, false);
						}
						if (colQtyInRs_tDBInput_2 < 20) {
							row2.documento = null;
						} else {

							if (rs_tDBInput_2.getObject(20) != null) {
								row2.documento = rs_tDBInput_2.getLong(20);
							} else {
								row2.documento = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 21) {
							row2.nombre = null;
						} else {

							row2.nombre = routines.system.JDBCUtil.getString(
									rs_tDBInput_2, 21, false);
						}
						if (colQtyInRs_tDBInput_2 < 22) {
							row2.codigo_localidad = null;
						} else {

							if (rs_tDBInput_2.getObject(22) != null) {
								row2.codigo_localidad = rs_tDBInput_2
										.getInt(22);
							} else {
								row2.codigo_localidad = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 23) {
							row2.localidad = null;
						} else {

							row2.localidad = routines.system.JDBCUtil
									.getString(rs_tDBInput_2, 23, false);
						}
						if (colQtyInRs_tDBInput_2 < 24) {
							row2.tipo_colegio = null;
						} else {

							row2.tipo_colegio = routines.system.JDBCUtil
									.getString(rs_tDBInput_2, 24, false);
						}
						if (colQtyInRs_tDBInput_2 < 25) {
							row2.codigo_localidad_colegio = null;
						} else {

							if (rs_tDBInput_2.getObject(25) != null) {
								row2.codigo_localidad_colegio = rs_tDBInput_2
										.getInt(25);
							} else {
								row2.codigo_localidad_colegio = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 26) {
							row2.localidad_colegio = null;
						} else {

							row2.localidad_colegio = routines.system.JDBCUtil
									.getString(rs_tDBInput_2, 26, false);
						}
						if (colQtyInRs_tDBInput_2 < 27) {
							row2.calendario_colegio = null;
						} else {

							row2.calendario_colegio = routines.system.JDBCUtil
									.getString(rs_tDBInput_2, 27, false);
						}
						if (colQtyInRs_tDBInput_2 < 28) {
							row2.codigo_colegio = null;
						} else {

							if (rs_tDBInput_2.getObject(28) != null) {
								row2.codigo_colegio = rs_tDBInput_2.getLong(28);
							} else {
								row2.codigo_colegio = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 29) {
							row2.colegio = null;
						} else {

							row2.colegio = routines.system.JDBCUtil.getString(
									rs_tDBInput_2, 29, false);
						}
						if (colQtyInRs_tDBInput_2 < 30) {
							row2.municipio_colegio = null;
						} else {

							row2.municipio_colegio = routines.system.JDBCUtil
									.getString(rs_tDBInput_2, 30, false);
						}
						if (colQtyInRs_tDBInput_2 < 31) {
							row2.departamento_colegio = null;
						} else {

							row2.departamento_colegio = routines.system.JDBCUtil
									.getString(rs_tDBInput_2, 31, false);
						}
						if (colQtyInRs_tDBInput_2 < 32) {
							row2.codigo_inscripcion = null;
						} else {

							if (rs_tDBInput_2.getObject(32) != null) {
								row2.codigo_inscripcion = rs_tDBInput_2
										.getInt(32);
							} else {
								row2.codigo_inscripcion = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 33) {
							row2.inscripcion = null;
						} else {

							row2.inscripcion = routines.system.JDBCUtil
									.getString(rs_tDBInput_2, 33, false);
						}
						if (colQtyInRs_tDBInput_2 < 34) {
							row2.biologia = null;
						} else {

							if (rs_tDBInput_2.getObject(34) != null) {
								row2.biologia = rs_tDBInput_2.getDouble(34);
							} else {
								row2.biologia = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 35) {
							row2.quimica = null;
						} else {

							if (rs_tDBInput_2.getObject(35) != null) {
								row2.quimica = rs_tDBInput_2.getDouble(35);
							} else {
								row2.quimica = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 36) {
							row2.fisica = null;
						} else {

							if (rs_tDBInput_2.getObject(36) != null) {
								row2.fisica = rs_tDBInput_2.getDouble(36);
							} else {
								row2.fisica = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 37) {
							row2.sociales = null;
						} else {

							if (rs_tDBInput_2.getObject(37) != null) {
								row2.sociales = rs_tDBInput_2.getDouble(37);
							} else {
								row2.sociales = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 38) {
							row2.aptitud_verbal = null;
						} else {

							if (rs_tDBInput_2.getObject(38) != null) {
								row2.aptitud_verbal = rs_tDBInput_2
										.getDouble(38);
							} else {
								row2.aptitud_verbal = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 39) {
							row2.espanol_literatura = null;
						} else {

							if (rs_tDBInput_2.getObject(39) != null) {
								row2.espanol_literatura = rs_tDBInput_2
										.getDouble(39);
							} else {
								row2.espanol_literatura = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 40) {
							row2.aptitud_matematica = null;
						} else {

							if (rs_tDBInput_2.getObject(40) != null) {
								row2.aptitud_matematica = rs_tDBInput_2
										.getDouble(40);
							} else {
								row2.aptitud_matematica = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 41) {
							row2.condicion_matematica = null;
						} else {

							if (rs_tDBInput_2.getObject(41) != null) {
								row2.condicion_matematica = rs_tDBInput_2
										.getDouble(41);
							} else {
								row2.condicion_matematica = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 42) {
							row2.filosofia = null;
						} else {

							if (rs_tDBInput_2.getObject(42) != null) {
								row2.filosofia = rs_tDBInput_2.getDouble(42);
							} else {
								row2.filosofia = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 43) {
							row2.historia = null;
						} else {

							if (rs_tDBInput_2.getObject(43) != null) {
								row2.historia = rs_tDBInput_2.getDouble(43);
							} else {
								row2.historia = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 44) {
							row2.geografia = null;
						} else {

							if (rs_tDBInput_2.getObject(44) != null) {
								row2.geografia = rs_tDBInput_2.getDouble(44);
							} else {
								row2.geografia = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 45) {
							row2.idioma = null;
						} else {

							if (rs_tDBInput_2.getObject(45) != null) {
								row2.idioma = rs_tDBInput_2.getDouble(45);
							} else {
								row2.idioma = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 46) {
							row2.interdiciplinar = null;
						} else {

							if (rs_tDBInput_2.getObject(46) != null) {
								row2.interdiciplinar = rs_tDBInput_2
										.getDouble(46);
							} else {
								row2.interdiciplinar = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 47) {
							row2.codiogo_interdiciplinar = null;
						} else {

							if (rs_tDBInput_2.getObject(47) != null) {
								row2.codiogo_interdiciplinar = rs_tDBInput_2
										.getInt(47);
							} else {
								row2.codiogo_interdiciplinar = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 48) {
							row2.puntos_icfes = null;
						} else {

							if (rs_tDBInput_2.getObject(48) != null) {
								row2.puntos_icfes = rs_tDBInput_2.getDouble(48);
							} else {
								row2.puntos_icfes = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 49) {
							row2.puntos_homologados = null;
						} else {

							if (rs_tDBInput_2.getObject(49) != null) {
								row2.puntos_homologados = rs_tDBInput_2
										.getDouble(49);
							} else {
								row2.puntos_homologados = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 50) {
							row2.profundizacion = null;
						} else {

							row2.profundizacion = routines.system.JDBCUtil
									.getString(rs_tDBInput_2, 50, false);
						}
						if (colQtyInRs_tDBInput_2 < 51) {
							row2.valor_profundizacion = null;
						} else {

							row2.valor_profundizacion = routines.system.JDBCUtil
									.getString(rs_tDBInput_2, 51, false);
						}
						if (colQtyInRs_tDBInput_2 < 52) {
							row2.profundizacion_dos = null;
						} else {

							row2.profundizacion_dos = routines.system.JDBCUtil
									.getString(rs_tDBInput_2, 52, false);
						}
						if (colQtyInRs_tDBInput_2 < 53) {
							row2.valor_profundizacion_dos = null;
						} else {

							row2.valor_profundizacion_dos = routines.system.JDBCUtil
									.getString(rs_tDBInput_2, 53, false);
						}
						if (colQtyInRs_tDBInput_2 < 54) {
							row2.profundizacion_tres = null;
						} else {

							row2.profundizacion_tres = routines.system.JDBCUtil
									.getString(rs_tDBInput_2, 54, false);
						}
						if (colQtyInRs_tDBInput_2 < 55) {
							row2.valor_profundizacion_tres = null;
						} else {

							row2.valor_profundizacion_tres = routines.system.JDBCUtil
									.getString(rs_tDBInput_2, 55, false);
						}
						if (colQtyInRs_tDBInput_2 < 56) {
							row2.codigo_estado = null;
						} else {

							row2.codigo_estado = routines.system.JDBCUtil
									.getString(rs_tDBInput_2, 56, false);
						}
						if (colQtyInRs_tDBInput_2 < 57) {
							row2.estado = null;
						} else {

							row2.estado = routines.system.JDBCUtil.getString(
									rs_tDBInput_2, 57, false);
						}
						if (colQtyInRs_tDBInput_2 < 58) {
							row2.codigo_estudiante = null;
						} else {

							if (rs_tDBInput_2.getObject(58) != null) {
								row2.codigo_estudiante = rs_tDBInput_2
										.getLong(58);
							} else {
								row2.codigo_estudiante = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 59) {
							row2.valor_matricula = null;
						} else {

							if (rs_tDBInput_2.getObject(59) != null) {
								row2.valor_matricula = rs_tDBInput_2
										.getDouble(59);
							} else {
								row2.valor_matricula = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 60) {
							row2.anno_semestre = null;
						} else {

							row2.anno_semestre = routines.system.JDBCUtil
									.getString(rs_tDBInput_2, 60, false);
						}
						if (colQtyInRs_tDBInput_2 < 61) {
							row2.fecha_carga = null;
						} else {

							row2.fecha_carga = routines.system.JDBCUtil
									.getDate(rs_tDBInput_2, 61);
						}
						if (colQtyInRs_tDBInput_2 < 62) {
							row2.acuerdo = null;
						} else {

							if (rs_tDBInput_2.getObject(62) != null) {
								row2.acuerdo = rs_tDBInput_2.getInt(62);
							} else {
								row2.acuerdo = null;
							}
						}

						/**
						 * [tDBInput_2 begin ] stop
						 */

						/**
						 * [tDBInput_2 main ] start
						 */

						currentComponent = "tDBInput_2";

						tos_count_tDBInput_2++;

						/**
						 * [tDBInput_2 main ] stop
						 */

						/**
						 * [tDBInput_2 process_data_begin ] start
						 */

						currentComponent = "tDBInput_2";

						/**
						 * [tDBInput_2 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row2 main ] start
						 */

						currentComponent = "tAdvancedHash_row2";

						// row2
						// row2

						if (execStat) {
							runStat.updateStatOnConnection("row2" + iterateId,
									1, 1);
						}

						row2Struct row2_HashRow = new row2Struct();

						row2_HashRow.id = row2.id;

						row2_HashRow.codigo_ies = row2.codigo_ies;

						row2_HashRow.anno = row2.anno;

						row2_HashRow.semestre = row2.semestre;

						row2_HashRow.codigo_facultad = row2.codigo_facultad;

						row2_HashRow.facultad = row2.facultad;

						row2_HashRow.codigo_proyecto_snies = row2.codigo_proyecto_snies;

						row2_HashRow.proyecto_snies = row2.proyecto_snies;

						row2_HashRow.codigo_proyecto = row2.codigo_proyecto;

						row2_HashRow.proyecto = row2.proyecto;

						row2_HashRow.metodologia = row2.metodologia;

						row2_HashRow.modalidad = row2.modalidad;

						row2_HashRow.nivel = row2.nivel;

						row2_HashRow.estrato = row2.estrato;

						row2_HashRow.genero = row2.genero;

						row2_HashRow.codigo_departamento = row2.codigo_departamento;

						row2_HashRow.departamento = row2.departamento;

						row2_HashRow.codigo_municipio = row2.codigo_municipio;

						row2_HashRow.municipio = row2.municipio;

						row2_HashRow.documento = row2.documento;

						row2_HashRow.nombre = row2.nombre;

						row2_HashRow.codigo_localidad = row2.codigo_localidad;

						row2_HashRow.localidad = row2.localidad;

						row2_HashRow.tipo_colegio = row2.tipo_colegio;

						row2_HashRow.codigo_localidad_colegio = row2.codigo_localidad_colegio;

						row2_HashRow.localidad_colegio = row2.localidad_colegio;

						row2_HashRow.calendario_colegio = row2.calendario_colegio;

						row2_HashRow.codigo_colegio = row2.codigo_colegio;

						row2_HashRow.colegio = row2.colegio;

						row2_HashRow.municipio_colegio = row2.municipio_colegio;

						row2_HashRow.departamento_colegio = row2.departamento_colegio;

						row2_HashRow.codigo_inscripcion = row2.codigo_inscripcion;

						row2_HashRow.inscripcion = row2.inscripcion;

						row2_HashRow.biologia = row2.biologia;

						row2_HashRow.quimica = row2.quimica;

						row2_HashRow.fisica = row2.fisica;

						row2_HashRow.sociales = row2.sociales;

						row2_HashRow.aptitud_verbal = row2.aptitud_verbal;

						row2_HashRow.espanol_literatura = row2.espanol_literatura;

						row2_HashRow.aptitud_matematica = row2.aptitud_matematica;

						row2_HashRow.condicion_matematica = row2.condicion_matematica;

						row2_HashRow.filosofia = row2.filosofia;

						row2_HashRow.historia = row2.historia;

						row2_HashRow.geografia = row2.geografia;

						row2_HashRow.idioma = row2.idioma;

						row2_HashRow.interdiciplinar = row2.interdiciplinar;

						row2_HashRow.codiogo_interdiciplinar = row2.codiogo_interdiciplinar;

						row2_HashRow.puntos_icfes = row2.puntos_icfes;

						row2_HashRow.puntos_homologados = row2.puntos_homologados;

						row2_HashRow.profundizacion = row2.profundizacion;

						row2_HashRow.valor_profundizacion = row2.valor_profundizacion;

						row2_HashRow.profundizacion_dos = row2.profundizacion_dos;

						row2_HashRow.valor_profundizacion_dos = row2.valor_profundizacion_dos;

						row2_HashRow.profundizacion_tres = row2.profundizacion_tres;

						row2_HashRow.valor_profundizacion_tres = row2.valor_profundizacion_tres;

						row2_HashRow.codigo_estado = row2.codigo_estado;

						row2_HashRow.estado = row2.estado;

						row2_HashRow.codigo_estudiante = row2.codigo_estudiante;

						row2_HashRow.valor_matricula = row2.valor_matricula;

						row2_HashRow.anno_semestre = row2.anno_semestre;

						row2_HashRow.fecha_carga = row2.fecha_carga;

						row2_HashRow.acuerdo = row2.acuerdo;

						tHash_Lookup_row2.put(row2_HashRow);

						tos_count_tAdvancedHash_row2++;

						/**
						 * [tAdvancedHash_row2 main ] stop
						 */

						/**
						 * [tAdvancedHash_row2 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_row2";

						/**
						 * [tAdvancedHash_row2 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row2 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_row2";

						/**
						 * [tAdvancedHash_row2 process_data_end ] stop
						 */

						/**
						 * [tDBInput_2 process_data_end ] start
						 */

						currentComponent = "tDBInput_2";

						/**
						 * [tDBInput_2 process_data_end ] stop
						 */

						/**
						 * [tDBInput_2 end ] start
						 */

						currentComponent = "tDBInput_2";

					}
				} finally {
					if (rs_tDBInput_2 != null) {
						rs_tDBInput_2.close();
					}
					if (stmt_tDBInput_2 != null) {
						stmt_tDBInput_2.close();
					}
					if (conn_tDBInput_2 != null && !conn_tDBInput_2.isClosed()) {

						conn_tDBInput_2.commit();

						conn_tDBInput_2.close();

					}

				}
				globalMap.put("tDBInput_2_NB_LINE", nb_line_tDBInput_2);

				ok_Hash.put("tDBInput_2", true);
				end_Hash.put("tDBInput_2", System.currentTimeMillis());

				/**
				 * [tDBInput_2 end ] stop
				 */

				/**
				 * [tAdvancedHash_row2 end ] start
				 */

				currentComponent = "tAdvancedHash_row2";

				tHash_Lookup_row2.endPut();

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row2" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tAdvancedHash_row2", true);
				end_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row2 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_2 finally ] start
				 */

				currentComponent = "tDBInput_2";

				/**
				 * [tDBInput_2 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row2 finally ] start
				 */

				currentComponent = "tAdvancedHash_row2";

				/**
				 * [tAdvancedHash_row2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final acuerdo_estudiante acuerdo_estudianteClass = new acuerdo_estudiante();

		int exitCode = acuerdo_estudianteClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket
				// can't open
				System.err.println("The statistics socket port " + portStats
						+ " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = acuerdo_estudiante.class
					.getClassLoader().getResourceAsStream(
							"dmindicadores/acuerdo_estudiante_0_1/contexts/"
									+ contextStr + ".properties");
			if (inContext == null) {
				inContext = acuerdo_estudiante.class
						.getClassLoader()
						.getResourceAsStream(
								"config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				defaultProps.load(inContext);
				inContext.close();
				context = new ContextProperties(defaultProps);
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param
				// is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param
							.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "",
				resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tDBInput_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tDBInput_1) {
			globalMap.put("tDBInput_1_SUBPROCESS_STATE", -1);

			e_tDBInput_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out
					.println((endUsedMemory - startUsedMemory)
							+ " bytes memory increase when running : acuerdo_estudiante");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 177592 characters generated by Talend Open Studio for Data Integration on the
 * 17 de septiembre de 2018 05:25:03 PM COT
 ************************************************************************************************/
