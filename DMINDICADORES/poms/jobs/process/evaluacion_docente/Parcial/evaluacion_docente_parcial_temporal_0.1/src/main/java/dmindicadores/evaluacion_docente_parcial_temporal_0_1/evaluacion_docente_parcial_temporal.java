// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package dmindicadores.evaluacion_docente_parcial_temporal_0_1;

import routines.DataOperation;
import routines.OpenStreetMap;
import routines.TalendDataGenerator;
import routines.Relational;
import routines.Mathematical;
import routines.GeometryUtility;
import routines.Numeric;
import routines.GeoOperation;
import routines.GeometryOperation;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.TalendDate;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

//the import part of tJavaRow_1
//import java.util.List;

@SuppressWarnings("unused")
/**
 * Job: evaluacion_docente_parcial_temporal Purpose: <br>
 * Description:  <br>
 * @author 
 * @version 7.1.1.20180829_1603-M3
 * @status 
 */
public class evaluacion_docente_parcial_temporal implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "evaluacion_docente_parcial_temporal";
	private final String projectName = "DMINDICADORES";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap
				.put(KEY_DB_DATASOURCES_RAW,
						new java.util.HashMap<String, javax.sql.DataSource>(
								dataSources));
	}

	LogCatcherUtils talendLogs_LOGS = new LogCatcherUtils();
	StatCatcherUtils talendStats_STATS = new StatCatcherUtils(
			"_Y0OSQM_lEeOxd4D1mIhMKg", "0.1");
	MetterCatcherUtils talendMeter_METTER = new MetterCatcherUtils(
			"_Y0OSQM_lEeOxd4D1mIhMKg", "0.1");

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent
						+ " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					evaluacion_docente_parcial_temporal.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(evaluacion_docente_parcial_temporal.this,
									new Object[] { e, currentComponent,
											globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
						talendLogs_LOGS.addMessage("Java Exception",
								currentComponent, 6, e.getClass().getName()
										+ ":" + e.getMessage(), 1);
						talendLogs_LOGSProcess(globalMap);
					}
				} catch (TalendException e) {
					// do nothing

				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void preStaLogCon_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		preStaLogCon_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlConnection_3_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlConnection_3_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tPostgresqlConnection_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlConnection_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tPostgresqlConnection_4_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlConnection_4_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tPostgresqlConnection_5_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlConnection_5_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tPostgresqlInput_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlRow_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tOracleConnection_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tOracleConnection_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlInput_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlOutput_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tOracleInput_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlInput_3_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlInput_4_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostjob_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostjob_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tOracleClose_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tOracleClose_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlClose_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlClose_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlClose_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlClose_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlClose_4_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlClose_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlClose_3_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlClose_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row3_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row4_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void connectionStatsLogs_Commit_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		connectionStatsLogs_Commit_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void connectionStatsLogs_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		connectionStatsLogs_onSubJobError(exception, errorComponent, globalMap);
	}

	public void talendStats_STATS_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		talendStats_DB_error(exception, errorComponent, globalMap);

	}

	public void talendStats_DB_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		talendStats_STATS_onSubJobError(exception, errorComponent, globalMap);
	}

	public void talendLogs_LOGS_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		talendLogs_DB_error(exception, errorComponent, globalMap);

	}

	public void talendLogs_DB_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		talendLogs_LOGS_onSubJobError(exception, errorComponent, globalMap);
	}

	public void talendMeter_METTER_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		talendMeter_DB_error(exception, errorComponent, globalMap);

	}

	public void talendMeter_DB_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		talendMeter_METTER_onSubJobError(exception, errorComponent, globalMap);
	}

	public void preStaLogCon_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlConnection_3_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlConnection_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlConnection_4_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlConnection_5_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlInput_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tOracleConnection_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlInput_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tOracleInput_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlInput_3_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlInput_4_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostjob_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tOracleClose_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlClose_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlClose_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlClose_4_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlClose_3_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void connectionStatsLogs_Commit_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void connectionStatsLogs_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void talendStats_STATS_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void talendLogs_LOGS_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void talendMeter_METTER_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void preStaLogConProcess(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("preStaLogCon_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [preStaLogCon begin ] start
				 */

				ok_Hash.put("preStaLogCon", false);
				start_Hash.put("preStaLogCon", System.currentTimeMillis());

				currentComponent = "preStaLogCon";

				int tos_count_preStaLogCon = 0;

				/**
				 * [preStaLogCon begin ] stop
				 */

				/**
				 * [preStaLogCon main ] start
				 */

				currentComponent = "preStaLogCon";

				tos_count_preStaLogCon++;

				/**
				 * [preStaLogCon main ] stop
				 */

				/**
				 * [preStaLogCon process_data_begin ] start
				 */

				currentComponent = "preStaLogCon";

				/**
				 * [preStaLogCon process_data_begin ] stop
				 */

				/**
				 * [preStaLogCon process_data_end ] start
				 */

				currentComponent = "preStaLogCon";

				/**
				 * [preStaLogCon process_data_end ] stop
				 */

				/**
				 * [preStaLogCon end ] start
				 */

				currentComponent = "preStaLogCon";

				ok_Hash.put("preStaLogCon", true);
				end_Hash.put("preStaLogCon", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection(
							"after_preStaLogCon_connectionStatsLogs", 0, "ok");
				}
				connectionStatsLogsProcess(globalMap);

				/**
				 * [preStaLogCon end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [preStaLogCon finally ] start
				 */

				currentComponent = "preStaLogCon";

				/**
				 * [preStaLogCon finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("preStaLogCon_SUBPROCESS_STATE", 1);
	}

	public void tPostgresqlConnection_3Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlConnection_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tPostgresqlConnection_3 begin ] start
				 */

				ok_Hash.put("tPostgresqlConnection_3", false);
				start_Hash.put("tPostgresqlConnection_3",
						System.currentTimeMillis());

				currentComponent = "tPostgresqlConnection_3";

				int tos_count_tPostgresqlConnection_3 = 0;

				String url_tPostgresqlConnection_3 = "jdbc:postgresql://"
						+ "10.20.0.88" + ":" + "5432" + "/"
						+ "CO_UDISTRITAL_MDM";

				String dbUser_tPostgresqlConnection_3 = "postgres";

				final String decryptedPassword_tPostgresqlConnection_3 = routines.system.PasswordEncryptUtil
						.decryptPassword("610243e4ca33e325f4f7aba1746784ea");
				String dbPwd_tPostgresqlConnection_3 = decryptedPassword_tPostgresqlConnection_3;

				java.sql.Connection conn_tPostgresqlConnection_3 = null;

				java.util.Enumeration<java.sql.Driver> drivers_tPostgresqlConnection_3 = java.sql.DriverManager
						.getDrivers();
				while (drivers_tPostgresqlConnection_3.hasMoreElements()) {
					java.sql.Driver d_tPostgresqlConnection_3 = drivers_tPostgresqlConnection_3
							.nextElement();
					java.util.List<String> driverList_tPostgresqlConnection_3 = java.util.Arrays
							.<String> asList("com.amazon.redshift.jdbc.Driver",
									"com.amazon.redshift.jdbc41.Driver");
					if (driverList_tPostgresqlConnection_3
							.contains(d_tPostgresqlConnection_3.getClass()
									.getName())) {
						try {
							java.sql.DriverManager
									.deregisterDriver(d_tPostgresqlConnection_3);
							java.sql.DriverManager
									.registerDriver(d_tPostgresqlConnection_3);
						} catch (java.lang.Exception e_tPostgresqlConnection_3) {
							// do nothing
						}
					}
				}
				String driverClass_tPostgresqlConnection_3 = "org.postgresql.Driver";
				java.lang.Class.forName(driverClass_tPostgresqlConnection_3);

				conn_tPostgresqlConnection_3 = java.sql.DriverManager
						.getConnection(url_tPostgresqlConnection_3,
								dbUser_tPostgresqlConnection_3,
								dbPwd_tPostgresqlConnection_3);

				globalMap.put("conn_tPostgresqlConnection_3",
						conn_tPostgresqlConnection_3);
				if (null != conn_tPostgresqlConnection_3) {

					conn_tPostgresqlConnection_3.setAutoCommit(true);
				}

				globalMap.put("schema_" + "tPostgresqlConnection_3",
						"CO_UDISTRITAL_MDM");

				globalMap.put("conn_" + "tPostgresqlConnection_3",
						conn_tPostgresqlConnection_3);

				/**
				 * [tPostgresqlConnection_3 begin ] stop
				 */

				/**
				 * [tPostgresqlConnection_3 main ] start
				 */

				currentComponent = "tPostgresqlConnection_3";

				tos_count_tPostgresqlConnection_3++;

				/**
				 * [tPostgresqlConnection_3 main ] stop
				 */

				/**
				 * [tPostgresqlConnection_3 process_data_begin ] start
				 */

				currentComponent = "tPostgresqlConnection_3";

				/**
				 * [tPostgresqlConnection_3 process_data_begin ] stop
				 */

				/**
				 * [tPostgresqlConnection_3 process_data_end ] start
				 */

				currentComponent = "tPostgresqlConnection_3";

				/**
				 * [tPostgresqlConnection_3 process_data_end ] stop
				 */

				/**
				 * [tPostgresqlConnection_3 end ] start
				 */

				currentComponent = "tPostgresqlConnection_3";

				ok_Hash.put("tPostgresqlConnection_3", true);
				end_Hash.put("tPostgresqlConnection_3",
						System.currentTimeMillis());

				/**
				 * [tPostgresqlConnection_3 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tPostgresqlConnection_3:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk2", 0, "ok");
			}

			tPostgresqlConnection_2Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tPostgresqlConnection_3 finally ] start
				 */

				currentComponent = "tPostgresqlConnection_3";

				/**
				 * [tPostgresqlConnection_3 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostgresqlConnection_3_SUBPROCESS_STATE", 1);
	}

	public void tPostgresqlConnection_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlConnection_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tPostgresqlConnection_2 begin ] start
				 */

				ok_Hash.put("tPostgresqlConnection_2", false);
				start_Hash.put("tPostgresqlConnection_2",
						System.currentTimeMillis());

				currentComponent = "tPostgresqlConnection_2";

				int tos_count_tPostgresqlConnection_2 = 0;

				String url_tPostgresqlConnection_2 = "jdbc:postgresql://"
						+ "10.20.0.88" + ":" + "5432" + "/" + "DMINDICADORES";

				String dbUser_tPostgresqlConnection_2 = "postgres";

				final String decryptedPassword_tPostgresqlConnection_2 = routines.system.PasswordEncryptUtil
						.decryptPassword("610243e4ca33e325f4f7aba1746784ea");
				String dbPwd_tPostgresqlConnection_2 = decryptedPassword_tPostgresqlConnection_2;

				java.sql.Connection conn_tPostgresqlConnection_2 = null;

				java.util.Enumeration<java.sql.Driver> drivers_tPostgresqlConnection_2 = java.sql.DriverManager
						.getDrivers();
				while (drivers_tPostgresqlConnection_2.hasMoreElements()) {
					java.sql.Driver d_tPostgresqlConnection_2 = drivers_tPostgresqlConnection_2
							.nextElement();
					java.util.List<String> driverList_tPostgresqlConnection_2 = java.util.Arrays
							.<String> asList("com.amazon.redshift.jdbc.Driver",
									"com.amazon.redshift.jdbc41.Driver");
					if (driverList_tPostgresqlConnection_2
							.contains(d_tPostgresqlConnection_2.getClass()
									.getName())) {
						try {
							java.sql.DriverManager
									.deregisterDriver(d_tPostgresqlConnection_2);
							java.sql.DriverManager
									.registerDriver(d_tPostgresqlConnection_2);
						} catch (java.lang.Exception e_tPostgresqlConnection_2) {
							// do nothing
						}
					}
				}
				String driverClass_tPostgresqlConnection_2 = "org.postgresql.Driver";
				java.lang.Class.forName(driverClass_tPostgresqlConnection_2);

				conn_tPostgresqlConnection_2 = java.sql.DriverManager
						.getConnection(url_tPostgresqlConnection_2,
								dbUser_tPostgresqlConnection_2,
								dbPwd_tPostgresqlConnection_2);

				globalMap.put("conn_tPostgresqlConnection_2",
						conn_tPostgresqlConnection_2);
				if (null != conn_tPostgresqlConnection_2) {

					conn_tPostgresqlConnection_2.setAutoCommit(true);
				}

				globalMap.put("schema_" + "tPostgresqlConnection_2", "public");

				globalMap.put("conn_" + "tPostgresqlConnection_2",
						conn_tPostgresqlConnection_2);

				/**
				 * [tPostgresqlConnection_2 begin ] stop
				 */

				/**
				 * [tPostgresqlConnection_2 main ] start
				 */

				currentComponent = "tPostgresqlConnection_2";

				tos_count_tPostgresqlConnection_2++;

				/**
				 * [tPostgresqlConnection_2 main ] stop
				 */

				/**
				 * [tPostgresqlConnection_2 process_data_begin ] start
				 */

				currentComponent = "tPostgresqlConnection_2";

				/**
				 * [tPostgresqlConnection_2 process_data_begin ] stop
				 */

				/**
				 * [tPostgresqlConnection_2 process_data_end ] start
				 */

				currentComponent = "tPostgresqlConnection_2";

				/**
				 * [tPostgresqlConnection_2 process_data_end ] stop
				 */

				/**
				 * [tPostgresqlConnection_2 end ] start
				 */

				currentComponent = "tPostgresqlConnection_2";

				ok_Hash.put("tPostgresqlConnection_2", true);
				end_Hash.put("tPostgresqlConnection_2",
						System.currentTimeMillis());

				/**
				 * [tPostgresqlConnection_2 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tPostgresqlConnection_2:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk4", 0, "ok");
			}

			tPostgresqlConnection_4Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tPostgresqlConnection_2 finally ] start
				 */

				currentComponent = "tPostgresqlConnection_2";

				/**
				 * [tPostgresqlConnection_2 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostgresqlConnection_2_SUBPROCESS_STATE", 1);
	}

	public void tPostgresqlConnection_4Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlConnection_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tPostgresqlConnection_4 begin ] start
				 */

				ok_Hash.put("tPostgresqlConnection_4", false);
				start_Hash.put("tPostgresqlConnection_4",
						System.currentTimeMillis());

				currentComponent = "tPostgresqlConnection_4";

				int tos_count_tPostgresqlConnection_4 = 0;

				String url_tPostgresqlConnection_4 = "jdbc:postgresql://"
						+ "10.20.0.88" + ":" + "5432" + "/"
						+ "CO_UDISTRITAL_TEMPORAL";

				String dbUser_tPostgresqlConnection_4 = "postgres";

				final String decryptedPassword_tPostgresqlConnection_4 = routines.system.PasswordEncryptUtil
						.decryptPassword("20c25fc55946d961a1ae663ef9965a0f4612aec36e0d50aa");
				String dbPwd_tPostgresqlConnection_4 = decryptedPassword_tPostgresqlConnection_4;

				java.sql.Connection conn_tPostgresqlConnection_4 = null;

				java.util.Enumeration<java.sql.Driver> drivers_tPostgresqlConnection_4 = java.sql.DriverManager
						.getDrivers();
				while (drivers_tPostgresqlConnection_4.hasMoreElements()) {
					java.sql.Driver d_tPostgresqlConnection_4 = drivers_tPostgresqlConnection_4
							.nextElement();
					java.util.List<String> driverList_tPostgresqlConnection_4 = java.util.Arrays
							.<String> asList("com.amazon.redshift.jdbc.Driver",
									"com.amazon.redshift.jdbc41.Driver");
					if (driverList_tPostgresqlConnection_4
							.contains(d_tPostgresqlConnection_4.getClass()
									.getName())) {
						try {
							java.sql.DriverManager
									.deregisterDriver(d_tPostgresqlConnection_4);
							java.sql.DriverManager
									.registerDriver(d_tPostgresqlConnection_4);
						} catch (java.lang.Exception e_tPostgresqlConnection_4) {
							// do nothing
						}
					}
				}
				String driverClass_tPostgresqlConnection_4 = "org.postgresql.Driver";
				java.lang.Class.forName(driverClass_tPostgresqlConnection_4);

				conn_tPostgresqlConnection_4 = java.sql.DriverManager
						.getConnection(url_tPostgresqlConnection_4,
								dbUser_tPostgresqlConnection_4,
								dbPwd_tPostgresqlConnection_4);

				globalMap.put("conn_tPostgresqlConnection_4",
						conn_tPostgresqlConnection_4);
				if (null != conn_tPostgresqlConnection_4) {

					conn_tPostgresqlConnection_4.setAutoCommit(true);
				}

				globalMap.put("schema_" + "tPostgresqlConnection_4",
						"CO_UDISTRITAL_TEMPORAL");

				globalMap.put("conn_" + "tPostgresqlConnection_4",
						conn_tPostgresqlConnection_4);

				/**
				 * [tPostgresqlConnection_4 begin ] stop
				 */

				/**
				 * [tPostgresqlConnection_4 main ] start
				 */

				currentComponent = "tPostgresqlConnection_4";

				tos_count_tPostgresqlConnection_4++;

				/**
				 * [tPostgresqlConnection_4 main ] stop
				 */

				/**
				 * [tPostgresqlConnection_4 process_data_begin ] start
				 */

				currentComponent = "tPostgresqlConnection_4";

				/**
				 * [tPostgresqlConnection_4 process_data_begin ] stop
				 */

				/**
				 * [tPostgresqlConnection_4 process_data_end ] start
				 */

				currentComponent = "tPostgresqlConnection_4";

				/**
				 * [tPostgresqlConnection_4 process_data_end ] stop
				 */

				/**
				 * [tPostgresqlConnection_4 end ] start
				 */

				currentComponent = "tPostgresqlConnection_4";

				ok_Hash.put("tPostgresqlConnection_4", true);
				end_Hash.put("tPostgresqlConnection_4",
						System.currentTimeMillis());

				/**
				 * [tPostgresqlConnection_4 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tPostgresqlConnection_4:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk6", 0, "ok");
			}

			tPostgresqlConnection_5Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tPostgresqlConnection_4 finally ] start
				 */

				currentComponent = "tPostgresqlConnection_4";

				/**
				 * [tPostgresqlConnection_4 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostgresqlConnection_4_SUBPROCESS_STATE", 1);
	}

	public void tPostgresqlConnection_5Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlConnection_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tPostgresqlConnection_5 begin ] start
				 */

				ok_Hash.put("tPostgresqlConnection_5", false);
				start_Hash.put("tPostgresqlConnection_5",
						System.currentTimeMillis());

				currentComponent = "tPostgresqlConnection_5";

				int tos_count_tPostgresqlConnection_5 = 0;

				String url_tPostgresqlConnection_5 = "jdbc:postgresql://"
						+ "postgresproduccion.c8an9arwoaua.us-east-1.rds.amazonaws.com"
						+ ":" + "5432" + "/" + "saraacademica";

				String dbUser_tPostgresqlConnection_5 = "consultaevaldocente";

				final String decryptedPassword_tPostgresqlConnection_5 = routines.system.PasswordEncryptUtil
						.decryptPassword("9629c423cea0e7eab33805d8d318a9af0e323c535663df22");
				String dbPwd_tPostgresqlConnection_5 = decryptedPassword_tPostgresqlConnection_5;

				java.sql.Connection conn_tPostgresqlConnection_5 = null;

				java.util.Enumeration<java.sql.Driver> drivers_tPostgresqlConnection_5 = java.sql.DriverManager
						.getDrivers();
				while (drivers_tPostgresqlConnection_5.hasMoreElements()) {
					java.sql.Driver d_tPostgresqlConnection_5 = drivers_tPostgresqlConnection_5
							.nextElement();
					java.util.List<String> driverList_tPostgresqlConnection_5 = java.util.Arrays
							.<String> asList("com.amazon.redshift.jdbc.Driver",
									"com.amazon.redshift.jdbc41.Driver");
					if (driverList_tPostgresqlConnection_5
							.contains(d_tPostgresqlConnection_5.getClass()
									.getName())) {
						try {
							java.sql.DriverManager
									.deregisterDriver(d_tPostgresqlConnection_5);
							java.sql.DriverManager
									.registerDriver(d_tPostgresqlConnection_5);
						} catch (java.lang.Exception e_tPostgresqlConnection_5) {
							// do nothing
						}
					}
				}
				String driverClass_tPostgresqlConnection_5 = "org.postgresql.Driver";
				java.lang.Class.forName(driverClass_tPostgresqlConnection_5);

				conn_tPostgresqlConnection_5 = java.sql.DriverManager
						.getConnection(url_tPostgresqlConnection_5,
								dbUser_tPostgresqlConnection_5,
								dbPwd_tPostgresqlConnection_5);

				globalMap.put("conn_tPostgresqlConnection_5",
						conn_tPostgresqlConnection_5);
				if (null != conn_tPostgresqlConnection_5) {

					conn_tPostgresqlConnection_5.setAutoCommit(true);
				}

				globalMap.put("schema_" + "tPostgresqlConnection_5", "");

				globalMap.put("conn_" + "tPostgresqlConnection_5",
						conn_tPostgresqlConnection_5);

				/**
				 * [tPostgresqlConnection_5 begin ] stop
				 */

				/**
				 * [tPostgresqlConnection_5 main ] start
				 */

				currentComponent = "tPostgresqlConnection_5";

				tos_count_tPostgresqlConnection_5++;

				/**
				 * [tPostgresqlConnection_5 main ] stop
				 */

				/**
				 * [tPostgresqlConnection_5 process_data_begin ] start
				 */

				currentComponent = "tPostgresqlConnection_5";

				/**
				 * [tPostgresqlConnection_5 process_data_begin ] stop
				 */

				/**
				 * [tPostgresqlConnection_5 process_data_end ] start
				 */

				currentComponent = "tPostgresqlConnection_5";

				/**
				 * [tPostgresqlConnection_5 process_data_end ] stop
				 */

				/**
				 * [tPostgresqlConnection_5 end ] start
				 */

				currentComponent = "tPostgresqlConnection_5";

				ok_Hash.put("tPostgresqlConnection_5", true);
				end_Hash.put("tPostgresqlConnection_5",
						System.currentTimeMillis());

				/**
				 * [tPostgresqlConnection_5 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tPostgresqlConnection_5:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk8", 0, "ok");
			}

			tPostgresqlInput_2Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tPostgresqlConnection_5 finally ] start
				 */

				currentComponent = "tPostgresqlConnection_5";

				/**
				 * [tPostgresqlConnection_5 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostgresqlConnection_5_SUBPROCESS_STATE", 1);
	}

	public static class row6Struct implements
			routines.system.IPersistableRow<row6Struct> {
		final static byte[] commonByteArrayLock_DMINDICADORES_evaluacion_docente_parcial_temporal = new byte[0];
		static byte[] commonByteArray_DMINDICADORES_evaluacion_docente_parcial_temporal = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int codigo_facultad;

		public int getCodigo_facultad() {
			return this.codigo_facultad;
		}

		public String facultad;

		public String getFacultad() {
			return this.facultad;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.codigo_facultad;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row6Struct other = (row6Struct) obj;

			if (this.codigo_facultad != other.codigo_facultad)
				return false;

			return true;
		}

		public void copyDataTo(row6Struct other) {

			other.codigo_facultad = this.codigo_facultad;
			other.facultad = this.facultad;

		}

		public void copyKeysDataTo(row6Struct other) {

			other.codigo_facultad = this.codigo_facultad;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DMINDICADORES_evaluacion_docente_parcial_temporal.length) {
					if (length < 1024
							&& commonByteArray_DMINDICADORES_evaluacion_docente_parcial_temporal.length == 0) {
						commonByteArray_DMINDICADORES_evaluacion_docente_parcial_temporal = new byte[1024];
					} else {
						commonByteArray_DMINDICADORES_evaluacion_docente_parcial_temporal = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_DMINDICADORES_evaluacion_docente_parcial_temporal,
						0, length);
				strReturn = new String(
						commonByteArray_DMINDICADORES_evaluacion_docente_parcial_temporal,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DMINDICADORES_evaluacion_docente_parcial_temporal) {

				try {

					int length = 0;

					this.codigo_facultad = dis.readInt();

					this.facultad = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.codigo_facultad);

				// String

				writeString(this.facultad, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("codigo_facultad=" + String.valueOf(codigo_facultad));
			sb.append(",facultad=" + facultad);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.codigo_facultad,
					other.codigo_facultad);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row7Struct implements
			routines.system.IPersistableRow<row7Struct> {
		final static byte[] commonByteArrayLock_DMINDICADORES_evaluacion_docente_parcial_temporal = new byte[0];
		static byte[] commonByteArray_DMINDICADORES_evaluacion_docente_parcial_temporal = new byte[0];

		public int id_anno;

		public int getId_anno() {
			return this.id_anno;
		}

		public int id_semestre;

		public int getId_semestre() {
			return this.id_semestre;
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DMINDICADORES_evaluacion_docente_parcial_temporal) {

				try {

					int length = 0;

					this.id_anno = dis.readInt();

					this.id_semestre = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id_anno);

				// int

				dos.writeInt(this.id_semestre);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_anno=" + String.valueOf(id_anno));
			sb.append(",id_semestre=" + String.valueOf(id_semestre));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row7Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row5Struct implements
			routines.system.IPersistableRow<row5Struct> {
		final static byte[] commonByteArrayLock_DMINDICADORES_evaluacion_docente_parcial_temporal = new byte[0];
		static byte[] commonByteArray_DMINDICADORES_evaluacion_docente_parcial_temporal = new byte[0];

		public int id_anno;

		public int getId_anno() {
			return this.id_anno;
		}

		public int id_semestre;

		public int getId_semestre() {
			return this.id_semestre;
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DMINDICADORES_evaluacion_docente_parcial_temporal) {

				try {

					int length = 0;

					this.id_anno = dis.readInt();

					this.id_semestre = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id_anno);

				// int

				dos.writeInt(this.id_semestre);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_anno=" + String.valueOf(id_anno));
			sb.append(",id_semestre=" + String.valueOf(id_semestre));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tPostgresqlInput_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlInput_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row5Struct row5 = new row5Struct();
				row7Struct row7 = new row7Struct();
				row6Struct row6 = new row6Struct();

				/**
				 * [tLogRow_1 begin ] start
				 */

				ok_Hash.put("tLogRow_1", false);
				start_Hash.put("tLogRow_1", System.currentTimeMillis());

				currentComponent = "tLogRow_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row6" + iterateId, 0, 0);

					}
				}

				int tos_count_tLogRow_1 = 0;

				// /////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_1 = "|";
				java.io.PrintStream consoleOut_tLogRow_1 = null;

				StringBuilder strBuffer_tLogRow_1 = null;
				int nb_line_tLogRow_1 = 0;
				// /////////////////////

				/**
				 * [tLogRow_1 begin ] stop
				 */

				/**
				 * [tPostgresqlRow_1 begin ] start
				 */

				ok_Hash.put("tPostgresqlRow_1", false);
				start_Hash.put("tPostgresqlRow_1", System.currentTimeMillis());

				currentComponent = "tPostgresqlRow_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row7" + iterateId, 0, 0);

					}
				}

				int tos_count_tPostgresqlRow_1 = 0;

				java.sql.Connection conn_tPostgresqlRow_1 = null;
				String query_tPostgresqlRow_1 = "";
				boolean whetherReject_tPostgresqlRow_1 = false;
				conn_tPostgresqlRow_1 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_2");

				resourceMap.put("conn_tPostgresqlRow_1", conn_tPostgresqlRow_1);
				java.sql.Statement stmt_tPostgresqlRow_1 = conn_tPostgresqlRow_1
						.createStatement();
				resourceMap.put("stmt_tPostgresqlRow_1", stmt_tPostgresqlRow_1);

				/**
				 * [tPostgresqlRow_1 begin ] stop
				 */

				/**
				 * [tJavaRow_1 begin ] start
				 */

				ok_Hash.put("tJavaRow_1", false);
				start_Hash.put("tJavaRow_1", System.currentTimeMillis());

				currentComponent = "tJavaRow_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row5" + iterateId, 0, 0);

					}
				}

				int tos_count_tJavaRow_1 = 0;

				int nb_line_tJavaRow_1 = 0;

				/**
				 * [tJavaRow_1 begin ] stop
				 */

				/**
				 * [tPostgresqlInput_2 begin ] start
				 */

				ok_Hash.put("tPostgresqlInput_2", false);
				start_Hash
						.put("tPostgresqlInput_2", System.currentTimeMillis());

				currentComponent = "tPostgresqlInput_2";

				int tos_count_tPostgresqlInput_2 = 0;

				int nb_line_tPostgresqlInput_2 = 0;
				java.sql.Connection conn_tPostgresqlInput_2 = null;
				conn_tPostgresqlInput_2 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_3");

				java.sql.Statement stmt_tPostgresqlInput_2 = conn_tPostgresqlInput_2
						.createStatement();

				String dbquery_tPostgresqlInput_2 = "SELECT id_anno, id_semestre\n  FROM \"CO_UDISTRITAL_MDM\".periodo where activo=true";

				globalMap.put("tPostgresqlInput_2_QUERY",
						dbquery_tPostgresqlInput_2);
				java.sql.ResultSet rs_tPostgresqlInput_2 = null;

				try {
					rs_tPostgresqlInput_2 = stmt_tPostgresqlInput_2
							.executeQuery(dbquery_tPostgresqlInput_2);
					java.sql.ResultSetMetaData rsmd_tPostgresqlInput_2 = rs_tPostgresqlInput_2
							.getMetaData();
					int colQtyInRs_tPostgresqlInput_2 = rsmd_tPostgresqlInput_2
							.getColumnCount();

					String tmpContent_tPostgresqlInput_2 = null;

					while (rs_tPostgresqlInput_2.next()) {
						nb_line_tPostgresqlInput_2++;

						if (colQtyInRs_tPostgresqlInput_2 < 1) {
							row5.id_anno = 0;
						} else {

							if (rs_tPostgresqlInput_2.getObject(1) != null) {
								row5.id_anno = rs_tPostgresqlInput_2.getInt(1);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tPostgresqlInput_2 < 2) {
							row5.id_semestre = 0;
						} else {

							if (rs_tPostgresqlInput_2.getObject(2) != null) {
								row5.id_semestre = rs_tPostgresqlInput_2
										.getInt(2);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}

						/**
						 * [tPostgresqlInput_2 begin ] stop
						 */

						/**
						 * [tPostgresqlInput_2 main ] start
						 */

						currentComponent = "tPostgresqlInput_2";

						tos_count_tPostgresqlInput_2++;

						/**
						 * [tPostgresqlInput_2 main ] stop
						 */

						/**
						 * [tPostgresqlInput_2 process_data_begin ] start
						 */

						currentComponent = "tPostgresqlInput_2";

						/**
						 * [tPostgresqlInput_2 process_data_begin ] stop
						 */

						/**
						 * [tJavaRow_1 main ] start
						 */

						currentComponent = "tJavaRow_1";

						// row5
						// row5

						if (execStat) {
							runStat.updateStatOnConnection("row5" + iterateId,
									1, 1);
						}

						// code sample:
						//
						// multiply by 2 the row identifier
						// row7.id = row5.id * 2;
						//
						// lowercase the name
						// row7.name = row5.name.toLowerCase();

						row7.id_anno = row5.id_anno;
						row7.id_semestre = row5.id_semestre;
						nb_line_tJavaRow_1++;

						tos_count_tJavaRow_1++;

						/**
						 * [tJavaRow_1 main ] stop
						 */

						/**
						 * [tJavaRow_1 process_data_begin ] start
						 */

						currentComponent = "tJavaRow_1";

						/**
						 * [tJavaRow_1 process_data_begin ] stop
						 */

						/**
						 * [tPostgresqlRow_1 main ] start
						 */

						currentComponent = "tPostgresqlRow_1";

						// row7
						// row7

						if (execStat) {
							runStat.updateStatOnConnection("row7" + iterateId,
									1, 1);
						}

						row6 = null;

						query_tPostgresqlRow_1 = "DELETE FROM evaluacion_docente_respuestas_temporal\n WHERE anno=2018 and semestre=1";
						whetherReject_tPostgresqlRow_1 = false;
						globalMap.put("tPostgresqlRow_1_QUERY",
								query_tPostgresqlRow_1);
						try {
							stmt_tPostgresqlRow_1
									.execute(query_tPostgresqlRow_1);

						} catch (java.lang.Exception e) {
							whetherReject_tPostgresqlRow_1 = true;

							System.err.print(e.getMessage());

						}

						if (!whetherReject_tPostgresqlRow_1) {

							row6 = new row6Struct();

						}

						tos_count_tPostgresqlRow_1++;

						/**
						 * [tPostgresqlRow_1 main ] stop
						 */

						/**
						 * [tPostgresqlRow_1 process_data_begin ] start
						 */

						currentComponent = "tPostgresqlRow_1";

						/**
						 * [tPostgresqlRow_1 process_data_begin ] stop
						 */
						// Start of branch "row6"
						if (row6 != null) {

							/**
							 * [tLogRow_1 main ] start
							 */

							currentComponent = "tLogRow_1";

							// row6
							// row6

							if (execStat) {
								runStat.updateStatOnConnection("row6"
										+ iterateId, 1, 1);
							}

							// /////////////////////

							strBuffer_tLogRow_1 = new StringBuilder();

							strBuffer_tLogRow_1.append(String
									.valueOf(row6.codigo_facultad));

							strBuffer_tLogRow_1.append("|");

							if (row6.facultad != null) { //

								strBuffer_tLogRow_1.append(String
										.valueOf(row6.facultad));

							} //

							if (globalMap.get("tLogRow_CONSOLE") != null) {
								consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap
										.get("tLogRow_CONSOLE");
							} else {
								consoleOut_tLogRow_1 = new java.io.PrintStream(
										new java.io.BufferedOutputStream(
												System.out));
								globalMap.put("tLogRow_CONSOLE",
										consoleOut_tLogRow_1);
							}
							consoleOut_tLogRow_1.println(strBuffer_tLogRow_1
									.toString());
							consoleOut_tLogRow_1.flush();
							nb_line_tLogRow_1++;
							// ////

							// ////

							// /////////////////////

							tos_count_tLogRow_1++;

							/**
							 * [tLogRow_1 main ] stop
							 */

							/**
							 * [tLogRow_1 process_data_begin ] start
							 */

							currentComponent = "tLogRow_1";

							/**
							 * [tLogRow_1 process_data_begin ] stop
							 */

							/**
							 * [tLogRow_1 process_data_end ] start
							 */

							currentComponent = "tLogRow_1";

							/**
							 * [tLogRow_1 process_data_end ] stop
							 */

						} // End of branch "row6"

						/**
						 * [tPostgresqlRow_1 process_data_end ] start
						 */

						currentComponent = "tPostgresqlRow_1";

						/**
						 * [tPostgresqlRow_1 process_data_end ] stop
						 */

						/**
						 * [tJavaRow_1 process_data_end ] start
						 */

						currentComponent = "tJavaRow_1";

						/**
						 * [tJavaRow_1 process_data_end ] stop
						 */

						/**
						 * [tPostgresqlInput_2 process_data_end ] start
						 */

						currentComponent = "tPostgresqlInput_2";

						/**
						 * [tPostgresqlInput_2 process_data_end ] stop
						 */

						/**
						 * [tPostgresqlInput_2 end ] start
						 */

						currentComponent = "tPostgresqlInput_2";

					}
				} finally {
					if (rs_tPostgresqlInput_2 != null) {
						rs_tPostgresqlInput_2.close();
					}
					if (stmt_tPostgresqlInput_2 != null) {
						stmt_tPostgresqlInput_2.close();
					}
				}
				globalMap.put("tPostgresqlInput_2_NB_LINE",
						nb_line_tPostgresqlInput_2);

				ok_Hash.put("tPostgresqlInput_2", true);
				end_Hash.put("tPostgresqlInput_2", System.currentTimeMillis());

				/**
				 * [tPostgresqlInput_2 end ] stop
				 */

				/**
				 * [tJavaRow_1 end ] start
				 */

				currentComponent = "tJavaRow_1";

				globalMap.put("tJavaRow_1_NB_LINE", nb_line_tJavaRow_1);
				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row5" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tJavaRow_1", true);
				end_Hash.put("tJavaRow_1", System.currentTimeMillis());

				/**
				 * [tJavaRow_1 end ] stop
				 */

				/**
				 * [tPostgresqlRow_1 end ] start
				 */

				currentComponent = "tPostgresqlRow_1";

				stmt_tPostgresqlRow_1.close();
				resourceMap.remove("stmt_tPostgresqlRow_1");
				resourceMap.put("statementClosed_tPostgresqlRow_1", true);
				resourceMap.put("finish_tPostgresqlRow_1", true);
				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row7" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tPostgresqlRow_1", true);
				end_Hash.put("tPostgresqlRow_1", System.currentTimeMillis());

				/**
				 * [tPostgresqlRow_1 end ] stop
				 */

				/**
				 * [tLogRow_1 end ] start
				 */

				currentComponent = "tLogRow_1";

				// ////
				// ////
				globalMap.put("tLogRow_1_NB_LINE", nb_line_tLogRow_1);

				// /////////////////////

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row6" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tLogRow_1", true);
				end_Hash.put("tLogRow_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tOracleConnection_1Process(globalMap);

				/**
				 * [tLogRow_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tPostgresqlInput_2 finally ] start
				 */

				currentComponent = "tPostgresqlInput_2";

				/**
				 * [tPostgresqlInput_2 finally ] stop
				 */

				/**
				 * [tJavaRow_1 finally ] start
				 */

				currentComponent = "tJavaRow_1";

				/**
				 * [tJavaRow_1 finally ] stop
				 */

				/**
				 * [tPostgresqlRow_1 finally ] start
				 */

				currentComponent = "tPostgresqlRow_1";

				if (resourceMap.get("statementClosed_tPostgresqlRow_1") == null) {
					java.sql.Statement stmtToClose_tPostgresqlRow_1 = null;
					if ((stmtToClose_tPostgresqlRow_1 = (java.sql.Statement) resourceMap
							.remove("stmt_tPostgresqlRow_1")) != null) {
						stmtToClose_tPostgresqlRow_1.close();
					}
				}

				/**
				 * [tPostgresqlRow_1 finally ] stop
				 */

				/**
				 * [tLogRow_1 finally ] start
				 */

				currentComponent = "tLogRow_1";

				/**
				 * [tLogRow_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostgresqlInput_2_SUBPROCESS_STATE", 1);
	}

	public void tOracleConnection_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tOracleConnection_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tOracleConnection_1 begin ] start
				 */

				ok_Hash.put("tOracleConnection_1", false);
				start_Hash.put("tOracleConnection_1",
						System.currentTimeMillis());

				currentComponent = "tOracleConnection_1";

				int tos_count_tOracleConnection_1 = 0;

				String url_tOracleConnection_1 = "jdbc:oracle:thin:@"
						+ "academicaproduccion.c8an9arwoaua.us-east-1.rds.amazonaws.com"
						+ ":" + "1521" + ":" + "sudd";
				globalMap.put("connectionType_" + "tOracleConnection_1",
						"ORACLE_SID");

				String dbUser_tOracleConnection_1 = "datawarefnl2";

				final String decryptedPassword_tOracleConnection_1 = routines.system.PasswordEncryptUtil
						.decryptPassword("a1a2f764c96a45a6f8d4af7647a4e49f");
				String dbPwd_tOracleConnection_1 = decryptedPassword_tOracleConnection_1;

				java.sql.Connection conn_tOracleConnection_1 = null;

				String driverClass_tOracleConnection_1 = "oracle.jdbc.OracleDriver";
				java.lang.Class.forName(driverClass_tOracleConnection_1);

				conn_tOracleConnection_1 = java.sql.DriverManager
						.getConnection(url_tOracleConnection_1,
								dbUser_tOracleConnection_1,
								dbPwd_tOracleConnection_1);

				globalMap.put("conn_tOracleConnection_1",
						conn_tOracleConnection_1);
				if (null != conn_tOracleConnection_1) {

					conn_tOracleConnection_1.setAutoCommit(false);
				}
				globalMap
						.put("host_" + "tOracleConnection_1",
								"academicaproduccion.c8an9arwoaua.us-east-1.rds.amazonaws.com");
				globalMap.put("port_" + "tOracleConnection_1", "1521");
				globalMap.put("dbname_" + "tOracleConnection_1", "sudd");

				globalMap.put("conn_" + "tOracleConnection_1",
						conn_tOracleConnection_1);
				globalMap.put("dbschema_" + "tOracleConnection_1", "MNTAC");
				globalMap.put("username_" + "tOracleConnection_1",
						"datawarefnl2");
				globalMap.put("password_" + "tOracleConnection_1",
						dbPwd_tOracleConnection_1);

				/**
				 * [tOracleConnection_1 begin ] stop
				 */

				/**
				 * [tOracleConnection_1 main ] start
				 */

				currentComponent = "tOracleConnection_1";

				tos_count_tOracleConnection_1++;

				/**
				 * [tOracleConnection_1 main ] stop
				 */

				/**
				 * [tOracleConnection_1 process_data_begin ] start
				 */

				currentComponent = "tOracleConnection_1";

				/**
				 * [tOracleConnection_1 process_data_begin ] stop
				 */

				/**
				 * [tOracleConnection_1 process_data_end ] start
				 */

				currentComponent = "tOracleConnection_1";

				/**
				 * [tOracleConnection_1 process_data_end ] stop
				 */

				/**
				 * [tOracleConnection_1 end ] start
				 */

				currentComponent = "tOracleConnection_1";

				ok_Hash.put("tOracleConnection_1", true);
				end_Hash.put("tOracleConnection_1", System.currentTimeMillis());

				/**
				 * [tOracleConnection_1 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tOracleConnection_1:OnSubjobOk",
						"", Thread.currentThread().getId() + "", "", "", "",
						"", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
			}

			tPostgresqlInput_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tOracleConnection_1 finally ] start
				 */

				currentComponent = "tOracleConnection_1";

				/**
				 * [tOracleConnection_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tOracleConnection_1_SUBPROCESS_STATE", 1);
	}

	public static class evaluacionStruct implements
			routines.system.IPersistableRow<evaluacionStruct> {
		final static byte[] commonByteArrayLock_DMINDICADORES_evaluacion_docente_parcial_temporal = new byte[0];
		static byte[] commonByteArray_DMINDICADORES_evaluacion_docente_parcial_temporal = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer id;

		public Integer getId() {
			return this.id;
		}

		public int anno;

		public int getAnno() {
			return this.anno;
		}

		public int semestre;

		public int getSemestre() {
			return this.semestre;
		}

		public long codigo_docente;

		public long getCodigo_docente() {
			return this.codigo_docente;
		}

		public int codigo_proyecto_estudiante;

		public int getCodigo_proyecto_estudiante() {
			return this.codigo_proyecto_estudiante;
		}

		public String proyecto_estudiante;

		public String getProyecto_estudiante() {
			return this.proyecto_estudiante;
		}

		public Integer codigo_facultad_estudiante;

		public Integer getCodigo_facultad_estudiante() {
			return this.codigo_facultad_estudiante;
		}

		public String facultad_estudiante;

		public String getFacultad_estudiante() {
			return this.facultad_estudiante;
		}

		public long estudiante;

		public long getEstudiante() {
			return this.estudiante;
		}

		public String grupo;

		public String getGrupo() {
			return this.grupo;
		}

		public Integer codigo_asignatura;

		public Integer getCodigo_asignatura() {
			return this.codigo_asignatura;
		}

		public Integer codigo_proyecto;

		public Integer getCodigo_proyecto() {
			return this.codigo_proyecto;
		}

		public String proyecto;

		public String getProyecto() {
			return this.proyecto;
		}

		public String docente;

		public String getDocente() {
			return this.docente;
		}

		public Integer codigo_facultad;

		public Integer getCodigo_facultad() {
			return this.codigo_facultad;
		}

		public String facultad;

		public String getFacultad() {
			return this.facultad;
		}

		public String asignatura;

		public String getAsignatura() {
			return this.asignatura;
		}

		public Integer respuesta;

		public Integer getRespuesta() {
			return this.respuesta;
		}

		public String nivel;

		public String getNivel() {
			return this.nivel;
		}

		public java.util.Date fecha_registro;

		public java.util.Date getFecha_registro() {
			return this.fecha_registro;
		}

		public int codigo_tipo_evaluacion;

		public int getCodigo_tipo_evaluacion() {
			return this.codigo_tipo_evaluacion;
		}

		public String tipo_evaluacion;

		public String getTipo_evaluacion() {
			return this.tipo_evaluacion;
		}

		public int porcentaje_evaluacion;

		public int getPorcentaje_evaluacion() {
			return this.porcentaje_evaluacion;
		}

		public Integer numero_pregunta;

		public Integer getNumero_pregunta() {
			return this.numero_pregunta;
		}

		public java.util.Date fecha_carga;

		public java.util.Date getFecha_carga() {
			return this.fecha_carga;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.id == null) ? 0 : this.id.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final evaluacionStruct other = (evaluacionStruct) obj;

			if (this.id == null) {
				if (other.id != null)
					return false;

			} else if (!this.id.equals(other.id))

				return false;

			return true;
		}

		public void copyDataTo(evaluacionStruct other) {

			other.id = this.id;
			other.anno = this.anno;
			other.semestre = this.semestre;
			other.codigo_docente = this.codigo_docente;
			other.codigo_proyecto_estudiante = this.codigo_proyecto_estudiante;
			other.proyecto_estudiante = this.proyecto_estudiante;
			other.codigo_facultad_estudiante = this.codigo_facultad_estudiante;
			other.facultad_estudiante = this.facultad_estudiante;
			other.estudiante = this.estudiante;
			other.grupo = this.grupo;
			other.codigo_asignatura = this.codigo_asignatura;
			other.codigo_proyecto = this.codigo_proyecto;
			other.proyecto = this.proyecto;
			other.docente = this.docente;
			other.codigo_facultad = this.codigo_facultad;
			other.facultad = this.facultad;
			other.asignatura = this.asignatura;
			other.respuesta = this.respuesta;
			other.nivel = this.nivel;
			other.fecha_registro = this.fecha_registro;
			other.codigo_tipo_evaluacion = this.codigo_tipo_evaluacion;
			other.tipo_evaluacion = this.tipo_evaluacion;
			other.porcentaje_evaluacion = this.porcentaje_evaluacion;
			other.numero_pregunta = this.numero_pregunta;
			other.fecha_carga = this.fecha_carga;

		}

		public void copyKeysDataTo(evaluacionStruct other) {

			other.id = this.id;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DMINDICADORES_evaluacion_docente_parcial_temporal.length) {
					if (length < 1024
							&& commonByteArray_DMINDICADORES_evaluacion_docente_parcial_temporal.length == 0) {
						commonByteArray_DMINDICADORES_evaluacion_docente_parcial_temporal = new byte[1024];
					} else {
						commonByteArray_DMINDICADORES_evaluacion_docente_parcial_temporal = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_DMINDICADORES_evaluacion_docente_parcial_temporal,
						0, length);
				strReturn = new String(
						commonByteArray_DMINDICADORES_evaluacion_docente_parcial_temporal,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DMINDICADORES_evaluacion_docente_parcial_temporal) {

				try {

					int length = 0;

					this.id = readInteger(dis);

					this.anno = dis.readInt();

					this.semestre = dis.readInt();

					this.codigo_docente = dis.readLong();

					this.codigo_proyecto_estudiante = dis.readInt();

					this.proyecto_estudiante = readString(dis);

					this.codigo_facultad_estudiante = readInteger(dis);

					this.facultad_estudiante = readString(dis);

					this.estudiante = dis.readLong();

					this.grupo = readString(dis);

					this.codigo_asignatura = readInteger(dis);

					this.codigo_proyecto = readInteger(dis);

					this.proyecto = readString(dis);

					this.docente = readString(dis);

					this.codigo_facultad = readInteger(dis);

					this.facultad = readString(dis);

					this.asignatura = readString(dis);

					this.respuesta = readInteger(dis);

					this.nivel = readString(dis);

					this.fecha_registro = readDate(dis);

					this.codigo_tipo_evaluacion = dis.readInt();

					this.tipo_evaluacion = readString(dis);

					this.porcentaje_evaluacion = dis.readInt();

					this.numero_pregunta = readInteger(dis);

					this.fecha_carga = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.id, dos);

				// int

				dos.writeInt(this.anno);

				// int

				dos.writeInt(this.semestre);

				// long

				dos.writeLong(this.codigo_docente);

				// int

				dos.writeInt(this.codigo_proyecto_estudiante);

				// String

				writeString(this.proyecto_estudiante, dos);

				// Integer

				writeInteger(this.codigo_facultad_estudiante, dos);

				// String

				writeString(this.facultad_estudiante, dos);

				// long

				dos.writeLong(this.estudiante);

				// String

				writeString(this.grupo, dos);

				// Integer

				writeInteger(this.codigo_asignatura, dos);

				// Integer

				writeInteger(this.codigo_proyecto, dos);

				// String

				writeString(this.proyecto, dos);

				// String

				writeString(this.docente, dos);

				// Integer

				writeInteger(this.codigo_facultad, dos);

				// String

				writeString(this.facultad, dos);

				// String

				writeString(this.asignatura, dos);

				// Integer

				writeInteger(this.respuesta, dos);

				// String

				writeString(this.nivel, dos);

				// java.util.Date

				writeDate(this.fecha_registro, dos);

				// int

				dos.writeInt(this.codigo_tipo_evaluacion);

				// String

				writeString(this.tipo_evaluacion, dos);

				// int

				dos.writeInt(this.porcentaje_evaluacion);

				// Integer

				writeInteger(this.numero_pregunta, dos);

				// java.util.Date

				writeDate(this.fecha_carga, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",anno=" + String.valueOf(anno));
			sb.append(",semestre=" + String.valueOf(semestre));
			sb.append(",codigo_docente=" + String.valueOf(codigo_docente));
			sb.append(",codigo_proyecto_estudiante="
					+ String.valueOf(codigo_proyecto_estudiante));
			sb.append(",proyecto_estudiante=" + proyecto_estudiante);
			sb.append(",codigo_facultad_estudiante="
					+ String.valueOf(codigo_facultad_estudiante));
			sb.append(",facultad_estudiante=" + facultad_estudiante);
			sb.append(",estudiante=" + String.valueOf(estudiante));
			sb.append(",grupo=" + grupo);
			sb.append(",codigo_asignatura=" + String.valueOf(codigo_asignatura));
			sb.append(",codigo_proyecto=" + String.valueOf(codigo_proyecto));
			sb.append(",proyecto=" + proyecto);
			sb.append(",docente=" + docente);
			sb.append(",codigo_facultad=" + String.valueOf(codigo_facultad));
			sb.append(",facultad=" + facultad);
			sb.append(",asignatura=" + asignatura);
			sb.append(",respuesta=" + String.valueOf(respuesta));
			sb.append(",nivel=" + nivel);
			sb.append(",fecha_registro=" + String.valueOf(fecha_registro));
			sb.append(",codigo_tipo_evaluacion="
					+ String.valueOf(codigo_tipo_evaluacion));
			sb.append(",tipo_evaluacion=" + tipo_evaluacion);
			sb.append(",porcentaje_evaluacion="
					+ String.valueOf(porcentaje_evaluacion));
			sb.append(",numero_pregunta=" + String.valueOf(numero_pregunta));
			sb.append(",fecha_carga=" + String.valueOf(fecha_carga));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(evaluacionStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id, other.id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements
			routines.system.IPersistableComparableLookupRow<row1Struct> {
		final static byte[] commonByteArrayLock_DMINDICADORES_evaluacion_docente_parcial_temporal = new byte[0];
		static byte[] commonByteArray_DMINDICADORES_evaluacion_docente_parcial_temporal = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer resp_anio;

		public Integer getResp_anio() {
			return this.resp_anio;
		}

		public Integer resp_periodo;

		public Integer getResp_periodo() {
			return this.resp_periodo;
		}

		public Long resp_identificacion_evaluado;

		public Long getResp_identificacion_evaluado() {
			return this.resp_identificacion_evaluado;
		}

		public Integer resp_carrera;

		public Integer getResp_carrera() {
			return this.resp_carrera;
		}

		public Long resp_identificacion_evaluador;

		public Long getResp_identificacion_evaluador() {
			return this.resp_identificacion_evaluador;
		}

		public Integer resp_respuesta;

		public Integer getResp_respuesta() {
			return this.resp_respuesta;
		}

		public Integer tipo_id;

		public Integer getTipo_id() {
			return this.tipo_id;
		}

		public String tipo_nombre;

		public String getTipo_nombre() {
			return this.tipo_nombre;
		}

		public Integer fto_porcentaje;

		public Integer getFto_porcentaje() {
			return this.fto_porcentaje;
		}

		public String resp_grupo;

		public String getResp_grupo() {
			return this.resp_grupo;
		}

		public Integer resp_asignatura;

		public Integer getResp_asignatura() {
			return this.resp_asignatura;
		}

		public Integer resp_preg_num;

		public Integer getResp_preg_num() {
			return this.resp_preg_num;
		}

		public java.util.Date resp_fec_registro;

		public java.util.Date getResp_fec_registro() {
			return this.resp_fec_registro;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.resp_anio == null) ? 0 : this.resp_anio
								.hashCode());

				result = prime
						* result
						+ ((this.resp_periodo == null) ? 0 : this.resp_periodo
								.hashCode());

				result = prime
						* result
						+ ((this.resp_identificacion_evaluado == null) ? 0
								: this.resp_identificacion_evaluado.hashCode());

				result = prime
						* result
						+ ((this.resp_carrera == null) ? 0 : this.resp_carrera
								.hashCode());

				result = prime
						* result
						+ ((this.resp_identificacion_evaluador == null) ? 0
								: this.resp_identificacion_evaluador.hashCode());

				result = prime
						* result
						+ ((this.resp_asignatura == null) ? 0
								: this.resp_asignatura.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row1Struct other = (row1Struct) obj;

			if (this.resp_anio == null) {
				if (other.resp_anio != null)
					return false;

			} else if (!this.resp_anio.equals(other.resp_anio))

				return false;

			if (this.resp_periodo == null) {
				if (other.resp_periodo != null)
					return false;

			} else if (!this.resp_periodo.equals(other.resp_periodo))

				return false;

			if (this.resp_identificacion_evaluado == null) {
				if (other.resp_identificacion_evaluado != null)
					return false;

			} else if (!this.resp_identificacion_evaluado
					.equals(other.resp_identificacion_evaluado))

				return false;

			if (this.resp_carrera == null) {
				if (other.resp_carrera != null)
					return false;

			} else if (!this.resp_carrera.equals(other.resp_carrera))

				return false;

			if (this.resp_identificacion_evaluador == null) {
				if (other.resp_identificacion_evaluador != null)
					return false;

			} else if (!this.resp_identificacion_evaluador
					.equals(other.resp_identificacion_evaluador))

				return false;

			if (this.resp_asignatura == null) {
				if (other.resp_asignatura != null)
					return false;

			} else if (!this.resp_asignatura.equals(other.resp_asignatura))

				return false;

			return true;
		}

		public void copyDataTo(row1Struct other) {

			other.resp_anio = this.resp_anio;
			other.resp_periodo = this.resp_periodo;
			other.resp_identificacion_evaluado = this.resp_identificacion_evaluado;
			other.resp_carrera = this.resp_carrera;
			other.resp_identificacion_evaluador = this.resp_identificacion_evaluador;
			other.resp_respuesta = this.resp_respuesta;
			other.tipo_id = this.tipo_id;
			other.tipo_nombre = this.tipo_nombre;
			other.fto_porcentaje = this.fto_porcentaje;
			other.resp_grupo = this.resp_grupo;
			other.resp_asignatura = this.resp_asignatura;
			other.resp_preg_num = this.resp_preg_num;
			other.resp_fec_registro = this.resp_fec_registro;

		}

		public void copyKeysDataTo(row1Struct other) {

			other.resp_anio = this.resp_anio;
			other.resp_periodo = this.resp_periodo;
			other.resp_identificacion_evaluado = this.resp_identificacion_evaluado;
			other.resp_carrera = this.resp_carrera;
			other.resp_identificacion_evaluador = this.resp_identificacion_evaluador;
			other.resp_asignatura = this.resp_asignatura;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(DataInputStream dis,
				ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DMINDICADORES_evaluacion_docente_parcial_temporal) {

				try {

					int length = 0;

					this.resp_anio = readInteger(dis);

					this.resp_periodo = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.resp_identificacion_evaluado = null;
					} else {
						this.resp_identificacion_evaluado = dis.readLong();
					}

					this.resp_carrera = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.resp_identificacion_evaluador = null;
					} else {
						this.resp_identificacion_evaluador = dis.readLong();
					}

					this.resp_asignatura = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.resp_anio, dos);

				// Integer

				writeInteger(this.resp_periodo, dos);

				// Long

				if (this.resp_identificacion_evaluado == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.resp_identificacion_evaluado);
				}

				// Integer

				writeInteger(this.resp_carrera, dos);

				// Long

				if (this.resp_identificacion_evaluador == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.resp_identificacion_evaluador);
				}

				// Integer

				writeInteger(this.resp_asignatura, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.resp_respuesta = readInteger(dis, ois);

				this.tipo_id = readInteger(dis, ois);

				this.tipo_nombre = readString(dis, ois);

				this.fto_porcentaje = readInteger(dis, ois);

				this.resp_grupo = readString(dis, ois);

				this.resp_preg_num = readInteger(dis, ois);

				this.resp_fec_registro = readDate(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeInteger(this.resp_respuesta, dos, oos);

				writeInteger(this.tipo_id, dos, oos);

				writeString(this.tipo_nombre, dos, oos);

				writeInteger(this.fto_porcentaje, dos, oos);

				writeString(this.resp_grupo, dos, oos);

				writeInteger(this.resp_preg_num, dos, oos);

				writeDate(this.resp_fec_registro, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("resp_anio=" + String.valueOf(resp_anio));
			sb.append(",resp_periodo=" + String.valueOf(resp_periodo));
			sb.append(",resp_identificacion_evaluado="
					+ String.valueOf(resp_identificacion_evaluado));
			sb.append(",resp_carrera=" + String.valueOf(resp_carrera));
			sb.append(",resp_identificacion_evaluador="
					+ String.valueOf(resp_identificacion_evaluador));
			sb.append(",resp_respuesta=" + String.valueOf(resp_respuesta));
			sb.append(",tipo_id=" + String.valueOf(tipo_id));
			sb.append(",tipo_nombre=" + tipo_nombre);
			sb.append(",fto_porcentaje=" + String.valueOf(fto_porcentaje));
			sb.append(",resp_grupo=" + resp_grupo);
			sb.append(",resp_asignatura=" + String.valueOf(resp_asignatura));
			sb.append(",resp_preg_num=" + String.valueOf(resp_preg_num));
			sb.append(",resp_fec_registro=" + String.valueOf(resp_fec_registro));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.resp_anio, other.resp_anio);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.resp_periodo,
					other.resp_periodo);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(
					this.resp_identificacion_evaluado,
					other.resp_identificacion_evaluado);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.resp_carrera,
					other.resp_carrera);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(
					this.resp_identificacion_evaluador,
					other.resp_identificacion_evaluador);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.resp_asignatura,
					other.resp_asignatura);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tPostgresqlInput_1Struct implements
			routines.system.IPersistableRow<after_tPostgresqlInput_1Struct> {
		final static byte[] commonByteArrayLock_DMINDICADORES_evaluacion_docente_parcial_temporal = new byte[0];
		static byte[] commonByteArray_DMINDICADORES_evaluacion_docente_parcial_temporal = new byte[0];

		public Integer resp_anio;

		public Integer getResp_anio() {
			return this.resp_anio;
		}

		public Integer resp_periodo;

		public Integer getResp_periodo() {
			return this.resp_periodo;
		}

		public Long resp_identificacion_evaluado;

		public Long getResp_identificacion_evaluado() {
			return this.resp_identificacion_evaluado;
		}

		public Integer resp_carrera;

		public Integer getResp_carrera() {
			return this.resp_carrera;
		}

		public Long resp_identificacion_evaluador;

		public Long getResp_identificacion_evaluador() {
			return this.resp_identificacion_evaluador;
		}

		public Integer resp_respuesta;

		public Integer getResp_respuesta() {
			return this.resp_respuesta;
		}

		public Integer tipo_id;

		public Integer getTipo_id() {
			return this.tipo_id;
		}

		public String tipo_nombre;

		public String getTipo_nombre() {
			return this.tipo_nombre;
		}

		public Integer fto_porcentaje;

		public Integer getFto_porcentaje() {
			return this.fto_porcentaje;
		}

		public String resp_grupo;

		public String getResp_grupo() {
			return this.resp_grupo;
		}

		public Integer resp_asignatura;

		public Integer getResp_asignatura() {
			return this.resp_asignatura;
		}

		public Integer resp_preg_num;

		public Integer getResp_preg_num() {
			return this.resp_preg_num;
		}

		public java.util.Date resp_fec_registro;

		public java.util.Date getResp_fec_registro() {
			return this.resp_fec_registro;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DMINDICADORES_evaluacion_docente_parcial_temporal.length) {
					if (length < 1024
							&& commonByteArray_DMINDICADORES_evaluacion_docente_parcial_temporal.length == 0) {
						commonByteArray_DMINDICADORES_evaluacion_docente_parcial_temporal = new byte[1024];
					} else {
						commonByteArray_DMINDICADORES_evaluacion_docente_parcial_temporal = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_DMINDICADORES_evaluacion_docente_parcial_temporal,
						0, length);
				strReturn = new String(
						commonByteArray_DMINDICADORES_evaluacion_docente_parcial_temporal,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DMINDICADORES_evaluacion_docente_parcial_temporal) {

				try {

					int length = 0;

					this.resp_anio = readInteger(dis);

					this.resp_periodo = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.resp_identificacion_evaluado = null;
					} else {
						this.resp_identificacion_evaluado = dis.readLong();
					}

					this.resp_carrera = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.resp_identificacion_evaluador = null;
					} else {
						this.resp_identificacion_evaluador = dis.readLong();
					}

					this.resp_respuesta = readInteger(dis);

					this.tipo_id = readInteger(dis);

					this.tipo_nombre = readString(dis);

					this.fto_porcentaje = readInteger(dis);

					this.resp_grupo = readString(dis);

					this.resp_asignatura = readInteger(dis);

					this.resp_preg_num = readInteger(dis);

					this.resp_fec_registro = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.resp_anio, dos);

				// Integer

				writeInteger(this.resp_periodo, dos);

				// Long

				if (this.resp_identificacion_evaluado == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.resp_identificacion_evaluado);
				}

				// Integer

				writeInteger(this.resp_carrera, dos);

				// Long

				if (this.resp_identificacion_evaluador == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.resp_identificacion_evaluador);
				}

				// Integer

				writeInteger(this.resp_respuesta, dos);

				// Integer

				writeInteger(this.tipo_id, dos);

				// String

				writeString(this.tipo_nombre, dos);

				// Integer

				writeInteger(this.fto_porcentaje, dos);

				// String

				writeString(this.resp_grupo, dos);

				// Integer

				writeInteger(this.resp_asignatura, dos);

				// Integer

				writeInteger(this.resp_preg_num, dos);

				// java.util.Date

				writeDate(this.resp_fec_registro, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("resp_anio=" + String.valueOf(resp_anio));
			sb.append(",resp_periodo=" + String.valueOf(resp_periodo));
			sb.append(",resp_identificacion_evaluado="
					+ String.valueOf(resp_identificacion_evaluado));
			sb.append(",resp_carrera=" + String.valueOf(resp_carrera));
			sb.append(",resp_identificacion_evaluador="
					+ String.valueOf(resp_identificacion_evaluador));
			sb.append(",resp_respuesta=" + String.valueOf(resp_respuesta));
			sb.append(",tipo_id=" + String.valueOf(tipo_id));
			sb.append(",tipo_nombre=" + tipo_nombre);
			sb.append(",fto_porcentaje=" + String.valueOf(fto_porcentaje));
			sb.append(",resp_grupo=" + resp_grupo);
			sb.append(",resp_asignatura=" + String.valueOf(resp_asignatura));
			sb.append(",resp_preg_num=" + String.valueOf(resp_preg_num));
			sb.append(",resp_fec_registro=" + String.valueOf(resp_fec_registro));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tPostgresqlInput_1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tPostgresqlInput_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				tOracleInput_1Process(globalMap);
				tPostgresqlInput_3Process(globalMap);
				tPostgresqlInput_4Process(globalMap);

				row1Struct row1 = new row1Struct();
				evaluacionStruct evaluacion = new evaluacionStruct();

				/**
				 * [tPostgresqlOutput_1 begin ] start
				 */

				ok_Hash.put("tPostgresqlOutput_1", false);
				start_Hash.put("tPostgresqlOutput_1",
						System.currentTimeMillis());

				currentComponent = "tPostgresqlOutput_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection(
								"evaluacion" + iterateId, 0, 0);

					}
				}

				int tos_count_tPostgresqlOutput_1 = 0;

				String dbschema_tPostgresqlOutput_1 = null;
				dbschema_tPostgresqlOutput_1 = (String) globalMap.get("schema_"
						+ "tPostgresqlConnection_2");

				String tableName_tPostgresqlOutput_1 = null;
				if (dbschema_tPostgresqlOutput_1 == null
						|| dbschema_tPostgresqlOutput_1.trim().length() == 0) {
					tableName_tPostgresqlOutput_1 = "evaluacion_docente_respuestas_temporal";
				} else {
					tableName_tPostgresqlOutput_1 = dbschema_tPostgresqlOutput_1
							+ "\".\""
							+ "evaluacion_docente_respuestas_temporal";
				}

				int nb_line_tPostgresqlOutput_1 = 0;
				int nb_line_update_tPostgresqlOutput_1 = 0;
				int nb_line_inserted_tPostgresqlOutput_1 = 0;
				int nb_line_deleted_tPostgresqlOutput_1 = 0;
				int nb_line_rejected_tPostgresqlOutput_1 = 0;

				int deletedCount_tPostgresqlOutput_1 = 0;
				int updatedCount_tPostgresqlOutput_1 = 0;
				int insertedCount_tPostgresqlOutput_1 = 0;
				int rejectedCount_tPostgresqlOutput_1 = 0;

				boolean whetherReject_tPostgresqlOutput_1 = false;

				java.sql.Connection conn_tPostgresqlOutput_1 = null;
				String dbUser_tPostgresqlOutput_1 = null;

				conn_tPostgresqlOutput_1 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_2");

				int count_tPostgresqlOutput_1 = 0;
				java.sql.DatabaseMetaData dbMetaData_tPostgresqlOutput_1 = conn_tPostgresqlOutput_1
						.getMetaData();
				boolean whetherExist_tPostgresqlOutput_1 = false;
				try (java.sql.ResultSet rsTable_tPostgresqlOutput_1 = dbMetaData_tPostgresqlOutput_1
						.getTables(null, null, null, new String[] { "TABLE" })) {
					String defaultSchema_tPostgresqlOutput_1 = "public";
					if (dbschema_tPostgresqlOutput_1 == null
							|| dbschema_tPostgresqlOutput_1.trim().length() == 0) {
						try (java.sql.Statement stmtSchema_tPostgresqlOutput_1 = conn_tPostgresqlOutput_1
								.createStatement();
								java.sql.ResultSet rsSchema_tPostgresqlOutput_1 = stmtSchema_tPostgresqlOutput_1
										.executeQuery("select current_schema() ")) {
							while (rsSchema_tPostgresqlOutput_1.next()) {
								defaultSchema_tPostgresqlOutput_1 = rsSchema_tPostgresqlOutput_1
										.getString("current_schema");
							}
						}
					}
					while (rsTable_tPostgresqlOutput_1.next()) {
						String table_tPostgresqlOutput_1 = rsTable_tPostgresqlOutput_1
								.getString("TABLE_NAME");
						String schema_tPostgresqlOutput_1 = rsTable_tPostgresqlOutput_1
								.getString("TABLE_SCHEM");
						if (table_tPostgresqlOutput_1
								.equals("evaluacion_docente_respuestas_temporal")
								&& (schema_tPostgresqlOutput_1
										.equals(dbschema_tPostgresqlOutput_1) || ((dbschema_tPostgresqlOutput_1 == null || dbschema_tPostgresqlOutput_1
										.trim().length() == 0) && defaultSchema_tPostgresqlOutput_1
										.equals(schema_tPostgresqlOutput_1)))) {
							whetherExist_tPostgresqlOutput_1 = true;
							break;
						}
					}
				}
				if (!whetherExist_tPostgresqlOutput_1) {
					try (java.sql.Statement stmtCreate_tPostgresqlOutput_1 = conn_tPostgresqlOutput_1
							.createStatement()) {
						stmtCreate_tPostgresqlOutput_1
								.execute("CREATE TABLE \""
										+ tableName_tPostgresqlOutput_1
										+ "\"(\""
										+ "id"
										+ "\" VARCHAR(50),\"anno\" INT4  not null ,\"semestre\" INT4  not null ,\"codigo_docente\" INT8  not null ,\"codigo_proyecto_estudiante\" INT4  not null ,\"proyecto_estudiante\" VARCHAR(100)  ,\"codigo_facultad_estudiante\" INT4 ,\"facultad_estudiante\" VARCHAR(100)  ,\"estudiante\" INT8  not null ,\"grupo\" VARCHAR(45)  ,\"codigo_asignatura\" INT4 ,\"codigo_proyecto\" INT4 ,\"proyecto\" VARCHAR(100)  ,\"docente\" VARCHAR(52)  ,\"codigo_facultad\" INT4 ,\"facultad\" VARCHAR(64)  ,\"asignatura\" VARCHAR(100)  ,\"respuesta\" INT4 ,\"nivel\" VARCHAR(10)  ,\"fecha_registro\" TIMESTAMP(13)   not null ,\"codigo_tipo_evaluacion\" INT4  not null ,\"tipo_evaluacion\" VARCHAR(255)   not null ,\"porcentaje_evaluacion\" INT4  not null ,\"numero_pregunta\" INT4 ,\"fecha_carga\" TIMESTAMP ,primary key(\""
										+ "id" + "\"))");
					}
				}
				String insert_tPostgresqlOutput_1 = "INSERT INTO \""
						+ tableName_tPostgresqlOutput_1
						+ "\" (\""
						+ "id"
						+ "\",\"anno\",\"semestre\",\"codigo_docente\",\"codigo_proyecto_estudiante\",\"proyecto_estudiante\",\"codigo_facultad_estudiante\",\"facultad_estudiante\",\"estudiante\",\"grupo\",\"codigo_asignatura\",\"codigo_proyecto\",\"proyecto\",\"docente\",\"codigo_facultad\",\"facultad\",\"asignatura\",\"respuesta\",\"nivel\",\"fecha_registro\",\"codigo_tipo_evaluacion\",\"tipo_evaluacion\",\"porcentaje_evaluacion\",\"numero_pregunta\",\"fecha_carga\") VALUES ("
						+ "nextval('evaluacion_docente_respuestas_temporal_id_seq')"
						+ ",?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tPostgresqlOutput_1 = conn_tPostgresqlOutput_1
						.prepareStatement(insert_tPostgresqlOutput_1);
				resourceMap.put("pstmt_tPostgresqlOutput_1",
						pstmt_tPostgresqlOutput_1);

				/**
				 * [tPostgresqlOutput_1 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row1" + iterateId, 0, 0);

					}
				}

				int tos_count_tMap_1 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) globalMap
						.get("tHash_Lookup_row2"));

				row2Struct row2HashKey = new row2Struct();
				row2Struct row2Default = new row2Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct> tHash_Lookup_row3 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct>) globalMap
						.get("tHash_Lookup_row3"));

				row3Struct row3HashKey = new row3Struct();
				row3Struct row3Default = new row3Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct> tHash_Lookup_row4 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct>) globalMap
						.get("tHash_Lookup_row4"));

				row4Struct row4HashKey = new row4Struct();
				row4Struct row4Default = new row4Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				evaluacionStruct evaluacion_tmp = new evaluacionStruct();
				// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tPostgresqlInput_1 begin ] start
				 */

				ok_Hash.put("tPostgresqlInput_1", false);
				start_Hash
						.put("tPostgresqlInput_1", System.currentTimeMillis());

				currentComponent = "tPostgresqlInput_1";

				int tos_count_tPostgresqlInput_1 = 0;

				int nb_line_tPostgresqlInput_1 = 0;
				java.sql.Connection conn_tPostgresqlInput_1 = null;
				conn_tPostgresqlInput_1 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_5");

				java.sql.Statement stmt_tPostgresqlInput_1 = conn_tPostgresqlInput_1
						.createStatement();

				String dbquery_tPostgresqlInput_1 = "\nSELECT a.resp_anio, a.resp_periodo, a.resp_identificacion_evaluado,a.resp_carrera,\n   a.resp_identificacion_evaluador,"
						+ "a.resp_respuesta,c.tipo_id, d.tipo_nombre, c.fto_porcentaje ,\n a.resp_grupo, a.resp_asignatura,a.resp_preg_num, a.resp_f"
						+ "ec_registro\n  FROM autoevaluadoc.evaldocente_respuesta a\n  INNER JOIN autoevaluadoc.evaldocente_formulario b ON a.form_i"
						+ "d=b.form_id\n  INNER JOIN autoevaluadoc.evaldocente_formato c ON b.fto_id=c.fto_id\n  INNER JOIN autoevaluadoc.evaldocente"
						+ "_tipo_evaluacion d ON d.tipo_id=c.tipo_id\n  WHERE d.tipo_id=1\n  AND c.fto_numero=7\n  AND a.resp_anio=2018\n  AND a.resp_p"
						+ "eriodo=3\n  AND a.resp_preg_num NOT IN (11,12)\n  AND a.resp_estado='A'\n UNION ALL\nSELECT a.resp_anio, a.resp_periodo, a.r"
						+ "esp_identificacion_evaluado,a.resp_carrera,\n   a.resp_identificacion_evaluador,a.resp_respuesta,c.tipo_id, d.tipo_nombre"
						+ ", c.fto_porcentaje ,\n a.resp_grupo, a.resp_asignatura, a.resp_preg_num,a.resp_fec_registro\n  FROM autoevaluadoc.evaldoce"
						+ "nte_respuesta a\n  INNER JOIN autoevaluadoc.evaldocente_formulario b ON a.form_id=b.form_id\n  INNER JOIN autoevaluadoc.ev"
						+ "aldocente_formato c ON b.fto_id=c.fto_id\n   INNER JOIN autoevaluadoc.evaldocente_tipo_evaluacion d ON d.tipo_id=c.tipo_i"
						+ "d\n  WHERE d.tipo_id=2\n  AND c.fto_numero=6\n  AND a.resp_anio=2018\n  AND a.resp_periodo=3\n  AND a.resp_preg_num NOT IN (1"
						+ "2,13)\n  AND a.resp_estado='A'\n  \nUNION  ALL\nSELECT a.resp_anio, a.resp_periodo, a.resp_identificacion_evaluado,a.resp_ca"
						+ "rrera,\n   a.resp_identificacion_evaluador,a.resp_respuesta,c.tipo_id, d.tipo_nombre, c.fto_porcentaje ,\n a.resp_grupo, a"
						+ ".resp_asignatura, a.resp_preg_num,a.resp_fec_registro\n  FROM autoevaluadoc.evaldocente_respuesta a\n  INNER JOIN autoeval"
						+ "uadoc.evaldocente_formulario b ON a.form_id=b.form_id\n  INNER JOIN autoevaluadoc.evaldocente_formato c ON b.fto_id=c.fto"
						+ "_id\n   INNER JOIN autoevaluadoc.evaldocente_tipo_evaluacion d ON d.tipo_id=c.tipo_id\n  WHERE d.tipo_id=3\n  AND a.resp_an"
						+ "io=2018\n  AND a.resp_periodo=3\n  AND a.resp_estado='A'\n  \nUNION ALL\nSELECT a.resp_anio, a.resp_periodo, a.resp_identific"
						+ "acion_evaluado,a.resp_carrera,\n   a.resp_identificacion_evaluador,a.resp_respuesta,c.tipo_id, d.tipo_nombre, c.fto_porce"
						+ "ntaje ,\n a.resp_grupo, a.resp_asignatura, a.resp_preg_num,a.resp_fec_registro\n  FROM autoevaluadoc.evaldocente_respuesta"
						+ " a\n  INNER JOIN autoevaluadoc.evaldocente_formulario b ON a.form_id=b.form_id\n  INNER JOIN autoevaluadoc.evaldocente_for"
						+ "mato c ON b.fto_id=c.fto_id\n   INNER JOIN autoevaluadoc.evaldocente_tipo_evaluacion d ON d.tipo_id=c.tipo_id\n  WHERE d.t"
						+ "ipo_id=2\n  AND c.fto_numero=10\n   AND a.resp_anio=2018\n  AND a.resp_periodo=3\n  AND a.resp_preg_num NOT IN (21,22)\n  AND"
						+ " a.resp_estado='A'\n  \nUNION ALL\nSELECT a.resp_anio, a.resp_periodo, a.resp_identificacion_evaluado,a.resp_carrera,\n   a."
						+ "resp_identificacion_evaluador,a.resp_respuesta,c.tipo_id, d.tipo_nombre, c.fto_porcentaje ,\n a.resp_grupo, a.resp_asigna"
						+ "tura, a.resp_preg_num,a.resp_fec_registro\n FROM autoevaluadoc.evaldocente_respuesta a\n  INNER JOIN autoevaluadoc.evaldoc"
						+ "ente_formulario b ON a.form_id=b.form_id\n  INNER JOIN autoevaluadoc.evaldocente_formato c ON b.fto_id=c.fto_id\n   INNER "
						+ "JOIN autoevaluadoc.evaldocente_tipo_evaluacion d ON d.tipo_id=c.tipo_id\n  WHERE d.tipo_id=2\n  AND c.fto_numero=12\n  AND "
						+ "a.resp_anio=2018\n  AND a.resp_periodo=3\n  AND a.resp_preg_num NOT IN (15,16)\n  AND a.resp_estado='A'\n  \n UNION  ALL\n SEL"
						+ "ECT a.resp_anio, a.resp_periodo, a.resp_identificacion_evaluado,a.resp_carrera,\n   a.resp_identificacion_evaluador,a.res"
						+ "p_respuesta,c.tipo_id, d.tipo_nombre, c.fto_porcentaje ,\n a.resp_grupo, a.resp_asignatura, a.resp_preg_num,a.resp_fec_re"
						+ "gistro\n FROM autoevaluadoc.evaldocente_respuesta a\n  INNER JOIN autoevaluadoc.evaldocente_formulario b ON a.form_id=b.fo"
						+ "rm_id\n  INNER JOIN autoevaluadoc.evaldocente_formato c ON b.fto_id=c.fto_id\n   INNER JOIN autoevaluadoc.evaldocente_tipo"
						+ "_evaluacion d ON d.tipo_id=c.tipo_id\n  WHERE d.tipo_id=2\n  AND c.fto_numero=13\n  AND a.resp_anio=2018\n  AND a.resp_perio"
						+ "do=3\n  AND a.resp_preg_num NOT IN (14,15)\n  AND a.resp_estado='A'\n  \n\n  UNION ALL\nSELECT a.resp_anio, a.resp_periodo, a."
						+ "resp_identificacion_evaluado,a.resp_carrera,\n   a.resp_identificacion_evaluador,a.resp_respuesta,c.tipo_id, d.tipo_nombr"
						+ "e, c.fto_porcentaje ,\n a.resp_grupo, a.resp_asignatura, a.resp_preg_num,a.resp_fec_registro\n FROM autoevaluadoc.evaldoce"
						+ "nte_respuesta a\n  INNER JOIN autoevaluadoc.evaldocente_formulario b ON a.form_id=b.form_id\n  INNER JOIN autoevaluadoc.ev"
						+ "aldocente_formato c ON b.fto_id=c.fto_id\n   INNER JOIN autoevaluadoc.evaldocente_tipo_evaluacion d ON d.tipo_id=c.tipo_i"
						+ "d\n  WHERE d.tipo_id=4\n\n  AND a.resp_anio=2018\n  AND a.resp_periodo=3\n  AND a.resp_estado='A'\n  \nUNION ALL\n\n  SELECT a.re"
						+ "sp_anio, a.resp_periodo, a.resp_identificacion_evaluado,a.resp_carrera,\n   a.resp_identificacion_evaluador,a.resp_respue"
						+ "sta,c.tipo_id, d.tipo_nombre, c.fto_porcentaje ,\n a.resp_grupo, a.resp_asignatura, a.resp_preg_num,a.resp_fec_registro\n "
						+ "FROM autoevaluadoc.evaldocente_respuesta a\n  INNER JOIN autoevaluadoc.evaldocente_formulario b ON a.form_id=b.form_id\n  "
						+ "INNER JOIN autoevaluadoc.evaldocente_formato c ON b.fto_id=c.fto_id\n   INNER JOIN autoevaluadoc.evaldocente_tipo_evaluac"
						+ "ion d ON d.tipo_id=c.tipo_id\n  WHERE d.tipo_id=5\n\n   AND a.resp_anio=2018\n  AND a.resp_periodo=3\n  \nUNION ALL\n	\n  SELECT"
						+ " a.resp_anio, a.resp_periodo, a.resp_identificacion_evaluado,a.resp_carrera,\n   a.resp_identificacion_evaluador,a.resp_r"
						+ "espuesta,c.tipo_id, d.tipo_nombre, c.fto_porcentaje ,\n a.resp_grupo, a.resp_asignatura, a.resp_preg_num,a.resp_fec_regis"
						+ "tro\n FROM autoevaluadoc.evaldocente_respuesta a\n  INNER JOIN autoevaluadoc.evaldocente_formulario b ON a.form_id=b.form_"
						+ "id\n  INNER JOIN autoevaluadoc.evaldocente_formato c ON b.fto_id=c.fto_id\n   INNER JOIN autoevaluadoc.evaldocente_tipo_ev"
						+ "aluacion d ON d.tipo_id=c.tipo_id\n  WHERE d.tipo_id=6\n  \n  AND a.resp_anio=2018\n  AND a.resp_periodo=3\n  AND a.resp_esta"
						+ "do='A'\n ";

				globalMap.put("tPostgresqlInput_1_QUERY",
						dbquery_tPostgresqlInput_1);
				java.sql.ResultSet rs_tPostgresqlInput_1 = null;

				try {
					rs_tPostgresqlInput_1 = stmt_tPostgresqlInput_1
							.executeQuery(dbquery_tPostgresqlInput_1);
					java.sql.ResultSetMetaData rsmd_tPostgresqlInput_1 = rs_tPostgresqlInput_1
							.getMetaData();
					int colQtyInRs_tPostgresqlInput_1 = rsmd_tPostgresqlInput_1
							.getColumnCount();

					String tmpContent_tPostgresqlInput_1 = null;

					while (rs_tPostgresqlInput_1.next()) {
						nb_line_tPostgresqlInput_1++;

						if (colQtyInRs_tPostgresqlInput_1 < 1) {
							row1.resp_anio = null;
						} else {

							if (rs_tPostgresqlInput_1.getObject(1) != null) {
								row1.resp_anio = rs_tPostgresqlInput_1
										.getInt(1);
							} else {
								row1.resp_anio = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_1 < 2) {
							row1.resp_periodo = null;
						} else {

							if (rs_tPostgresqlInput_1.getObject(2) != null) {
								row1.resp_periodo = rs_tPostgresqlInput_1
										.getInt(2);
							} else {
								row1.resp_periodo = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_1 < 3) {
							row1.resp_identificacion_evaluado = null;
						} else {

							if (rs_tPostgresqlInput_1.getObject(3) != null) {
								row1.resp_identificacion_evaluado = rs_tPostgresqlInput_1
										.getLong(3);
							} else {
								row1.resp_identificacion_evaluado = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_1 < 4) {
							row1.resp_carrera = null;
						} else {

							if (rs_tPostgresqlInput_1.getObject(4) != null) {
								row1.resp_carrera = rs_tPostgresqlInput_1
										.getInt(4);
							} else {
								row1.resp_carrera = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_1 < 5) {
							row1.resp_identificacion_evaluador = null;
						} else {

							if (rs_tPostgresqlInput_1.getObject(5) != null) {
								row1.resp_identificacion_evaluador = rs_tPostgresqlInput_1
										.getLong(5);
							} else {
								row1.resp_identificacion_evaluador = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_1 < 6) {
							row1.resp_respuesta = null;
						} else {

							if (rs_tPostgresqlInput_1.getObject(6) != null) {
								row1.resp_respuesta = rs_tPostgresqlInput_1
										.getInt(6);
							} else {
								row1.resp_respuesta = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_1 < 7) {
							row1.tipo_id = null;
						} else {

							if (rs_tPostgresqlInput_1.getObject(7) != null) {
								row1.tipo_id = rs_tPostgresqlInput_1.getInt(7);
							} else {
								row1.tipo_id = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_1 < 8) {
							row1.tipo_nombre = null;
						} else {

							row1.tipo_nombre = routines.system.JDBCUtil
									.getString(rs_tPostgresqlInput_1, 8, false);
						}
						if (colQtyInRs_tPostgresqlInput_1 < 9) {
							row1.fto_porcentaje = null;
						} else {

							if (rs_tPostgresqlInput_1.getObject(9) != null) {
								row1.fto_porcentaje = rs_tPostgresqlInput_1
										.getInt(9);
							} else {
								row1.fto_porcentaje = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_1 < 10) {
							row1.resp_grupo = null;
						} else {

							row1.resp_grupo = routines.system.JDBCUtil
									.getString(rs_tPostgresqlInput_1, 10, false);
						}
						if (colQtyInRs_tPostgresqlInput_1 < 11) {
							row1.resp_asignatura = null;
						} else {

							if (rs_tPostgresqlInput_1.getObject(11) != null) {
								row1.resp_asignatura = rs_tPostgresqlInput_1
										.getInt(11);
							} else {
								row1.resp_asignatura = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_1 < 12) {
							row1.resp_preg_num = null;
						} else {

							if (rs_tPostgresqlInput_1.getObject(12) != null) {
								row1.resp_preg_num = rs_tPostgresqlInput_1
										.getInt(12);
							} else {
								row1.resp_preg_num = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_1 < 13) {
							row1.resp_fec_registro = null;
						} else {

							row1.resp_fec_registro = routines.system.JDBCUtil
									.getDate(rs_tPostgresqlInput_1, 13);
						}

						/**
						 * [tPostgresqlInput_1 begin ] stop
						 */

						/**
						 * [tPostgresqlInput_1 main ] start
						 */

						currentComponent = "tPostgresqlInput_1";

						tos_count_tPostgresqlInput_1++;

						/**
						 * [tPostgresqlInput_1 main ] stop
						 */

						/**
						 * [tPostgresqlInput_1 process_data_begin ] start
						 */

						currentComponent = "tPostgresqlInput_1";

						/**
						 * [tPostgresqlInput_1 process_data_begin ] stop
						 */

						/**
						 * [tMap_1 main ] start
						 */

						currentComponent = "tMap_1";

						// row1
						// row1

						if (execStat) {
							runStat.updateStatOnConnection("row1" + iterateId,
									1, 1);
						}

						boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_1 = false;
						boolean mainRowRejected_tMap_1 = false;

						// /////////////////////////////////////////////
						// Starting Lookup Table "row2"
						// /////////////////////////////////////////////

						boolean forceLooprow2 = false;

						row2Struct row2ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_1 = false;

							Object exprKeyValue_row2__APE_ANO = row1.resp_anio;
							if (exprKeyValue_row2__APE_ANO == null) {
								hasCasePrimitiveKeyWithNull_tMap_1 = true;
							} else {
								row2HashKey.APE_ANO = (int) (Integer) exprKeyValue_row2__APE_ANO;
							}

							Object exprKeyValue_row2__APE_PER = row1.resp_periodo;
							if (exprKeyValue_row2__APE_PER == null) {
								hasCasePrimitiveKeyWithNull_tMap_1 = true;
							} else {
								row2HashKey.APE_PER = (int) (Integer) exprKeyValue_row2__APE_PER;
							}

							Object exprKeyValue_row2__DOC_NRO_IDEN = row1.resp_identificacion_evaluado;
							if (exprKeyValue_row2__DOC_NRO_IDEN == null) {
								hasCasePrimitiveKeyWithNull_tMap_1 = true;
							} else {
								row2HashKey.DOC_NRO_IDEN = (long) (Long) exprKeyValue_row2__DOC_NRO_IDEN;
							}

							Object exprKeyValue_row2__CUR_CRA_COD = StringHandling
									.BTRIM(row1.resp_grupo).equals("0") ? 0
									: new Integer(StringHandling.LEFT(
											row1.resp_grupo, 3));
							if (exprKeyValue_row2__CUR_CRA_COD == null) {
								hasCasePrimitiveKeyWithNull_tMap_1 = true;
							} else {
								row2HashKey.CUR_CRA_COD = (int) (Integer) exprKeyValue_row2__CUR_CRA_COD;
							}

							Object exprKeyValue_row2__CUR_ASI_COD = row1.resp_asignatura;
							if (exprKeyValue_row2__CUR_ASI_COD == null) {
								hasCasePrimitiveKeyWithNull_tMap_1 = true;
							} else {
								row2HashKey.CUR_ASI_COD = (int) (Integer) exprKeyValue_row2__CUR_ASI_COD;
							}

							row2HashKey.hashCodeDirty = true;

							if (!hasCasePrimitiveKeyWithNull_tMap_1) { // G_TM_M_091

								tHash_Lookup_row2.lookup(row2HashKey);

							} // G_TM_M_091

						} // G_TM_M_020

						if (tHash_Lookup_row2 != null
								&& tHash_Lookup_row2.getCount(row2HashKey) > 1) { // G
																					// 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row2' and it contains more one result from keys :  row2.APE_ANO = '"
							// + row2HashKey.APE_ANO + "', row2.APE_PER = '" +
							// row2HashKey.APE_PER + "', row2.DOC_NRO_IDEN = '"
							// + row2HashKey.DOC_NRO_IDEN +
							// "', row2.CUR_CRA_COD = '" +
							// row2HashKey.CUR_CRA_COD +
							// "', row2.CUR_ASI_COD = '" +
							// row2HashKey.CUR_ASI_COD + "'");
						} // G 071

						row2Struct row2 = null;

						row2Struct fromLookup_row2 = null;
						row2 = row2Default;

						if (tHash_Lookup_row2 != null
								&& tHash_Lookup_row2.hasNext()) { // G 099

							fromLookup_row2 = tHash_Lookup_row2.next();

						} // G 099

						if (fromLookup_row2 != null) {
							row2 = fromLookup_row2;
						}

						// /////////////////////////////////////////////
						// Starting Lookup Table "row3"
						// /////////////////////////////////////////////

						boolean forceLooprow3 = false;

						row3Struct row3ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_1 = false;

							Object exprKeyValue_row3__codigo_proyecto = row1.resp_carrera;
							if (exprKeyValue_row3__codigo_proyecto == null) {
								hasCasePrimitiveKeyWithNull_tMap_1 = true;
							} else {
								row3HashKey.codigo_proyecto = (int) (Integer) exprKeyValue_row3__codigo_proyecto;
							}

							row3HashKey.hashCodeDirty = true;

							if (!hasCasePrimitiveKeyWithNull_tMap_1) { // G_TM_M_091

								tHash_Lookup_row3.lookup(row3HashKey);

							} // G_TM_M_091

						} // G_TM_M_020

						if (tHash_Lookup_row3 != null
								&& tHash_Lookup_row3.getCount(row3HashKey) > 1) { // G
																					// 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row3' and it contains more one result from keys :  row3.codigo_proyecto = '"
							// + row3HashKey.codigo_proyecto + "'");
						} // G 071

						row3Struct row3 = null;

						row3Struct fromLookup_row3 = null;
						row3 = row3Default;

						if (tHash_Lookup_row3 != null
								&& tHash_Lookup_row3.hasNext()) { // G 099

							fromLookup_row3 = tHash_Lookup_row3.next();

						} // G 099

						if (fromLookup_row3 != null) {
							row3 = fromLookup_row3;
						}

						// /////////////////////////////////////////////
						// Starting Lookup Table "row4"
						// /////////////////////////////////////////////

						boolean forceLooprow4 = false;

						row4Struct row4ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_1 = false;

							Object exprKeyValue_row4__codigo_proyecto = row2.CUR_CRA_COD;
							if (exprKeyValue_row4__codigo_proyecto == null) {
								hasCasePrimitiveKeyWithNull_tMap_1 = true;
							} else {
								row4HashKey.codigo_proyecto = (int) (Integer) exprKeyValue_row4__codigo_proyecto;
							}

							row4HashKey.hashCodeDirty = true;

							if (!hasCasePrimitiveKeyWithNull_tMap_1) { // G_TM_M_091

								tHash_Lookup_row4.lookup(row4HashKey);

							} // G_TM_M_091

						} // G_TM_M_020

						if (tHash_Lookup_row4 != null
								&& tHash_Lookup_row4.getCount(row4HashKey) > 1) { // G
																					// 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row4' and it contains more one result from keys :  row4.codigo_proyecto = '"
							// + row4HashKey.codigo_proyecto + "'");
						} // G 071

						row4Struct row4 = null;

						row4Struct fromLookup_row4 = null;
						row4 = row4Default;

						if (tHash_Lookup_row4 != null
								&& tHash_Lookup_row4.hasNext()) { // G 099

							fromLookup_row4 = tHash_Lookup_row4.next();

						} // G 099

						if (fromLookup_row4 != null) {
							row4 = fromLookup_row4;
						}

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
							// ###############################
							// # Output tables

							evaluacion = null;

							// # Output table : 'evaluacion'
							evaluacion_tmp.id = Numeric.sequence("s1",
									131868611, 1);
							evaluacion_tmp.anno = row1.resp_anio;
							evaluacion_tmp.semestre = row1.resp_periodo;
							evaluacion_tmp.codigo_docente = row1.resp_identificacion_evaluado;
							evaluacion_tmp.codigo_proyecto_estudiante = row1.resp_carrera;
							evaluacion_tmp.proyecto_estudiante = row3.proyecto == null ? null
									: TalendString.removeAccents(row3.proyecto);
							evaluacion_tmp.codigo_facultad_estudiante = row3.codigo_facultad;
							evaluacion_tmp.facultad_estudiante = row3.facultad;
							evaluacion_tmp.estudiante = row1.resp_identificacion_evaluador;
							evaluacion_tmp.grupo = row1.resp_grupo;
							evaluacion_tmp.codigo_asignatura = row1.resp_asignatura;
							evaluacion_tmp.codigo_proyecto = row4.codigo_proyecto;
							evaluacion_tmp.proyecto = row4.proyecto;
							evaluacion_tmp.docente = row2.NOMBRE;
							evaluacion_tmp.codigo_facultad = row4.codigo_facultad;
							evaluacion_tmp.facultad = row4.facultad;
							evaluacion_tmp.asignatura = row2.ASI_NOMBRE;
							evaluacion_tmp.respuesta = row1.resp_respuesta;
							evaluacion_tmp.nivel = row2.TRA_NIVEL;
							evaluacion_tmp.fecha_registro = row1.resp_fec_registro;
							evaluacion_tmp.codigo_tipo_evaluacion = row1.tipo_id;
							evaluacion_tmp.tipo_evaluacion = row1.tipo_nombre;
							evaluacion_tmp.porcentaje_evaluacion = row1.fto_porcentaje;
							evaluacion_tmp.numero_pregunta = row1.resp_preg_num;
							evaluacion_tmp.fecha_carga = TalendDate.parseDate(
									"dd-MM-yyyy",
									TalendDate.getDate("dd-MM-yyyy"));
							evaluacion = evaluacion_tmp;
							// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_1 = false;

						tos_count_tMap_1++;

						/**
						 * [tMap_1 main ] stop
						 */

						/**
						 * [tMap_1 process_data_begin ] start
						 */

						currentComponent = "tMap_1";

						/**
						 * [tMap_1 process_data_begin ] stop
						 */
						// Start of branch "evaluacion"
						if (evaluacion != null) {

							/**
							 * [tPostgresqlOutput_1 main ] start
							 */

							currentComponent = "tPostgresqlOutput_1";

							// evaluacion
							// evaluacion

							if (execStat) {
								runStat.updateStatOnConnection("evaluacion"
										+ iterateId, 1, 1);
							}

							whetherReject_tPostgresqlOutput_1 = false;
							pstmt_tPostgresqlOutput_1
									.setInt(1, evaluacion.anno);

							pstmt_tPostgresqlOutput_1.setInt(2,
									evaluacion.semestre);

							pstmt_tPostgresqlOutput_1.setLong(3,
									evaluacion.codigo_docente);

							pstmt_tPostgresqlOutput_1.setInt(4,
									evaluacion.codigo_proyecto_estudiante);

							if (evaluacion.proyecto_estudiante == null) {
								pstmt_tPostgresqlOutput_1.setNull(5,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tPostgresqlOutput_1.setString(5,
										evaluacion.proyecto_estudiante);
							}

							if (evaluacion.codigo_facultad_estudiante == null) {
								pstmt_tPostgresqlOutput_1.setNull(6,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tPostgresqlOutput_1.setInt(6,
										evaluacion.codigo_facultad_estudiante);
							}

							if (evaluacion.facultad_estudiante == null) {
								pstmt_tPostgresqlOutput_1.setNull(7,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tPostgresqlOutput_1.setString(7,
										evaluacion.facultad_estudiante);
							}

							pstmt_tPostgresqlOutput_1.setLong(8,
									evaluacion.estudiante);

							if (evaluacion.grupo == null) {
								pstmt_tPostgresqlOutput_1.setNull(9,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tPostgresqlOutput_1.setString(9,
										evaluacion.grupo);
							}

							if (evaluacion.codigo_asignatura == null) {
								pstmt_tPostgresqlOutput_1.setNull(10,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tPostgresqlOutput_1.setInt(10,
										evaluacion.codigo_asignatura);
							}

							if (evaluacion.codigo_proyecto == null) {
								pstmt_tPostgresqlOutput_1.setNull(11,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tPostgresqlOutput_1.setInt(11,
										evaluacion.codigo_proyecto);
							}

							if (evaluacion.proyecto == null) {
								pstmt_tPostgresqlOutput_1.setNull(12,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tPostgresqlOutput_1.setString(12,
										evaluacion.proyecto);
							}

							if (evaluacion.docente == null) {
								pstmt_tPostgresqlOutput_1.setNull(13,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tPostgresqlOutput_1.setString(13,
										evaluacion.docente);
							}

							if (evaluacion.codigo_facultad == null) {
								pstmt_tPostgresqlOutput_1.setNull(14,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tPostgresqlOutput_1.setInt(14,
										evaluacion.codigo_facultad);
							}

							if (evaluacion.facultad == null) {
								pstmt_tPostgresqlOutput_1.setNull(15,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tPostgresqlOutput_1.setString(15,
										evaluacion.facultad);
							}

							if (evaluacion.asignatura == null) {
								pstmt_tPostgresqlOutput_1.setNull(16,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tPostgresqlOutput_1.setString(16,
										evaluacion.asignatura);
							}

							if (evaluacion.respuesta == null) {
								pstmt_tPostgresqlOutput_1.setNull(17,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tPostgresqlOutput_1.setInt(17,
										evaluacion.respuesta);
							}

							if (evaluacion.nivel == null) {
								pstmt_tPostgresqlOutput_1.setNull(18,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tPostgresqlOutput_1.setString(18,
										evaluacion.nivel);
							}

							if (evaluacion.fecha_registro != null) {
								pstmt_tPostgresqlOutput_1.setTimestamp(
										19,
										new java.sql.Timestamp(
												evaluacion.fecha_registro
														.getTime()));
							} else {
								pstmt_tPostgresqlOutput_1.setNull(19,
										java.sql.Types.TIMESTAMP);
							}

							pstmt_tPostgresqlOutput_1.setInt(20,
									evaluacion.codigo_tipo_evaluacion);

							if (evaluacion.tipo_evaluacion == null) {
								pstmt_tPostgresqlOutput_1.setNull(21,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tPostgresqlOutput_1.setString(21,
										evaluacion.tipo_evaluacion);
							}

							pstmt_tPostgresqlOutput_1.setInt(22,
									evaluacion.porcentaje_evaluacion);

							if (evaluacion.numero_pregunta == null) {
								pstmt_tPostgresqlOutput_1.setNull(23,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tPostgresqlOutput_1.setInt(23,
										evaluacion.numero_pregunta);
							}

							if (evaluacion.fecha_carga != null) {
								pstmt_tPostgresqlOutput_1.setTimestamp(
										24,
										new java.sql.Timestamp(
												evaluacion.fecha_carga
														.getTime()));
							} else {
								pstmt_tPostgresqlOutput_1.setNull(24,
										java.sql.Types.TIMESTAMP);
							}

							try {
								nb_line_tPostgresqlOutput_1++;

								insertedCount_tPostgresqlOutput_1 = insertedCount_tPostgresqlOutput_1
										+ pstmt_tPostgresqlOutput_1
												.executeUpdate();

							} catch (java.lang.Exception e) {

								whetherReject_tPostgresqlOutput_1 = true;
								throw (e);
							}

							tos_count_tPostgresqlOutput_1++;

							/**
							 * [tPostgresqlOutput_1 main ] stop
							 */

							/**
							 * [tPostgresqlOutput_1 process_data_begin ] start
							 */

							currentComponent = "tPostgresqlOutput_1";

							/**
							 * [tPostgresqlOutput_1 process_data_begin ] stop
							 */

							/**
							 * [tPostgresqlOutput_1 process_data_end ] start
							 */

							currentComponent = "tPostgresqlOutput_1";

							/**
							 * [tPostgresqlOutput_1 process_data_end ] stop
							 */

						} // End of branch "evaluacion"

						/**
						 * [tMap_1 process_data_end ] start
						 */

						currentComponent = "tMap_1";

						/**
						 * [tMap_1 process_data_end ] stop
						 */

						/**
						 * [tPostgresqlInput_1 process_data_end ] start
						 */

						currentComponent = "tPostgresqlInput_1";

						/**
						 * [tPostgresqlInput_1 process_data_end ] stop
						 */

						/**
						 * [tPostgresqlInput_1 end ] start
						 */

						currentComponent = "tPostgresqlInput_1";

					}
				} finally {
					if (rs_tPostgresqlInput_1 != null) {
						rs_tPostgresqlInput_1.close();
					}
					if (stmt_tPostgresqlInput_1 != null) {
						stmt_tPostgresqlInput_1.close();
					}
				}
				globalMap.put("tPostgresqlInput_1_NB_LINE",
						nb_line_tPostgresqlInput_1);

				ok_Hash.put("tPostgresqlInput_1", true);
				end_Hash.put("tPostgresqlInput_1", System.currentTimeMillis());

				/**
				 * [tPostgresqlInput_1 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row2 != null) {
					tHash_Lookup_row2.endGet();
				}
				globalMap.remove("tHash_Lookup_row2");

				if (tHash_Lookup_row3 != null) {
					tHash_Lookup_row3.endGet();
				}
				globalMap.remove("tHash_Lookup_row3");

				if (tHash_Lookup_row4 != null) {
					tHash_Lookup_row4.endGet();
				}
				globalMap.remove("tHash_Lookup_row4");

				// ###############################

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row1" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tPostgresqlOutput_1 end ] start
				 */

				currentComponent = "tPostgresqlOutput_1";

				if (pstmt_tPostgresqlOutput_1 != null) {

					pstmt_tPostgresqlOutput_1.close();
					resourceMap.remove("pstmt_tPostgresqlOutput_1");
				}
				resourceMap.put("statementClosed_tPostgresqlOutput_1", true);

				nb_line_deleted_tPostgresqlOutput_1 = nb_line_deleted_tPostgresqlOutput_1
						+ deletedCount_tPostgresqlOutput_1;
				nb_line_update_tPostgresqlOutput_1 = nb_line_update_tPostgresqlOutput_1
						+ updatedCount_tPostgresqlOutput_1;
				nb_line_inserted_tPostgresqlOutput_1 = nb_line_inserted_tPostgresqlOutput_1
						+ insertedCount_tPostgresqlOutput_1;
				nb_line_rejected_tPostgresqlOutput_1 = nb_line_rejected_tPostgresqlOutput_1
						+ rejectedCount_tPostgresqlOutput_1;

				globalMap.put("tPostgresqlOutput_1_NB_LINE",
						nb_line_tPostgresqlOutput_1);
				globalMap.put("tPostgresqlOutput_1_NB_LINE_UPDATED",
						nb_line_update_tPostgresqlOutput_1);
				globalMap.put("tPostgresqlOutput_1_NB_LINE_INSERTED",
						nb_line_inserted_tPostgresqlOutput_1);
				globalMap.put("tPostgresqlOutput_1_NB_LINE_DELETED",
						nb_line_deleted_tPostgresqlOutput_1);
				globalMap.put("tPostgresqlOutput_1_NB_LINE_REJECTED",
						nb_line_rejected_tPostgresqlOutput_1);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection(
								"evaluacion" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tPostgresqlOutput_1", true);
				end_Hash.put("tPostgresqlOutput_1", System.currentTimeMillis());

				/**
				 * [tPostgresqlOutput_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_row2");

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_row3");

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_row4");

			try {

				/**
				 * [tPostgresqlInput_1 finally ] start
				 */

				currentComponent = "tPostgresqlInput_1";

				/**
				 * [tPostgresqlInput_1 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tPostgresqlOutput_1 finally ] start
				 */

				currentComponent = "tPostgresqlOutput_1";

				if (resourceMap.get("statementClosed_tPostgresqlOutput_1") == null) {
					java.sql.PreparedStatement pstmtToClose_tPostgresqlOutput_1 = null;
					if ((pstmtToClose_tPostgresqlOutput_1 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmt_tPostgresqlOutput_1")) != null) {
						pstmtToClose_tPostgresqlOutput_1.close();
					}
				}

				/**
				 * [tPostgresqlOutput_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostgresqlInput_1_SUBPROCESS_STATE", 1);
	}

	public static class row2Struct implements
			routines.system.IPersistableComparableLookupRow<row2Struct> {
		final static byte[] commonByteArrayLock_DMINDICADORES_evaluacion_docente_parcial_temporal = new byte[0];
		static byte[] commonByteArray_DMINDICADORES_evaluacion_docente_parcial_temporal = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int APE_ANO;

		public int getAPE_ANO() {
			return this.APE_ANO;
		}

		public int APE_PER;

		public int getAPE_PER() {
			return this.APE_PER;
		}

		public long DOC_NRO_IDEN;

		public long getDOC_NRO_IDEN() {
			return this.DOC_NRO_IDEN;
		}

		public String NOMBRE;

		public String getNOMBRE() {
			return this.NOMBRE;
		}

		public int DEP_COD;

		public int getDEP_COD() {
			return this.DEP_COD;
		}

		public String DEP_NOMBRE;

		public String getDEP_NOMBRE() {
			return this.DEP_NOMBRE;
		}

		public int CUR_CRA_COD;

		public int getCUR_CRA_COD() {
			return this.CUR_CRA_COD;
		}

		public String CRA_NOMBRE;

		public String getCRA_NOMBRE() {
			return this.CRA_NOMBRE;
		}

		public Integer CAR_TIP_VIN;

		public Integer getCAR_TIP_VIN() {
			return this.CAR_TIP_VIN;
		}

		public String TVI_NOMBRE;

		public String getTVI_NOMBRE() {
			return this.TVI_NOMBRE;
		}

		public int CUR_ASI_COD;

		public int getCUR_ASI_COD() {
			return this.CUR_ASI_COD;
		}

		public String ASI_NOMBRE;

		public String getASI_NOMBRE() {
			return this.ASI_NOMBRE;
		}

		public String _LPAD_CUR_CRA_COD_3_0________CUR_GRUPO_;

		public String get_LPAD_CUR_CRA_COD_3_0________CUR_GRUPO_() {
			return this._LPAD_CUR_CRA_COD_3_0________CUR_GRUPO_;
		}

		public Integer CUR_NRO_INS;

		public Integer getCUR_NRO_INS() {
			return this.CUR_NRO_INS;
		}

		public String TRA_NIVEL;

		public String getTRA_NIVEL() {
			return this.TRA_NIVEL;
		}

		public BigDecimal CUR_ID;

		public BigDecimal getCUR_ID() {
			return this.CUR_ID;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.APE_ANO;

				result = prime * result + (int) this.APE_PER;

				result = prime * result + (int) this.DOC_NRO_IDEN;

				result = prime * result + (int) this.CUR_CRA_COD;

				result = prime * result + (int) this.CUR_ASI_COD;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row2Struct other = (row2Struct) obj;

			if (this.APE_ANO != other.APE_ANO)
				return false;

			if (this.APE_PER != other.APE_PER)
				return false;

			if (this.DOC_NRO_IDEN != other.DOC_NRO_IDEN)
				return false;

			if (this.CUR_CRA_COD != other.CUR_CRA_COD)
				return false;

			if (this.CUR_ASI_COD != other.CUR_ASI_COD)
				return false;

			return true;
		}

		public void copyDataTo(row2Struct other) {

			other.APE_ANO = this.APE_ANO;
			other.APE_PER = this.APE_PER;
			other.DOC_NRO_IDEN = this.DOC_NRO_IDEN;
			other.NOMBRE = this.NOMBRE;
			other.DEP_COD = this.DEP_COD;
			other.DEP_NOMBRE = this.DEP_NOMBRE;
			other.CUR_CRA_COD = this.CUR_CRA_COD;
			other.CRA_NOMBRE = this.CRA_NOMBRE;
			other.CAR_TIP_VIN = this.CAR_TIP_VIN;
			other.TVI_NOMBRE = this.TVI_NOMBRE;
			other.CUR_ASI_COD = this.CUR_ASI_COD;
			other.ASI_NOMBRE = this.ASI_NOMBRE;
			other._LPAD_CUR_CRA_COD_3_0________CUR_GRUPO_ = this._LPAD_CUR_CRA_COD_3_0________CUR_GRUPO_;
			other.CUR_NRO_INS = this.CUR_NRO_INS;
			other.TRA_NIVEL = this.TRA_NIVEL;
			other.CUR_ID = this.CUR_ID;

		}

		public void copyKeysDataTo(row2Struct other) {

			other.APE_ANO = this.APE_ANO;
			other.APE_PER = this.APE_PER;
			other.DOC_NRO_IDEN = this.DOC_NRO_IDEN;
			other.CUR_CRA_COD = this.CUR_CRA_COD;
			other.CUR_ASI_COD = this.CUR_ASI_COD;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DMINDICADORES_evaluacion_docente_parcial_temporal) {

				try {

					int length = 0;

					this.APE_ANO = dis.readInt();

					this.APE_PER = dis.readInt();

					this.DOC_NRO_IDEN = dis.readLong();

					this.CUR_CRA_COD = dis.readInt();

					this.CUR_ASI_COD = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.APE_ANO);

				// int

				dos.writeInt(this.APE_PER);

				// long

				dos.writeLong(this.DOC_NRO_IDEN);

				// int

				dos.writeInt(this.CUR_CRA_COD);

				// int

				dos.writeInt(this.CUR_ASI_COD);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.NOMBRE = readString(dis, ois);

				this.DEP_COD = dis.readInt();

				this.DEP_NOMBRE = readString(dis, ois);

				this.CRA_NOMBRE = readString(dis, ois);

				this.CAR_TIP_VIN = readInteger(dis, ois);

				this.TVI_NOMBRE = readString(dis, ois);

				this.ASI_NOMBRE = readString(dis, ois);

				this._LPAD_CUR_CRA_COD_3_0________CUR_GRUPO_ = readString(dis,
						ois);

				this.CUR_NRO_INS = readInteger(dis, ois);

				this.TRA_NIVEL = readString(dis, ois);

				this.CUR_ID = (BigDecimal) ois.readObject();

			} catch (IOException e) {
				throw new RuntimeException(e);

			} catch (ClassNotFoundException eCNFE) {
				throw new RuntimeException(eCNFE);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.NOMBRE, dos, oos);

				dos.writeInt(this.DEP_COD);

				writeString(this.DEP_NOMBRE, dos, oos);

				writeString(this.CRA_NOMBRE, dos, oos);

				writeInteger(this.CAR_TIP_VIN, dos, oos);

				writeString(this.TVI_NOMBRE, dos, oos);

				writeString(this.ASI_NOMBRE, dos, oos);

				writeString(this._LPAD_CUR_CRA_COD_3_0________CUR_GRUPO_, dos,
						oos);

				writeInteger(this.CUR_NRO_INS, dos, oos);

				writeString(this.TRA_NIVEL, dos, oos);

				oos.writeObject(this.CUR_ID);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("APE_ANO=" + String.valueOf(APE_ANO));
			sb.append(",APE_PER=" + String.valueOf(APE_PER));
			sb.append(",DOC_NRO_IDEN=" + String.valueOf(DOC_NRO_IDEN));
			sb.append(",NOMBRE=" + NOMBRE);
			sb.append(",DEP_COD=" + String.valueOf(DEP_COD));
			sb.append(",DEP_NOMBRE=" + DEP_NOMBRE);
			sb.append(",CUR_CRA_COD=" + String.valueOf(CUR_CRA_COD));
			sb.append(",CRA_NOMBRE=" + CRA_NOMBRE);
			sb.append(",CAR_TIP_VIN=" + String.valueOf(CAR_TIP_VIN));
			sb.append(",TVI_NOMBRE=" + TVI_NOMBRE);
			sb.append(",CUR_ASI_COD=" + String.valueOf(CUR_ASI_COD));
			sb.append(",ASI_NOMBRE=" + ASI_NOMBRE);
			sb.append(",_LPAD_CUR_CRA_COD_3_0________CUR_GRUPO_="
					+ _LPAD_CUR_CRA_COD_3_0________CUR_GRUPO_);
			sb.append(",CUR_NRO_INS=" + String.valueOf(CUR_NRO_INS));
			sb.append(",TRA_NIVEL=" + TRA_NIVEL);
			sb.append(",CUR_ID=" + String.valueOf(CUR_ID));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.APE_ANO, other.APE_ANO);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.APE_PER, other.APE_PER);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.DOC_NRO_IDEN,
					other.DOC_NRO_IDEN);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.CUR_CRA_COD,
					other.CUR_CRA_COD);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.CUR_ASI_COD,
					other.CUR_ASI_COD);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tOracleInput_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tOracleInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row2Struct row2 = new row2Struct();

				/**
				 * [tAdvancedHash_row2 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row2", false);
				start_Hash
						.put("tAdvancedHash_row2", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row2";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row2" + iterateId, 0, 0);

					}
				}

				int tos_count_tAdvancedHash_row2 = 0;

				// connection name:row2
				// source node:tOracleInput_1 -
				// inputs:(after_tPostgresqlInput_1) outputs:(row2,row2) |
				// target node:tAdvancedHash_row2 - inputs:(row2) outputs:()
				// linked node: tMap_1 - inputs:(row1,row2,row3,row4)
				// outputs:(evaluacion)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row2 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row2Struct> getLookup(matchingModeEnum_row2);

				globalMap.put("tHash_Lookup_row2", tHash_Lookup_row2);

				/**
				 * [tAdvancedHash_row2 begin ] stop
				 */

				/**
				 * [tOracleInput_1 begin ] start
				 */

				ok_Hash.put("tOracleInput_1", false);
				start_Hash.put("tOracleInput_1", System.currentTimeMillis());

				currentComponent = "tOracleInput_1";

				int tos_count_tOracleInput_1 = 0;

				int nb_line_tOracleInput_1 = 0;
				java.sql.Connection conn_tOracleInput_1 = null;
				conn_tOracleInput_1 = (java.sql.Connection) globalMap
						.get("conn_tOracleConnection_1");

				boolean isTimeZoneNull_tOracleInput_1 = false;
				boolean isConnectionWrapped_tOracleInput_1 = !(conn_tOracleInput_1 instanceof oracle.jdbc.OracleConnection)
						&& conn_tOracleInput_1
								.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_1 = null;
				if (isConnectionWrapped_tOracleInput_1) {
					unwrappedOraConn_tOracleInput_1 = conn_tOracleInput_1
							.unwrap(oracle.jdbc.OracleConnection.class);
					if (unwrappedOraConn_tOracleInput_1 != null) {
						isTimeZoneNull_tOracleInput_1 = (unwrappedOraConn_tOracleInput_1
								.getSessionTimeZone() == null);
					}
				} else {
					isTimeZoneNull_tOracleInput_1 = (((oracle.jdbc.OracleConnection) conn_tOracleInput_1)
							.getSessionTimeZone() == null);
				}

				if (isTimeZoneNull_tOracleInput_1) {
					java.sql.Statement stmtGetTZ_tOracleInput_1 = conn_tOracleInput_1
							.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_1 = stmtGetTZ_tOracleInput_1
							.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_1 = java.util.TimeZone
							.getDefault().getID();
					while (rsGetTZ_tOracleInput_1.next()) {
						sessionTimezone_tOracleInput_1 = rsGetTZ_tOracleInput_1
								.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_1
							&& unwrappedOraConn_tOracleInput_1 != null) {
						unwrappedOraConn_tOracleInput_1
								.setSessionTimeZone(sessionTimezone_tOracleInput_1);
					} else {
						((oracle.jdbc.OracleConnection) conn_tOracleInput_1)
								.setSessionTimeZone(sessionTimezone_tOracleInput_1);
					}
				}

				java.sql.Statement stmt_tOracleInput_1 = conn_tOracleInput_1
						.createStatement();

				String dbquery_tOracleInput_1 = "SELECT distinct ape_ano,ape_per, DOC_NRO_IDEN,\nLTRIM(doc_apellido||'  '||doc_nombre) nombre,\ndep_cod, \ndep_nombre,\ncur_"
						+ "cra_cod,\ncra_nombre,\ncar_tip_vin,\ntvi_nombre,\ncur_asi_cod,\nasi_nombre,\n(lpad(cur_cra_cod,3,0)||'-'||cur_grupo),\ncur_nro_"
						+ "ins,\ntra_nivel,\n    cur_id\nFROM mntac.accargas,mntac.acdocente,mntac.actipvin,mntac.acasi,accra a,mntac.gedep,mntac.accu"
						+ "rsos,\n mntac.achorarios,mntac.acasperi b,mntac.ACTIPCRA\nWHERE dep_cod = cra_dep_cod\nAND car_tip_vin = tvi_cod\nAND asi_co"
						+ "d = cur_asi_cod \nAND cur_ape_ano = 2018\nAND cur_ape_per = 3\nand ape_ano=cur_ape_ano\nand ape_per=cur_ape_per\nAND car_hor_"
						+ "id = hor_id\nAND hor_id_curso=cur_id\nAND cra_cod = cur_cra_cod\nAND car_doc_nro = doc_nro_iden\nAND cra_tip_cra=tra_cod\nORD"
						+ "ER BY dep_cod, cur_cra_cod, cur_asi_cod, cur_id ASC";

				globalMap.put("tOracleInput_1_QUERY", dbquery_tOracleInput_1);
				java.sql.ResultSet rs_tOracleInput_1 = null;

				try {
					rs_tOracleInput_1 = stmt_tOracleInput_1
							.executeQuery(dbquery_tOracleInput_1);
					java.sql.ResultSetMetaData rsmd_tOracleInput_1 = rs_tOracleInput_1
							.getMetaData();
					int colQtyInRs_tOracleInput_1 = rsmd_tOracleInput_1
							.getColumnCount();

					String tmpContent_tOracleInput_1 = null;

					while (rs_tOracleInput_1.next()) {
						nb_line_tOracleInput_1++;

						if (colQtyInRs_tOracleInput_1 < 1) {
							row2.APE_ANO = 0;
						} else {

							if (rs_tOracleInput_1.getObject(1) != null) {
								row2.APE_ANO = rs_tOracleInput_1.getInt(1);
							} else {

								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tOracleInput_1 < 2) {
							row2.APE_PER = 0;
						} else {

							if (rs_tOracleInput_1.getObject(2) != null) {
								row2.APE_PER = rs_tOracleInput_1.getInt(2);
							} else {

								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tOracleInput_1 < 3) {
							row2.DOC_NRO_IDEN = 0;
						} else {

							if (rs_tOracleInput_1.getObject(3) != null) {
								row2.DOC_NRO_IDEN = rs_tOracleInput_1
										.getLong(3);
							} else {

								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tOracleInput_1 < 4) {
							row2.NOMBRE = null;
						} else {

							row2.NOMBRE = routines.system.JDBCUtil.getString(
									rs_tOracleInput_1, 4, false);
						}
						if (colQtyInRs_tOracleInput_1 < 5) {
							row2.DEP_COD = 0;
						} else {

							if (rs_tOracleInput_1.getObject(5) != null) {
								row2.DEP_COD = rs_tOracleInput_1.getInt(5);
							} else {

								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tOracleInput_1 < 6) {
							row2.DEP_NOMBRE = null;
						} else {

							row2.DEP_NOMBRE = routines.system.JDBCUtil
									.getString(rs_tOracleInput_1, 6, false);
						}
						if (colQtyInRs_tOracleInput_1 < 7) {
							row2.CUR_CRA_COD = 0;
						} else {

							if (rs_tOracleInput_1.getObject(7) != null) {
								row2.CUR_CRA_COD = rs_tOracleInput_1.getInt(7);
							} else {

								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tOracleInput_1 < 8) {
							row2.CRA_NOMBRE = null;
						} else {

							row2.CRA_NOMBRE = routines.system.JDBCUtil
									.getString(rs_tOracleInput_1, 8, false);
						}
						if (colQtyInRs_tOracleInput_1 < 9) {
							row2.CAR_TIP_VIN = null;
						} else {

							if (rs_tOracleInput_1.getObject(9) != null) {
								row2.CAR_TIP_VIN = rs_tOracleInput_1.getInt(9);
							} else {

								row2.CAR_TIP_VIN = null;
							}
						}
						if (colQtyInRs_tOracleInput_1 < 10) {
							row2.TVI_NOMBRE = null;
						} else {

							row2.TVI_NOMBRE = routines.system.JDBCUtil
									.getString(rs_tOracleInput_1, 10, false);
						}
						if (colQtyInRs_tOracleInput_1 < 11) {
							row2.CUR_ASI_COD = 0;
						} else {

							if (rs_tOracleInput_1.getObject(11) != null) {
								row2.CUR_ASI_COD = rs_tOracleInput_1.getInt(11);
							} else {

								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tOracleInput_1 < 12) {
							row2.ASI_NOMBRE = null;
						} else {

							row2.ASI_NOMBRE = routines.system.JDBCUtil
									.getString(rs_tOracleInput_1, 12, false);
						}
						if (colQtyInRs_tOracleInput_1 < 13) {
							row2._LPAD_CUR_CRA_COD_3_0________CUR_GRUPO_ = null;
						} else {

							row2._LPAD_CUR_CRA_COD_3_0________CUR_GRUPO_ = routines.system.JDBCUtil
									.getString(rs_tOracleInput_1, 13, false);
						}
						if (colQtyInRs_tOracleInput_1 < 14) {
							row2.CUR_NRO_INS = null;
						} else {

							if (rs_tOracleInput_1.getObject(14) != null) {
								row2.CUR_NRO_INS = rs_tOracleInput_1.getInt(14);
							} else {

								row2.CUR_NRO_INS = null;
							}
						}
						if (colQtyInRs_tOracleInput_1 < 15) {
							row2.TRA_NIVEL = null;
						} else {

							row2.TRA_NIVEL = routines.system.JDBCUtil
									.getString(rs_tOracleInput_1, 15, false);
						}
						if (colQtyInRs_tOracleInput_1 < 16) {
							row2.CUR_ID = null;
						} else {

							if (rs_tOracleInput_1.getObject(16) != null) {
								row2.CUR_ID = rs_tOracleInput_1
										.getBigDecimal(16);
							} else {

								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}

						/**
						 * [tOracleInput_1 begin ] stop
						 */

						/**
						 * [tOracleInput_1 main ] start
						 */

						currentComponent = "tOracleInput_1";

						tos_count_tOracleInput_1++;

						/**
						 * [tOracleInput_1 main ] stop
						 */

						/**
						 * [tOracleInput_1 process_data_begin ] start
						 */

						currentComponent = "tOracleInput_1";

						/**
						 * [tOracleInput_1 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row2 main ] start
						 */

						currentComponent = "tAdvancedHash_row2";

						// row2
						// row2

						if (execStat) {
							runStat.updateStatOnConnection("row2" + iterateId,
									1, 1);
						}

						row2Struct row2_HashRow = new row2Struct();

						row2_HashRow.APE_ANO = row2.APE_ANO;

						row2_HashRow.APE_PER = row2.APE_PER;

						row2_HashRow.DOC_NRO_IDEN = row2.DOC_NRO_IDEN;

						row2_HashRow.NOMBRE = row2.NOMBRE;

						row2_HashRow.DEP_COD = row2.DEP_COD;

						row2_HashRow.DEP_NOMBRE = row2.DEP_NOMBRE;

						row2_HashRow.CUR_CRA_COD = row2.CUR_CRA_COD;

						row2_HashRow.CRA_NOMBRE = row2.CRA_NOMBRE;

						row2_HashRow.CAR_TIP_VIN = row2.CAR_TIP_VIN;

						row2_HashRow.TVI_NOMBRE = row2.TVI_NOMBRE;

						row2_HashRow.CUR_ASI_COD = row2.CUR_ASI_COD;

						row2_HashRow.ASI_NOMBRE = row2.ASI_NOMBRE;

						row2_HashRow._LPAD_CUR_CRA_COD_3_0________CUR_GRUPO_ = row2._LPAD_CUR_CRA_COD_3_0________CUR_GRUPO_;

						row2_HashRow.CUR_NRO_INS = row2.CUR_NRO_INS;

						row2_HashRow.TRA_NIVEL = row2.TRA_NIVEL;

						row2_HashRow.CUR_ID = row2.CUR_ID;

						tHash_Lookup_row2.put(row2_HashRow);

						tos_count_tAdvancedHash_row2++;

						/**
						 * [tAdvancedHash_row2 main ] stop
						 */

						/**
						 * [tAdvancedHash_row2 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_row2";

						/**
						 * [tAdvancedHash_row2 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row2 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_row2";

						/**
						 * [tAdvancedHash_row2 process_data_end ] stop
						 */

						/**
						 * [tOracleInput_1 process_data_end ] start
						 */

						currentComponent = "tOracleInput_1";

						/**
						 * [tOracleInput_1 process_data_end ] stop
						 */

						/**
						 * [tOracleInput_1 end ] start
						 */

						currentComponent = "tOracleInput_1";

					}
				} finally {
					if (rs_tOracleInput_1 != null) {
						rs_tOracleInput_1.close();
					}
					if (stmt_tOracleInput_1 != null) {
						stmt_tOracleInput_1.close();
					}
				}

				globalMap.put("tOracleInput_1_NB_LINE", nb_line_tOracleInput_1);

				ok_Hash.put("tOracleInput_1", true);
				end_Hash.put("tOracleInput_1", System.currentTimeMillis());

				/**
				 * [tOracleInput_1 end ] stop
				 */

				/**
				 * [tAdvancedHash_row2 end ] start
				 */

				currentComponent = "tAdvancedHash_row2";

				tHash_Lookup_row2.endPut();

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row2" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tAdvancedHash_row2", true);
				end_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row2 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tOracleInput_1 finally ] start
				 */

				currentComponent = "tOracleInput_1";

				/**
				 * [tOracleInput_1 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row2 finally ] start
				 */

				currentComponent = "tAdvancedHash_row2";

				/**
				 * [tAdvancedHash_row2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tOracleInput_1_SUBPROCESS_STATE", 1);
	}

	public static class row3Struct implements
			routines.system.IPersistableComparableLookupRow<row3Struct> {
		final static byte[] commonByteArrayLock_DMINDICADORES_evaluacion_docente_parcial_temporal = new byte[0];
		static byte[] commonByteArray_DMINDICADORES_evaluacion_docente_parcial_temporal = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int codigo_proyecto;

		public int getCodigo_proyecto() {
			return this.codigo_proyecto;
		}

		public String proyecto;

		public String getProyecto() {
			return this.proyecto;
		}

		public Integer codigo_proyecto_snies;

		public Integer getCodigo_proyecto_snies() {
			return this.codigo_proyecto_snies;
		}

		public String proyecto_snies;

		public String getProyecto_snies() {
			return this.proyecto_snies;
		}

		public Integer codigo_facultad;

		public Integer getCodigo_facultad() {
			return this.codigo_facultad;
		}

		public String facultad;

		public String getFacultad() {
			return this.facultad;
		}

		public String modalidad;

		public String getModalidad() {
			return this.modalidad;
		}

		public String nivel;

		public String getNivel() {
			return this.nivel;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.codigo_proyecto;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row3Struct other = (row3Struct) obj;

			if (this.codigo_proyecto != other.codigo_proyecto)
				return false;

			return true;
		}

		public void copyDataTo(row3Struct other) {

			other.codigo_proyecto = this.codigo_proyecto;
			other.proyecto = this.proyecto;
			other.codigo_proyecto_snies = this.codigo_proyecto_snies;
			other.proyecto_snies = this.proyecto_snies;
			other.codigo_facultad = this.codigo_facultad;
			other.facultad = this.facultad;
			other.modalidad = this.modalidad;
			other.nivel = this.nivel;

		}

		public void copyKeysDataTo(row3Struct other) {

			other.codigo_proyecto = this.codigo_proyecto;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DMINDICADORES_evaluacion_docente_parcial_temporal) {

				try {

					int length = 0;

					this.codigo_proyecto = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.codigo_proyecto);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.proyecto = readString(dis, ois);

				this.codigo_proyecto_snies = readInteger(dis, ois);

				this.proyecto_snies = readString(dis, ois);

				this.codigo_facultad = readInteger(dis, ois);

				this.facultad = readString(dis, ois);

				this.modalidad = readString(dis, ois);

				this.nivel = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.proyecto, dos, oos);

				writeInteger(this.codigo_proyecto_snies, dos, oos);

				writeString(this.proyecto_snies, dos, oos);

				writeInteger(this.codigo_facultad, dos, oos);

				writeString(this.facultad, dos, oos);

				writeString(this.modalidad, dos, oos);

				writeString(this.nivel, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("codigo_proyecto=" + String.valueOf(codigo_proyecto));
			sb.append(",proyecto=" + proyecto);
			sb.append(",codigo_proyecto_snies="
					+ String.valueOf(codigo_proyecto_snies));
			sb.append(",proyecto_snies=" + proyecto_snies);
			sb.append(",codigo_facultad=" + String.valueOf(codigo_facultad));
			sb.append(",facultad=" + facultad);
			sb.append(",modalidad=" + modalidad);
			sb.append(",nivel=" + nivel);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.codigo_proyecto,
					other.codigo_proyecto);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tPostgresqlInput_3Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlInput_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row3Struct row3 = new row3Struct();

				/**
				 * [tAdvancedHash_row3 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row3", false);
				start_Hash
						.put("tAdvancedHash_row3", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row3";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row3" + iterateId, 0, 0);

					}
				}

				int tos_count_tAdvancedHash_row3 = 0;

				// connection name:row3
				// source node:tPostgresqlInput_3 -
				// inputs:(after_tPostgresqlInput_1) outputs:(row3,row3) |
				// target node:tAdvancedHash_row3 - inputs:(row3) outputs:()
				// linked node: tMap_1 - inputs:(row1,row2,row3,row4)
				// outputs:(evaluacion)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row3 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct> tHash_Lookup_row3 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row3Struct> getLookup(matchingModeEnum_row3);

				globalMap.put("tHash_Lookup_row3", tHash_Lookup_row3);

				/**
				 * [tAdvancedHash_row3 begin ] stop
				 */

				/**
				 * [tPostgresqlInput_3 begin ] start
				 */

				ok_Hash.put("tPostgresqlInput_3", false);
				start_Hash
						.put("tPostgresqlInput_3", System.currentTimeMillis());

				currentComponent = "tPostgresqlInput_3";

				int tos_count_tPostgresqlInput_3 = 0;

				int nb_line_tPostgresqlInput_3 = 0;
				java.sql.Connection conn_tPostgresqlInput_3 = null;
				conn_tPostgresqlInput_3 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_4");

				java.sql.Statement stmt_tPostgresqlInput_3 = conn_tPostgresqlInput_3
						.createStatement();

				String dbquery_tPostgresqlInput_3 = "SELECT codigo_proyecto, proyecto, codigo_proyecto_snies, proyecto_snies, \n       codigo_facultad, facultad, modalidad, "
						+ "nivel\n  FROM \"CO_UDISTRITAL_TEMPORAL\".proyectos";

				globalMap.put("tPostgresqlInput_3_QUERY",
						dbquery_tPostgresqlInput_3);
				java.sql.ResultSet rs_tPostgresqlInput_3 = null;

				try {
					rs_tPostgresqlInput_3 = stmt_tPostgresqlInput_3
							.executeQuery(dbquery_tPostgresqlInput_3);
					java.sql.ResultSetMetaData rsmd_tPostgresqlInput_3 = rs_tPostgresqlInput_3
							.getMetaData();
					int colQtyInRs_tPostgresqlInput_3 = rsmd_tPostgresqlInput_3
							.getColumnCount();

					String tmpContent_tPostgresqlInput_3 = null;

					while (rs_tPostgresqlInput_3.next()) {
						nb_line_tPostgresqlInput_3++;

						if (colQtyInRs_tPostgresqlInput_3 < 1) {
							row3.codigo_proyecto = 0;
						} else {

							if (rs_tPostgresqlInput_3.getObject(1) != null) {
								row3.codigo_proyecto = rs_tPostgresqlInput_3
										.getInt(1);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tPostgresqlInput_3 < 2) {
							row3.proyecto = null;
						} else {

							row3.proyecto = routines.system.JDBCUtil.getString(
									rs_tPostgresqlInput_3, 2, false);
						}
						if (colQtyInRs_tPostgresqlInput_3 < 3) {
							row3.codigo_proyecto_snies = null;
						} else {

							if (rs_tPostgresqlInput_3.getObject(3) != null) {
								row3.codigo_proyecto_snies = rs_tPostgresqlInput_3
										.getInt(3);
							} else {
								row3.codigo_proyecto_snies = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_3 < 4) {
							row3.proyecto_snies = null;
						} else {

							row3.proyecto_snies = routines.system.JDBCUtil
									.getString(rs_tPostgresqlInput_3, 4, false);
						}
						if (colQtyInRs_tPostgresqlInput_3 < 5) {
							row3.codigo_facultad = null;
						} else {

							if (rs_tPostgresqlInput_3.getObject(5) != null) {
								row3.codigo_facultad = rs_tPostgresqlInput_3
										.getInt(5);
							} else {
								row3.codigo_facultad = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_3 < 6) {
							row3.facultad = null;
						} else {

							row3.facultad = routines.system.JDBCUtil.getString(
									rs_tPostgresqlInput_3, 6, false);
						}
						if (colQtyInRs_tPostgresqlInput_3 < 7) {
							row3.modalidad = null;
						} else {

							row3.modalidad = routines.system.JDBCUtil
									.getString(rs_tPostgresqlInput_3, 7, false);
						}
						if (colQtyInRs_tPostgresqlInput_3 < 8) {
							row3.nivel = null;
						} else {

							row3.nivel = routines.system.JDBCUtil.getString(
									rs_tPostgresqlInput_3, 8, false);
						}

						/**
						 * [tPostgresqlInput_3 begin ] stop
						 */

						/**
						 * [tPostgresqlInput_3 main ] start
						 */

						currentComponent = "tPostgresqlInput_3";

						tos_count_tPostgresqlInput_3++;

						/**
						 * [tPostgresqlInput_3 main ] stop
						 */

						/**
						 * [tPostgresqlInput_3 process_data_begin ] start
						 */

						currentComponent = "tPostgresqlInput_3";

						/**
						 * [tPostgresqlInput_3 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row3 main ] start
						 */

						currentComponent = "tAdvancedHash_row3";

						// row3
						// row3

						if (execStat) {
							runStat.updateStatOnConnection("row3" + iterateId,
									1, 1);
						}

						row3Struct row3_HashRow = new row3Struct();

						row3_HashRow.codigo_proyecto = row3.codigo_proyecto;

						row3_HashRow.proyecto = row3.proyecto;

						row3_HashRow.codigo_proyecto_snies = row3.codigo_proyecto_snies;

						row3_HashRow.proyecto_snies = row3.proyecto_snies;

						row3_HashRow.codigo_facultad = row3.codigo_facultad;

						row3_HashRow.facultad = row3.facultad;

						row3_HashRow.modalidad = row3.modalidad;

						row3_HashRow.nivel = row3.nivel;

						tHash_Lookup_row3.put(row3_HashRow);

						tos_count_tAdvancedHash_row3++;

						/**
						 * [tAdvancedHash_row3 main ] stop
						 */

						/**
						 * [tAdvancedHash_row3 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_row3";

						/**
						 * [tAdvancedHash_row3 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row3 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_row3";

						/**
						 * [tAdvancedHash_row3 process_data_end ] stop
						 */

						/**
						 * [tPostgresqlInput_3 process_data_end ] start
						 */

						currentComponent = "tPostgresqlInput_3";

						/**
						 * [tPostgresqlInput_3 process_data_end ] stop
						 */

						/**
						 * [tPostgresqlInput_3 end ] start
						 */

						currentComponent = "tPostgresqlInput_3";

					}
				} finally {
					if (rs_tPostgresqlInput_3 != null) {
						rs_tPostgresqlInput_3.close();
					}
					if (stmt_tPostgresqlInput_3 != null) {
						stmt_tPostgresqlInput_3.close();
					}
				}
				globalMap.put("tPostgresqlInput_3_NB_LINE",
						nb_line_tPostgresqlInput_3);

				ok_Hash.put("tPostgresqlInput_3", true);
				end_Hash.put("tPostgresqlInput_3", System.currentTimeMillis());

				/**
				 * [tPostgresqlInput_3 end ] stop
				 */

				/**
				 * [tAdvancedHash_row3 end ] start
				 */

				currentComponent = "tAdvancedHash_row3";

				tHash_Lookup_row3.endPut();

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row3" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tAdvancedHash_row3", true);
				end_Hash.put("tAdvancedHash_row3", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row3 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tPostgresqlInput_3 finally ] start
				 */

				currentComponent = "tPostgresqlInput_3";

				/**
				 * [tPostgresqlInput_3 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row3 finally ] start
				 */

				currentComponent = "tAdvancedHash_row3";

				/**
				 * [tAdvancedHash_row3 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostgresqlInput_3_SUBPROCESS_STATE", 1);
	}

	public static class row4Struct implements
			routines.system.IPersistableComparableLookupRow<row4Struct> {
		final static byte[] commonByteArrayLock_DMINDICADORES_evaluacion_docente_parcial_temporal = new byte[0];
		static byte[] commonByteArray_DMINDICADORES_evaluacion_docente_parcial_temporal = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int codigo_proyecto;

		public int getCodigo_proyecto() {
			return this.codigo_proyecto;
		}

		public String proyecto;

		public String getProyecto() {
			return this.proyecto;
		}

		public Integer codigo_proyecto_snies;

		public Integer getCodigo_proyecto_snies() {
			return this.codigo_proyecto_snies;
		}

		public String proyecto_snies;

		public String getProyecto_snies() {
			return this.proyecto_snies;
		}

		public Integer codigo_facultad;

		public Integer getCodigo_facultad() {
			return this.codigo_facultad;
		}

		public String facultad;

		public String getFacultad() {
			return this.facultad;
		}

		public String modalidad;

		public String getModalidad() {
			return this.modalidad;
		}

		public String nivel;

		public String getNivel() {
			return this.nivel;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.codigo_proyecto;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row4Struct other = (row4Struct) obj;

			if (this.codigo_proyecto != other.codigo_proyecto)
				return false;

			return true;
		}

		public void copyDataTo(row4Struct other) {

			other.codigo_proyecto = this.codigo_proyecto;
			other.proyecto = this.proyecto;
			other.codigo_proyecto_snies = this.codigo_proyecto_snies;
			other.proyecto_snies = this.proyecto_snies;
			other.codigo_facultad = this.codigo_facultad;
			other.facultad = this.facultad;
			other.modalidad = this.modalidad;
			other.nivel = this.nivel;

		}

		public void copyKeysDataTo(row4Struct other) {

			other.codigo_proyecto = this.codigo_proyecto;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DMINDICADORES_evaluacion_docente_parcial_temporal) {

				try {

					int length = 0;

					this.codigo_proyecto = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.codigo_proyecto);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.proyecto = readString(dis, ois);

				this.codigo_proyecto_snies = readInteger(dis, ois);

				this.proyecto_snies = readString(dis, ois);

				this.codigo_facultad = readInteger(dis, ois);

				this.facultad = readString(dis, ois);

				this.modalidad = readString(dis, ois);

				this.nivel = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.proyecto, dos, oos);

				writeInteger(this.codigo_proyecto_snies, dos, oos);

				writeString(this.proyecto_snies, dos, oos);

				writeInteger(this.codigo_facultad, dos, oos);

				writeString(this.facultad, dos, oos);

				writeString(this.modalidad, dos, oos);

				writeString(this.nivel, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("codigo_proyecto=" + String.valueOf(codigo_proyecto));
			sb.append(",proyecto=" + proyecto);
			sb.append(",codigo_proyecto_snies="
					+ String.valueOf(codigo_proyecto_snies));
			sb.append(",proyecto_snies=" + proyecto_snies);
			sb.append(",codigo_facultad=" + String.valueOf(codigo_facultad));
			sb.append(",facultad=" + facultad);
			sb.append(",modalidad=" + modalidad);
			sb.append(",nivel=" + nivel);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.codigo_proyecto,
					other.codigo_proyecto);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tPostgresqlInput_4Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlInput_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row4Struct row4 = new row4Struct();

				/**
				 * [tAdvancedHash_row4 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row4", false);
				start_Hash
						.put("tAdvancedHash_row4", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row4";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row4" + iterateId, 0, 0);

					}
				}

				int tos_count_tAdvancedHash_row4 = 0;

				// connection name:row4
				// source node:tPostgresqlInput_4 -
				// inputs:(after_tPostgresqlInput_1) outputs:(row4,row4) |
				// target node:tAdvancedHash_row4 - inputs:(row4) outputs:()
				// linked node: tMap_1 - inputs:(row1,row2,row3,row4)
				// outputs:(evaluacion)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row4 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct> tHash_Lookup_row4 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row4Struct> getLookup(matchingModeEnum_row4);

				globalMap.put("tHash_Lookup_row4", tHash_Lookup_row4);

				/**
				 * [tAdvancedHash_row4 begin ] stop
				 */

				/**
				 * [tPostgresqlInput_4 begin ] start
				 */

				ok_Hash.put("tPostgresqlInput_4", false);
				start_Hash
						.put("tPostgresqlInput_4", System.currentTimeMillis());

				currentComponent = "tPostgresqlInput_4";

				int tos_count_tPostgresqlInput_4 = 0;

				int nb_line_tPostgresqlInput_4 = 0;
				java.sql.Connection conn_tPostgresqlInput_4 = null;
				conn_tPostgresqlInput_4 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_4");

				java.sql.Statement stmt_tPostgresqlInput_4 = conn_tPostgresqlInput_4
						.createStatement();

				String dbquery_tPostgresqlInput_4 = "SELECT codigo_proyecto, proyecto, codigo_proyecto_snies, proyecto_snies, \n       codigo_facultad, facultad, modalidad, "
						+ "nivel\n  FROM \"CO_UDISTRITAL_TEMPORAL\".proyectos";

				globalMap.put("tPostgresqlInput_4_QUERY",
						dbquery_tPostgresqlInput_4);
				java.sql.ResultSet rs_tPostgresqlInput_4 = null;

				try {
					rs_tPostgresqlInput_4 = stmt_tPostgresqlInput_4
							.executeQuery(dbquery_tPostgresqlInput_4);
					java.sql.ResultSetMetaData rsmd_tPostgresqlInput_4 = rs_tPostgresqlInput_4
							.getMetaData();
					int colQtyInRs_tPostgresqlInput_4 = rsmd_tPostgresqlInput_4
							.getColumnCount();

					String tmpContent_tPostgresqlInput_4 = null;

					while (rs_tPostgresqlInput_4.next()) {
						nb_line_tPostgresqlInput_4++;

						if (colQtyInRs_tPostgresqlInput_4 < 1) {
							row4.codigo_proyecto = 0;
						} else {

							if (rs_tPostgresqlInput_4.getObject(1) != null) {
								row4.codigo_proyecto = rs_tPostgresqlInput_4
										.getInt(1);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tPostgresqlInput_4 < 2) {
							row4.proyecto = null;
						} else {

							row4.proyecto = routines.system.JDBCUtil.getString(
									rs_tPostgresqlInput_4, 2, false);
						}
						if (colQtyInRs_tPostgresqlInput_4 < 3) {
							row4.codigo_proyecto_snies = null;
						} else {

							if (rs_tPostgresqlInput_4.getObject(3) != null) {
								row4.codigo_proyecto_snies = rs_tPostgresqlInput_4
										.getInt(3);
							} else {
								row4.codigo_proyecto_snies = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_4 < 4) {
							row4.proyecto_snies = null;
						} else {

							row4.proyecto_snies = routines.system.JDBCUtil
									.getString(rs_tPostgresqlInput_4, 4, false);
						}
						if (colQtyInRs_tPostgresqlInput_4 < 5) {
							row4.codigo_facultad = null;
						} else {

							if (rs_tPostgresqlInput_4.getObject(5) != null) {
								row4.codigo_facultad = rs_tPostgresqlInput_4
										.getInt(5);
							} else {
								row4.codigo_facultad = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_4 < 6) {
							row4.facultad = null;
						} else {

							row4.facultad = routines.system.JDBCUtil.getString(
									rs_tPostgresqlInput_4, 6, false);
						}
						if (colQtyInRs_tPostgresqlInput_4 < 7) {
							row4.modalidad = null;
						} else {

							row4.modalidad = routines.system.JDBCUtil
									.getString(rs_tPostgresqlInput_4, 7, false);
						}
						if (colQtyInRs_tPostgresqlInput_4 < 8) {
							row4.nivel = null;
						} else {

							row4.nivel = routines.system.JDBCUtil.getString(
									rs_tPostgresqlInput_4, 8, false);
						}

						/**
						 * [tPostgresqlInput_4 begin ] stop
						 */

						/**
						 * [tPostgresqlInput_4 main ] start
						 */

						currentComponent = "tPostgresqlInput_4";

						tos_count_tPostgresqlInput_4++;

						/**
						 * [tPostgresqlInput_4 main ] stop
						 */

						/**
						 * [tPostgresqlInput_4 process_data_begin ] start
						 */

						currentComponent = "tPostgresqlInput_4";

						/**
						 * [tPostgresqlInput_4 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row4 main ] start
						 */

						currentComponent = "tAdvancedHash_row4";

						// row4
						// row4

						if (execStat) {
							runStat.updateStatOnConnection("row4" + iterateId,
									1, 1);
						}

						row4Struct row4_HashRow = new row4Struct();

						row4_HashRow.codigo_proyecto = row4.codigo_proyecto;

						row4_HashRow.proyecto = row4.proyecto;

						row4_HashRow.codigo_proyecto_snies = row4.codigo_proyecto_snies;

						row4_HashRow.proyecto_snies = row4.proyecto_snies;

						row4_HashRow.codigo_facultad = row4.codigo_facultad;

						row4_HashRow.facultad = row4.facultad;

						row4_HashRow.modalidad = row4.modalidad;

						row4_HashRow.nivel = row4.nivel;

						tHash_Lookup_row4.put(row4_HashRow);

						tos_count_tAdvancedHash_row4++;

						/**
						 * [tAdvancedHash_row4 main ] stop
						 */

						/**
						 * [tAdvancedHash_row4 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_row4";

						/**
						 * [tAdvancedHash_row4 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row4 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_row4";

						/**
						 * [tAdvancedHash_row4 process_data_end ] stop
						 */

						/**
						 * [tPostgresqlInput_4 process_data_end ] start
						 */

						currentComponent = "tPostgresqlInput_4";

						/**
						 * [tPostgresqlInput_4 process_data_end ] stop
						 */

						/**
						 * [tPostgresqlInput_4 end ] start
						 */

						currentComponent = "tPostgresqlInput_4";

					}
				} finally {
					if (rs_tPostgresqlInput_4 != null) {
						rs_tPostgresqlInput_4.close();
					}
					if (stmt_tPostgresqlInput_4 != null) {
						stmt_tPostgresqlInput_4.close();
					}
				}
				globalMap.put("tPostgresqlInput_4_NB_LINE",
						nb_line_tPostgresqlInput_4);

				ok_Hash.put("tPostgresqlInput_4", true);
				end_Hash.put("tPostgresqlInput_4", System.currentTimeMillis());

				/**
				 * [tPostgresqlInput_4 end ] stop
				 */

				/**
				 * [tAdvancedHash_row4 end ] start
				 */

				currentComponent = "tAdvancedHash_row4";

				tHash_Lookup_row4.endPut();

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row4" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tAdvancedHash_row4", true);
				end_Hash.put("tAdvancedHash_row4", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row4 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tPostgresqlInput_4 finally ] start
				 */

				currentComponent = "tPostgresqlInput_4";

				/**
				 * [tPostgresqlInput_4 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row4 finally ] start
				 */

				currentComponent = "tAdvancedHash_row4";

				/**
				 * [tAdvancedHash_row4 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostgresqlInput_4_SUBPROCESS_STATE", 1);
	}

	public void tPostjob_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tPostjob_1 begin ] start
				 */

				ok_Hash.put("tPostjob_1", false);
				start_Hash.put("tPostjob_1", System.currentTimeMillis());

				currentComponent = "tPostjob_1";

				int tos_count_tPostjob_1 = 0;

				/**
				 * [tPostjob_1 begin ] stop
				 */

				/**
				 * [tPostjob_1 main ] start
				 */

				currentComponent = "tPostjob_1";

				tos_count_tPostjob_1++;

				/**
				 * [tPostjob_1 main ] stop
				 */

				/**
				 * [tPostjob_1 process_data_begin ] start
				 */

				currentComponent = "tPostjob_1";

				/**
				 * [tPostjob_1 process_data_begin ] stop
				 */

				/**
				 * [tPostjob_1 process_data_end ] start
				 */

				currentComponent = "tPostjob_1";

				/**
				 * [tPostjob_1 process_data_end ] stop
				 */

				/**
				 * [tPostjob_1 end ] start
				 */

				currentComponent = "tPostjob_1";

				ok_Hash.put("tPostjob_1", true);
				end_Hash.put("tPostjob_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tOracleClose_1Process(globalMap);

				/**
				 * [tPostjob_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tPostjob_1 finally ] start
				 */

				currentComponent = "tPostjob_1";

				/**
				 * [tPostjob_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 1);
	}

	public void tOracleClose_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tOracleClose_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tOracleClose_1 begin ] start
				 */

				ok_Hash.put("tOracleClose_1", false);
				start_Hash.put("tOracleClose_1", System.currentTimeMillis());

				currentComponent = "tOracleClose_1";

				int tos_count_tOracleClose_1 = 0;

				/**
				 * [tOracleClose_1 begin ] stop
				 */

				/**
				 * [tOracleClose_1 main ] start
				 */

				currentComponent = "tOracleClose_1";

				java.sql.Connection conn_tOracleClose_1 = (java.sql.Connection) globalMap
						.get("conn_tOracleConnection_1");

				if (conn_tOracleClose_1 != null
						&& !conn_tOracleClose_1.isClosed()) {

					conn_tOracleClose_1.close();

				}

				tos_count_tOracleClose_1++;

				/**
				 * [tOracleClose_1 main ] stop
				 */

				/**
				 * [tOracleClose_1 process_data_begin ] start
				 */

				currentComponent = "tOracleClose_1";

				/**
				 * [tOracleClose_1 process_data_begin ] stop
				 */

				/**
				 * [tOracleClose_1 process_data_end ] start
				 */

				currentComponent = "tOracleClose_1";

				/**
				 * [tOracleClose_1 process_data_end ] stop
				 */

				/**
				 * [tOracleClose_1 end ] start
				 */

				currentComponent = "tOracleClose_1";

				ok_Hash.put("tOracleClose_1", true);
				end_Hash.put("tOracleClose_1", System.currentTimeMillis());

				/**
				 * [tOracleClose_1 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tOracleClose_1:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk3", 0, "ok");
			}

			tPostgresqlClose_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tOracleClose_1 finally ] start
				 */

				currentComponent = "tOracleClose_1";

				/**
				 * [tOracleClose_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tOracleClose_1_SUBPROCESS_STATE", 1);
	}

	public void tPostgresqlClose_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlClose_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tPostgresqlClose_1 begin ] start
				 */

				ok_Hash.put("tPostgresqlClose_1", false);
				start_Hash
						.put("tPostgresqlClose_1", System.currentTimeMillis());

				currentComponent = "tPostgresqlClose_1";

				int tos_count_tPostgresqlClose_1 = 0;

				/**
				 * [tPostgresqlClose_1 begin ] stop
				 */

				/**
				 * [tPostgresqlClose_1 main ] start
				 */

				currentComponent = "tPostgresqlClose_1";

				java.sql.Connection conn_tPostgresqlClose_1 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_2");
				if (conn_tPostgresqlClose_1 != null
						&& !conn_tPostgresqlClose_1.isClosed()) {
					conn_tPostgresqlClose_1.close();
				}

				tos_count_tPostgresqlClose_1++;

				/**
				 * [tPostgresqlClose_1 main ] stop
				 */

				/**
				 * [tPostgresqlClose_1 process_data_begin ] start
				 */

				currentComponent = "tPostgresqlClose_1";

				/**
				 * [tPostgresqlClose_1 process_data_begin ] stop
				 */

				/**
				 * [tPostgresqlClose_1 process_data_end ] start
				 */

				currentComponent = "tPostgresqlClose_1";

				/**
				 * [tPostgresqlClose_1 process_data_end ] stop
				 */

				/**
				 * [tPostgresqlClose_1 end ] start
				 */

				currentComponent = "tPostgresqlClose_1";

				ok_Hash.put("tPostgresqlClose_1", true);
				end_Hash.put("tPostgresqlClose_1", System.currentTimeMillis());

				/**
				 * [tPostgresqlClose_1 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tPostgresqlClose_1:OnSubjobOk",
						"", Thread.currentThread().getId() + "", "", "", "",
						"", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk5", 0, "ok");
			}

			tPostgresqlClose_2Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tPostgresqlClose_1 finally ] start
				 */

				currentComponent = "tPostgresqlClose_1";

				/**
				 * [tPostgresqlClose_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostgresqlClose_1_SUBPROCESS_STATE", 1);
	}

	public void tPostgresqlClose_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlClose_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tPostgresqlClose_2 begin ] start
				 */

				ok_Hash.put("tPostgresqlClose_2", false);
				start_Hash
						.put("tPostgresqlClose_2", System.currentTimeMillis());

				currentComponent = "tPostgresqlClose_2";

				int tos_count_tPostgresqlClose_2 = 0;

				/**
				 * [tPostgresqlClose_2 begin ] stop
				 */

				/**
				 * [tPostgresqlClose_2 main ] start
				 */

				currentComponent = "tPostgresqlClose_2";

				java.sql.Connection conn_tPostgresqlClose_2 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_3");
				if (conn_tPostgresqlClose_2 != null
						&& !conn_tPostgresqlClose_2.isClosed()) {
					conn_tPostgresqlClose_2.close();
				}

				tos_count_tPostgresqlClose_2++;

				/**
				 * [tPostgresqlClose_2 main ] stop
				 */

				/**
				 * [tPostgresqlClose_2 process_data_begin ] start
				 */

				currentComponent = "tPostgresqlClose_2";

				/**
				 * [tPostgresqlClose_2 process_data_begin ] stop
				 */

				/**
				 * [tPostgresqlClose_2 process_data_end ] start
				 */

				currentComponent = "tPostgresqlClose_2";

				/**
				 * [tPostgresqlClose_2 process_data_end ] stop
				 */

				/**
				 * [tPostgresqlClose_2 end ] start
				 */

				currentComponent = "tPostgresqlClose_2";

				ok_Hash.put("tPostgresqlClose_2", true);
				end_Hash.put("tPostgresqlClose_2", System.currentTimeMillis());

				/**
				 * [tPostgresqlClose_2 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tPostgresqlClose_2:OnSubjobOk",
						"", Thread.currentThread().getId() + "", "", "", "",
						"", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk7", 0, "ok");
			}

			tPostgresqlClose_4Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tPostgresqlClose_2 finally ] start
				 */

				currentComponent = "tPostgresqlClose_2";

				/**
				 * [tPostgresqlClose_2 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostgresqlClose_2_SUBPROCESS_STATE", 1);
	}

	public void tPostgresqlClose_4Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlClose_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tPostgresqlClose_4 begin ] start
				 */

				ok_Hash.put("tPostgresqlClose_4", false);
				start_Hash
						.put("tPostgresqlClose_4", System.currentTimeMillis());

				currentComponent = "tPostgresqlClose_4";

				int tos_count_tPostgresqlClose_4 = 0;

				/**
				 * [tPostgresqlClose_4 begin ] stop
				 */

				/**
				 * [tPostgresqlClose_4 main ] start
				 */

				currentComponent = "tPostgresqlClose_4";

				java.sql.Connection conn_tPostgresqlClose_4 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_4");
				if (conn_tPostgresqlClose_4 != null
						&& !conn_tPostgresqlClose_4.isClosed()) {
					conn_tPostgresqlClose_4.close();
				}

				tos_count_tPostgresqlClose_4++;

				/**
				 * [tPostgresqlClose_4 main ] stop
				 */

				/**
				 * [tPostgresqlClose_4 process_data_begin ] start
				 */

				currentComponent = "tPostgresqlClose_4";

				/**
				 * [tPostgresqlClose_4 process_data_begin ] stop
				 */

				/**
				 * [tPostgresqlClose_4 process_data_end ] start
				 */

				currentComponent = "tPostgresqlClose_4";

				/**
				 * [tPostgresqlClose_4 process_data_end ] stop
				 */

				/**
				 * [tPostgresqlClose_4 end ] start
				 */

				currentComponent = "tPostgresqlClose_4";

				ok_Hash.put("tPostgresqlClose_4", true);
				end_Hash.put("tPostgresqlClose_4", System.currentTimeMillis());

				/**
				 * [tPostgresqlClose_4 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tPostgresqlClose_4:OnSubjobOk",
						"", Thread.currentThread().getId() + "", "", "", "",
						"", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk9", 0, "ok");
			}

			tPostgresqlClose_3Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tPostgresqlClose_4 finally ] start
				 */

				currentComponent = "tPostgresqlClose_4";

				/**
				 * [tPostgresqlClose_4 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostgresqlClose_4_SUBPROCESS_STATE", 1);
	}

	public void tPostgresqlClose_3Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlClose_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tPostgresqlClose_3 begin ] start
				 */

				ok_Hash.put("tPostgresqlClose_3", false);
				start_Hash
						.put("tPostgresqlClose_3", System.currentTimeMillis());

				currentComponent = "tPostgresqlClose_3";

				int tos_count_tPostgresqlClose_3 = 0;

				/**
				 * [tPostgresqlClose_3 begin ] stop
				 */

				/**
				 * [tPostgresqlClose_3 main ] start
				 */

				currentComponent = "tPostgresqlClose_3";

				java.sql.Connection conn_tPostgresqlClose_3 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_5");
				if (conn_tPostgresqlClose_3 != null
						&& !conn_tPostgresqlClose_3.isClosed()) {
					conn_tPostgresqlClose_3.close();
				}

				tos_count_tPostgresqlClose_3++;

				/**
				 * [tPostgresqlClose_3 main ] stop
				 */

				/**
				 * [tPostgresqlClose_3 process_data_begin ] start
				 */

				currentComponent = "tPostgresqlClose_3";

				/**
				 * [tPostgresqlClose_3 process_data_begin ] stop
				 */

				/**
				 * [tPostgresqlClose_3 process_data_end ] start
				 */

				currentComponent = "tPostgresqlClose_3";

				/**
				 * [tPostgresqlClose_3 process_data_end ] stop
				 */

				/**
				 * [tPostgresqlClose_3 end ] start
				 */

				currentComponent = "tPostgresqlClose_3";

				ok_Hash.put("tPostgresqlClose_3", true);
				end_Hash.put("tPostgresqlClose_3", System.currentTimeMillis());

				/**
				 * [tPostgresqlClose_3 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tPostgresqlClose_3 finally ] start
				 */

				currentComponent = "tPostgresqlClose_3";

				/**
				 * [tPostgresqlClose_3 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostgresqlClose_3_SUBPROCESS_STATE", 1);
	}

	public void connectionStatsLogs_CommitProcess(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("connectionStatsLogs_Commit_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [connectionStatsLogs_Commit begin ] start
				 */

				ok_Hash.put("connectionStatsLogs_Commit", false);
				start_Hash.put("connectionStatsLogs_Commit",
						System.currentTimeMillis());

				currentComponent = "connectionStatsLogs_Commit";

				int tos_count_connectionStatsLogs_Commit = 0;

				/**
				 * [connectionStatsLogs_Commit begin ] stop
				 */

				/**
				 * [connectionStatsLogs_Commit main ] start
				 */

				currentComponent = "connectionStatsLogs_Commit";

				java.sql.Connection conn_connectionStatsLogs_Commit = (java.sql.Connection) globalMap
						.get("conn_connectionStatsLogs");
				if (conn_connectionStatsLogs_Commit != null
						&& !conn_connectionStatsLogs_Commit.isClosed()) {

					conn_connectionStatsLogs_Commit.commit();

				}

				tos_count_connectionStatsLogs_Commit++;

				/**
				 * [connectionStatsLogs_Commit main ] stop
				 */

				/**
				 * [connectionStatsLogs_Commit process_data_begin ] start
				 */

				currentComponent = "connectionStatsLogs_Commit";

				/**
				 * [connectionStatsLogs_Commit process_data_begin ] stop
				 */

				/**
				 * [connectionStatsLogs_Commit process_data_end ] start
				 */

				currentComponent = "connectionStatsLogs_Commit";

				/**
				 * [connectionStatsLogs_Commit process_data_end ] stop
				 */

				/**
				 * [connectionStatsLogs_Commit end ] start
				 */

				currentComponent = "connectionStatsLogs_Commit";

				ok_Hash.put("connectionStatsLogs_Commit", true);
				end_Hash.put("connectionStatsLogs_Commit",
						System.currentTimeMillis());

				/**
				 * [connectionStatsLogs_Commit end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [connectionStatsLogs_Commit finally ] start
				 */

				currentComponent = "connectionStatsLogs_Commit";

				/**
				 * [connectionStatsLogs_Commit finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("connectionStatsLogs_Commit_SUBPROCESS_STATE", 1);
	}

	public void connectionStatsLogsProcess(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("connectionStatsLogs_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [connectionStatsLogs begin ] start
				 */

				ok_Hash.put("connectionStatsLogs", false);
				start_Hash.put("connectionStatsLogs",
						System.currentTimeMillis());

				currentComponent = "connectionStatsLogs";

				int tos_count_connectionStatsLogs = 0;

				String url_connectionStatsLogs = "jdbc:postgresql://"
						+ "10.20.0.88" + ":" + "5432" + "/"
						+ "co_udistrital_log";

				String dbUser_connectionStatsLogs = "spagobi";

				final String decryptedPassword_connectionStatsLogs = routines.system.PasswordEncryptUtil
						.decryptPassword("9f576344a61564d0da9981c3c148b27a24da144fced1fd2b");
				String dbPwd_connectionStatsLogs = decryptedPassword_connectionStatsLogs;

				java.sql.Connection conn_connectionStatsLogs = null;

				java.util.Enumeration<java.sql.Driver> drivers_connectionStatsLogs = java.sql.DriverManager
						.getDrivers();
				while (drivers_connectionStatsLogs.hasMoreElements()) {
					java.sql.Driver d_connectionStatsLogs = drivers_connectionStatsLogs
							.nextElement();
					java.util.List<String> driverList_connectionStatsLogs = java.util.Arrays
							.<String> asList("com.amazon.redshift.jdbc.Driver",
									"com.amazon.redshift.jdbc41.Driver");
					if (driverList_connectionStatsLogs
							.contains(d_connectionStatsLogs.getClass()
									.getName())) {
						try {
							java.sql.DriverManager
									.deregisterDriver(d_connectionStatsLogs);
							java.sql.DriverManager
									.registerDriver(d_connectionStatsLogs);
						} catch (java.lang.Exception e_connectionStatsLogs) {
							// do nothing
						}
					}
				}

				String sharedConnectionName_connectionStatsLogs = "StatsAndLog_Shared_Connection";
				conn_connectionStatsLogs = SharedDBConnection.getDBConnection(
						"org.postgresql.Driver", url_connectionStatsLogs,
						dbUser_connectionStatsLogs, dbPwd_connectionStatsLogs,
						sharedConnectionName_connectionStatsLogs);
				if (null != conn_connectionStatsLogs) {

					conn_connectionStatsLogs.setAutoCommit(false);
				}

				globalMap.put("schema_" + "connectionStatsLogs", "public");

				globalMap.put("conn_" + "connectionStatsLogs",
						conn_connectionStatsLogs);

				/**
				 * [connectionStatsLogs begin ] stop
				 */

				/**
				 * [connectionStatsLogs main ] start
				 */

				currentComponent = "connectionStatsLogs";

				tos_count_connectionStatsLogs++;

				/**
				 * [connectionStatsLogs main ] stop
				 */

				/**
				 * [connectionStatsLogs process_data_begin ] start
				 */

				currentComponent = "connectionStatsLogs";

				/**
				 * [connectionStatsLogs process_data_begin ] stop
				 */

				/**
				 * [connectionStatsLogs process_data_end ] start
				 */

				currentComponent = "connectionStatsLogs";

				/**
				 * [connectionStatsLogs process_data_end ] stop
				 */

				/**
				 * [connectionStatsLogs end ] start
				 */

				currentComponent = "connectionStatsLogs";

				ok_Hash.put("connectionStatsLogs", true);
				end_Hash.put("connectionStatsLogs", System.currentTimeMillis());

				/**
				 * [connectionStatsLogs end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [connectionStatsLogs finally ] start
				 */

				currentComponent = "connectionStatsLogs";

				/**
				 * [connectionStatsLogs finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("connectionStatsLogs_SUBPROCESS_STATE", 1);
	}

	public static class row_talendStats_STATSStruct implements
			routines.system.IPersistableRow<row_talendStats_STATSStruct> {
		final static byte[] commonByteArrayLock_DMINDICADORES_evaluacion_docente_parcial_temporal = new byte[0];
		static byte[] commonByteArray_DMINDICADORES_evaluacion_docente_parcial_temporal = new byte[0];

		public java.util.Date moment;

		public java.util.Date getMoment() {
			return this.moment;
		}

		public String pid;

		public String getPid() {
			return this.pid;
		}

		public String father_pid;

		public String getFather_pid() {
			return this.father_pid;
		}

		public String root_pid;

		public String getRoot_pid() {
			return this.root_pid;
		}

		public Long system_pid;

		public Long getSystem_pid() {
			return this.system_pid;
		}

		public String project;

		public String getProject() {
			return this.project;
		}

		public String job;

		public String getJob() {
			return this.job;
		}

		public String job_repository_id;

		public String getJob_repository_id() {
			return this.job_repository_id;
		}

		public String job_version;

		public String getJob_version() {
			return this.job_version;
		}

		public String context;

		public String getContext() {
			return this.context;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public String message_type;

		public String getMessage_type() {
			return this.message_type;
		}

		public String message;

		public String getMessage() {
			return this.message;
		}

		public Long duration;

		public Long getDuration() {
			return this.duration;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DMINDICADORES_evaluacion_docente_parcial_temporal.length) {
					if (length < 1024
							&& commonByteArray_DMINDICADORES_evaluacion_docente_parcial_temporal.length == 0) {
						commonByteArray_DMINDICADORES_evaluacion_docente_parcial_temporal = new byte[1024];
					} else {
						commonByteArray_DMINDICADORES_evaluacion_docente_parcial_temporal = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_DMINDICADORES_evaluacion_docente_parcial_temporal,
						0, length);
				strReturn = new String(
						commonByteArray_DMINDICADORES_evaluacion_docente_parcial_temporal,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DMINDICADORES_evaluacion_docente_parcial_temporal) {

				try {

					int length = 0;

					this.moment = readDate(dis);

					this.pid = readString(dis);

					this.father_pid = readString(dis);

					this.root_pid = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.system_pid = null;
					} else {
						this.system_pid = dis.readLong();
					}

					this.project = readString(dis);

					this.job = readString(dis);

					this.job_repository_id = readString(dis);

					this.job_version = readString(dis);

					this.context = readString(dis);

					this.origin = readString(dis);

					this.message_type = readString(dis);

					this.message = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.duration = null;
					} else {
						this.duration = dis.readLong();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.moment, dos);

				// String

				writeString(this.pid, dos);

				// String

				writeString(this.father_pid, dos);

				// String

				writeString(this.root_pid, dos);

				// Long

				if (this.system_pid == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.system_pid);
				}

				// String

				writeString(this.project, dos);

				// String

				writeString(this.job, dos);

				// String

				writeString(this.job_repository_id, dos);

				// String

				writeString(this.job_version, dos);

				// String

				writeString(this.context, dos);

				// String

				writeString(this.origin, dos);

				// String

				writeString(this.message_type, dos);

				// String

				writeString(this.message, dos);

				// Long

				if (this.duration == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.duration);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("moment=" + String.valueOf(moment));
			sb.append(",pid=" + pid);
			sb.append(",father_pid=" + father_pid);
			sb.append(",root_pid=" + root_pid);
			sb.append(",system_pid=" + String.valueOf(system_pid));
			sb.append(",project=" + project);
			sb.append(",job=" + job);
			sb.append(",job_repository_id=" + job_repository_id);
			sb.append(",job_version=" + job_version);
			sb.append(",context=" + context);
			sb.append(",origin=" + origin);
			sb.append(",message_type=" + message_type);
			sb.append(",message=" + message);
			sb.append(",duration=" + String.valueOf(duration));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_talendStats_STATSStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void talendStats_STATSProcess(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("talendStats_STATS_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row_talendStats_STATSStruct row_talendStats_STATS = new row_talendStats_STATSStruct();

				/**
				 * [talendStats_DB begin ] start
				 */

				ok_Hash.put("talendStats_DB", false);
				start_Hash.put("talendStats_DB", System.currentTimeMillis());

				currentVirtualComponent = "talendStats_DB";

				currentComponent = "talendStats_DB";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("Main" + iterateId, 0, 0);

					}
				}

				int tos_count_talendStats_DB = 0;

				String dbschema_talendStats_DB = null;
				dbschema_talendStats_DB = (String) globalMap.get("schema_"
						+ "connectionStatsLogs");

				String tableName_talendStats_DB = null;
				if (dbschema_talendStats_DB == null
						|| dbschema_talendStats_DB.trim().length() == 0) {
					tableName_talendStats_DB = "statcatcher";
				} else {
					tableName_talendStats_DB = dbschema_talendStats_DB
							+ "\".\"" + "statcatcher";
				}

				int nb_line_talendStats_DB = 0;
				int nb_line_update_talendStats_DB = 0;
				int nb_line_inserted_talendStats_DB = 0;
				int nb_line_deleted_talendStats_DB = 0;
				int nb_line_rejected_talendStats_DB = 0;

				int deletedCount_talendStats_DB = 0;
				int updatedCount_talendStats_DB = 0;
				int insertedCount_talendStats_DB = 0;
				int rejectedCount_talendStats_DB = 0;

				boolean whetherReject_talendStats_DB = false;

				java.sql.Connection conn_talendStats_DB = null;
				String dbUser_talendStats_DB = null;

				conn_talendStats_DB = (java.sql.Connection) globalMap
						.get("conn_connectionStatsLogs");

				int batchSize_talendStats_DB = 10000;
				int batchSizeCounter_talendStats_DB = 0;

				int count_talendStats_DB = 0;

				// [%connection%][checktable][tableName]
				String keyCheckTable_talendStats_DB = conn_talendStats_DB
						+ "[checktable]" + "[" + "statcatcher" + "]";

				if (GlobalResource.resourceMap
						.get(keyCheckTable_talendStats_DB) == null) {// }

					synchronized (GlobalResource.resourceLockMap
							.get(keyCheckTable_talendStats_DB)) {// }
						if (GlobalResource.resourceMap
								.get(keyCheckTable_talendStats_DB) == null) {// }
							java.sql.DatabaseMetaData dbMetaData_talendStats_DB = conn_talendStats_DB
									.getMetaData();
							boolean whetherExist_talendStats_DB = false;
							try (java.sql.ResultSet rsTable_talendStats_DB = dbMetaData_talendStats_DB
									.getTables(null, null, null,
											new String[] { "TABLE" })) {
								String defaultSchema_talendStats_DB = "public";
								if (dbschema_talendStats_DB == null
										|| dbschema_talendStats_DB.trim()
												.length() == 0) {
									try (java.sql.Statement stmtSchema_talendStats_DB = conn_talendStats_DB
											.createStatement();
											java.sql.ResultSet rsSchema_talendStats_DB = stmtSchema_talendStats_DB
													.executeQuery("select current_schema() ")) {
										while (rsSchema_talendStats_DB.next()) {
											defaultSchema_talendStats_DB = rsSchema_talendStats_DB
													.getString("current_schema");
										}
									}
								}
								while (rsTable_talendStats_DB.next()) {
									String table_talendStats_DB = rsTable_talendStats_DB
											.getString("TABLE_NAME");
									String schema_talendStats_DB = rsTable_talendStats_DB
											.getString("TABLE_SCHEM");
									if (table_talendStats_DB
											.equals("statcatcher")
											&& (schema_talendStats_DB
													.equals(dbschema_talendStats_DB) || ((dbschema_talendStats_DB == null || dbschema_talendStats_DB
													.trim().length() == 0) && defaultSchema_talendStats_DB
													.equals(schema_talendStats_DB)))) {
										whetherExist_talendStats_DB = true;
										break;
									}
								}
							}
							if (!whetherExist_talendStats_DB) {
								try (java.sql.Statement stmtCreate_talendStats_DB = conn_talendStats_DB
										.createStatement()) {
									stmtCreate_talendStats_DB
											.execute("CREATE TABLE \""
													+ tableName_talendStats_DB
													+ "\"(\"moment\" TIMESTAMP(0)  ,\"pid\" VARCHAR(20)  ,\"father_pid\" VARCHAR(20)  ,\"root_pid\" VARCHAR(20)  ,\"system_pid\" INT8 ,\"project\" VARCHAR(50)  ,\"job\" VARCHAR(255)  ,\"job_repository_id\" VARCHAR(255)  ,\"job_version\" VARCHAR(255)  ,\"context\" VARCHAR(50)  ,\"origin\" VARCHAR(255)  ,\"message_type\" VARCHAR(255)  ,\"message\" VARCHAR(255)  ,\"duration\" INT8 )");
								}
							}
							GlobalResource.resourceMap.put(
									keyCheckTable_talendStats_DB, true);
							// {{{
						} // end of if
					} // end synchronized
				}
				String insert_talendStats_DB = "INSERT INTO \""
						+ tableName_talendStats_DB
						+ "\" (\"moment\",\"pid\",\"father_pid\",\"root_pid\",\"system_pid\",\"project\",\"job\",\"job_repository_id\",\"job_version\",\"context\",\"origin\",\"message_type\",\"message\",\"duration\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_talendStats_DB = null;
				String keyPsmt_talendStats_DB = conn_talendStats_DB + "[psmt]"
						+ "[" + "statcatcher" + "]";
				pstmt_talendStats_DB = SharedDBPreparedStatement
						.getSharedPreparedStatement(conn_talendStats_DB,
								insert_talendStats_DB, keyPsmt_talendStats_DB);
				resourceMap.put("pstmt_talendStats_DB", pstmt_talendStats_DB);

				/**
				 * [talendStats_DB begin ] stop
				 */

				/**
				 * [talendStats_STATS begin ] start
				 */

				ok_Hash.put("talendStats_STATS", false);
				start_Hash.put("talendStats_STATS", System.currentTimeMillis());

				currentVirtualComponent = "talendStats_STATS";

				currentComponent = "talendStats_STATS";

				int tos_count_talendStats_STATS = 0;

				for (StatCatcherUtils.StatCatcherMessage scm : talendStats_STATS
						.getMessages()) {
					row_talendStats_STATS.pid = pid;
					row_talendStats_STATS.root_pid = rootPid;
					row_talendStats_STATS.father_pid = fatherPid;
					row_talendStats_STATS.project = projectName;
					row_talendStats_STATS.job = jobName;
					row_talendStats_STATS.context = contextStr;
					row_talendStats_STATS.origin = (scm.getOrigin() == null
							|| scm.getOrigin().length() < 1 ? null : scm
							.getOrigin());
					row_talendStats_STATS.message = scm.getMessage();
					row_talendStats_STATS.duration = scm.getDuration();
					row_talendStats_STATS.moment = scm.getMoment();
					row_talendStats_STATS.message_type = scm.getMessageType();
					row_talendStats_STATS.job_version = scm.getJobVersion();
					row_talendStats_STATS.job_repository_id = scm.getJobId();
					row_talendStats_STATS.system_pid = scm.getSystemPid();

					/**
					 * [talendStats_STATS begin ] stop
					 */

					/**
					 * [talendStats_STATS main ] start
					 */

					currentVirtualComponent = "talendStats_STATS";

					currentComponent = "talendStats_STATS";

					tos_count_talendStats_STATS++;

					/**
					 * [talendStats_STATS main ] stop
					 */

					/**
					 * [talendStats_STATS process_data_begin ] start
					 */

					currentVirtualComponent = "talendStats_STATS";

					currentComponent = "talendStats_STATS";

					/**
					 * [talendStats_STATS process_data_begin ] stop
					 */

					/**
					 * [talendStats_DB main ] start
					 */

					currentVirtualComponent = "talendStats_DB";

					currentComponent = "talendStats_DB";

					// Main
					// row_talendStats_STATS

					if (execStat) {
						runStat.updateStatOnConnection("Main" + iterateId, 1, 1);
					}

					whetherReject_talendStats_DB = false;
					if (row_talendStats_STATS.moment != null) {
						pstmt_talendStats_DB
								.setTimestamp(1, new java.sql.Timestamp(
										row_talendStats_STATS.moment.getTime()));
					} else {
						pstmt_talendStats_DB.setNull(1,
								java.sql.Types.TIMESTAMP);
					}

					if (row_talendStats_STATS.pid == null) {
						pstmt_talendStats_DB.setNull(2, java.sql.Types.VARCHAR);
					} else {
						pstmt_talendStats_DB.setString(2,
								row_talendStats_STATS.pid);
					}

					if (row_talendStats_STATS.father_pid == null) {
						pstmt_talendStats_DB.setNull(3, java.sql.Types.VARCHAR);
					} else {
						pstmt_talendStats_DB.setString(3,
								row_talendStats_STATS.father_pid);
					}

					if (row_talendStats_STATS.root_pid == null) {
						pstmt_talendStats_DB.setNull(4, java.sql.Types.VARCHAR);
					} else {
						pstmt_talendStats_DB.setString(4,
								row_talendStats_STATS.root_pid);
					}

					if (row_talendStats_STATS.system_pid == null) {
						pstmt_talendStats_DB.setNull(5, java.sql.Types.INTEGER);
					} else {
						pstmt_talendStats_DB.setLong(5,
								row_talendStats_STATS.system_pid);
					}

					if (row_talendStats_STATS.project == null) {
						pstmt_talendStats_DB.setNull(6, java.sql.Types.VARCHAR);
					} else {
						pstmt_talendStats_DB.setString(6,
								row_talendStats_STATS.project);
					}

					if (row_talendStats_STATS.job == null) {
						pstmt_talendStats_DB.setNull(7, java.sql.Types.VARCHAR);
					} else {
						pstmt_talendStats_DB.setString(7,
								row_talendStats_STATS.job);
					}

					if (row_talendStats_STATS.job_repository_id == null) {
						pstmt_talendStats_DB.setNull(8, java.sql.Types.VARCHAR);
					} else {
						pstmt_talendStats_DB.setString(8,
								row_talendStats_STATS.job_repository_id);
					}

					if (row_talendStats_STATS.job_version == null) {
						pstmt_talendStats_DB.setNull(9, java.sql.Types.VARCHAR);
					} else {
						pstmt_talendStats_DB.setString(9,
								row_talendStats_STATS.job_version);
					}

					if (row_talendStats_STATS.context == null) {
						pstmt_talendStats_DB
								.setNull(10, java.sql.Types.VARCHAR);
					} else {
						pstmt_talendStats_DB.setString(10,
								row_talendStats_STATS.context);
					}

					if (row_talendStats_STATS.origin == null) {
						pstmt_talendStats_DB
								.setNull(11, java.sql.Types.VARCHAR);
					} else {
						pstmt_talendStats_DB.setString(11,
								row_talendStats_STATS.origin);
					}

					if (row_talendStats_STATS.message_type == null) {
						pstmt_talendStats_DB
								.setNull(12, java.sql.Types.VARCHAR);
					} else {
						pstmt_talendStats_DB.setString(12,
								row_talendStats_STATS.message_type);
					}

					if (row_talendStats_STATS.message == null) {
						pstmt_talendStats_DB
								.setNull(13, java.sql.Types.VARCHAR);
					} else {
						pstmt_talendStats_DB.setString(13,
								row_talendStats_STATS.message);
					}

					if (row_talendStats_STATS.duration == null) {
						pstmt_talendStats_DB
								.setNull(14, java.sql.Types.INTEGER);
					} else {
						pstmt_talendStats_DB.setLong(14,
								row_talendStats_STATS.duration);
					}

					pstmt_talendStats_DB.addBatch();
					nb_line_talendStats_DB++;

					batchSizeCounter_talendStats_DB++;

					if ((batchSize_talendStats_DB > 0)
							&& (batchSize_talendStats_DB <= batchSizeCounter_talendStats_DB)) {
						try {
							int countSum_talendStats_DB = 0;

							for (int countEach_talendStats_DB : pstmt_talendStats_DB
									.executeBatch()) {
								countSum_talendStats_DB += (countEach_talendStats_DB < 0 ? 0
										: countEach_talendStats_DB);
							}

							insertedCount_talendStats_DB += countSum_talendStats_DB;

							batchSizeCounter_talendStats_DB = 0;
						} catch (java.sql.BatchUpdateException e_talendStats_DB) {
							java.sql.SQLException ne_talendStats_DB = e_talendStats_DB
									.getNextException(), sqle_talendStats_DB = null;
							String errormessage_talendStats_DB;
							if (ne_talendStats_DB != null) {
								// build new exception to provide the original
								// cause
								sqle_talendStats_DB = new java.sql.SQLException(
										e_talendStats_DB.getMessage()
												+ "\ncaused by: "
												+ ne_talendStats_DB
														.getMessage(),
										ne_talendStats_DB.getSQLState(),
										ne_talendStats_DB.getErrorCode(),
										ne_talendStats_DB);
								errormessage_talendStats_DB = sqle_talendStats_DB
										.getMessage();
							} else {
								errormessage_talendStats_DB = e_talendStats_DB
										.getMessage();
							}

							int countSum_talendStats_DB = 0;
							for (int countEach_talendStats_DB : e_talendStats_DB
									.getUpdateCounts()) {
								countSum_talendStats_DB += (countEach_talendStats_DB < 0 ? 0
										: countEach_talendStats_DB);
							}

							insertedCount_talendStats_DB += countSum_talendStats_DB;

							System.err.println(errormessage_talendStats_DB);

						}
					}

					tos_count_talendStats_DB++;

					/**
					 * [talendStats_DB main ] stop
					 */

					/**
					 * [talendStats_DB process_data_begin ] start
					 */

					currentVirtualComponent = "talendStats_DB";

					currentComponent = "talendStats_DB";

					/**
					 * [talendStats_DB process_data_begin ] stop
					 */

					/**
					 * [talendStats_DB process_data_end ] start
					 */

					currentVirtualComponent = "talendStats_DB";

					currentComponent = "talendStats_DB";

					/**
					 * [talendStats_DB process_data_end ] stop
					 */

					/**
					 * [talendStats_STATS process_data_end ] start
					 */

					currentVirtualComponent = "talendStats_STATS";

					currentComponent = "talendStats_STATS";

					/**
					 * [talendStats_STATS process_data_end ] stop
					 */

					/**
					 * [talendStats_STATS end ] start
					 */

					currentVirtualComponent = "talendStats_STATS";

					currentComponent = "talendStats_STATS";

				}

				ok_Hash.put("talendStats_STATS", true);
				end_Hash.put("talendStats_STATS", System.currentTimeMillis());

				/**
				 * [talendStats_STATS end ] stop
				 */

				/**
				 * [talendStats_DB end ] start
				 */

				currentVirtualComponent = "talendStats_DB";

				currentComponent = "talendStats_DB";

				try {
					int countSum_talendStats_DB = 0;
					if (pstmt_talendStats_DB != null
							&& batchSizeCounter_talendStats_DB > 0) {

						for (int countEach_talendStats_DB : pstmt_talendStats_DB
								.executeBatch()) {
							countSum_talendStats_DB += (countEach_talendStats_DB < 0 ? 0
									: countEach_talendStats_DB);
						}

					}

					insertedCount_talendStats_DB += countSum_talendStats_DB;

				} catch (java.sql.BatchUpdateException e_talendStats_DB) {
					java.sql.SQLException ne_talendStats_DB = e_talendStats_DB
							.getNextException(), sqle_talendStats_DB = null;
					String errormessage_talendStats_DB;
					if (ne_talendStats_DB != null) {
						// build new exception to provide the original cause
						sqle_talendStats_DB = new java.sql.SQLException(
								e_talendStats_DB.getMessage() + "\ncaused by: "
										+ ne_talendStats_DB.getMessage(),
								ne_talendStats_DB.getSQLState(),
								ne_talendStats_DB.getErrorCode(),
								ne_talendStats_DB);
						errormessage_talendStats_DB = sqle_talendStats_DB
								.getMessage();
					} else {
						errormessage_talendStats_DB = e_talendStats_DB
								.getMessage();
					}

					int countSum_talendStats_DB = 0;
					for (int countEach_talendStats_DB : e_talendStats_DB
							.getUpdateCounts()) {
						countSum_talendStats_DB += (countEach_talendStats_DB < 0 ? 0
								: countEach_talendStats_DB);
					}

					insertedCount_talendStats_DB += countSum_talendStats_DB;

					System.err.println(errormessage_talendStats_DB);

				}

				if (pstmt_talendStats_DB != null) {

					SharedDBPreparedStatement
							.releasePreparedStatement(keyPsmt_talendStats_DB);
				}
				resourceMap.put("statementClosed_talendStats_DB", true);

				nb_line_deleted_talendStats_DB = nb_line_deleted_talendStats_DB
						+ deletedCount_talendStats_DB;
				nb_line_update_talendStats_DB = nb_line_update_talendStats_DB
						+ updatedCount_talendStats_DB;
				nb_line_inserted_talendStats_DB = nb_line_inserted_talendStats_DB
						+ insertedCount_talendStats_DB;
				nb_line_rejected_talendStats_DB = nb_line_rejected_talendStats_DB
						+ rejectedCount_talendStats_DB;

				globalMap.put("talendStats_DB_NB_LINE", nb_line_talendStats_DB);
				globalMap.put("talendStats_DB_NB_LINE_UPDATED",
						nb_line_update_talendStats_DB);
				globalMap.put("talendStats_DB_NB_LINE_INSERTED",
						nb_line_inserted_talendStats_DB);
				globalMap.put("talendStats_DB_NB_LINE_DELETED",
						nb_line_deleted_talendStats_DB);
				globalMap.put("talendStats_DB_NB_LINE_REJECTED",
						nb_line_rejected_talendStats_DB);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("Main" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("talendStats_DB", true);
				end_Hash.put("talendStats_DB", System.currentTimeMillis());

				/**
				 * [talendStats_DB end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:talendStats_STATS:sub_ok_talendStats_connectionStatsLogs_Commit",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection(
						"sub_ok_talendStats_connectionStatsLogs_Commit", 0,
						"ok");
			}

			connectionStatsLogs_CommitProcess(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [talendStats_STATS finally ] start
				 */

				currentVirtualComponent = "talendStats_STATS";

				currentComponent = "talendStats_STATS";

				/**
				 * [talendStats_STATS finally ] stop
				 */

				/**
				 * [talendStats_DB finally ] start
				 */

				currentVirtualComponent = "talendStats_DB";

				currentComponent = "talendStats_DB";

				if (resourceMap.get("statementClosed_talendStats_DB") == null) {
					java.sql.PreparedStatement pstmtToClose_talendStats_DB = null;
					if ((pstmtToClose_talendStats_DB = (java.sql.PreparedStatement) resourceMap
							.remove("pstmt_talendStats_DB")) != null) {
						pstmtToClose_talendStats_DB.close();
					}
				}

				/**
				 * [talendStats_DB finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("talendStats_STATS_SUBPROCESS_STATE", 1);
	}

	public static class row_talendLogs_LOGSStruct implements
			routines.system.IPersistableRow<row_talendLogs_LOGSStruct> {
		final static byte[] commonByteArrayLock_DMINDICADORES_evaluacion_docente_parcial_temporal = new byte[0];
		static byte[] commonByteArray_DMINDICADORES_evaluacion_docente_parcial_temporal = new byte[0];

		public java.util.Date moment;

		public java.util.Date getMoment() {
			return this.moment;
		}

		public String pid;

		public String getPid() {
			return this.pid;
		}

		public String root_pid;

		public String getRoot_pid() {
			return this.root_pid;
		}

		public String father_pid;

		public String getFather_pid() {
			return this.father_pid;
		}

		public String project;

		public String getProject() {
			return this.project;
		}

		public String job;

		public String getJob() {
			return this.job;
		}

		public String context;

		public String getContext() {
			return this.context;
		}

		public Integer priority;

		public Integer getPriority() {
			return this.priority;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public String message;

		public String getMessage() {
			return this.message;
		}

		public Integer code;

		public Integer getCode() {
			return this.code;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DMINDICADORES_evaluacion_docente_parcial_temporal.length) {
					if (length < 1024
							&& commonByteArray_DMINDICADORES_evaluacion_docente_parcial_temporal.length == 0) {
						commonByteArray_DMINDICADORES_evaluacion_docente_parcial_temporal = new byte[1024];
					} else {
						commonByteArray_DMINDICADORES_evaluacion_docente_parcial_temporal = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_DMINDICADORES_evaluacion_docente_parcial_temporal,
						0, length);
				strReturn = new String(
						commonByteArray_DMINDICADORES_evaluacion_docente_parcial_temporal,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DMINDICADORES_evaluacion_docente_parcial_temporal) {

				try {

					int length = 0;

					this.moment = readDate(dis);

					this.pid = readString(dis);

					this.root_pid = readString(dis);

					this.father_pid = readString(dis);

					this.project = readString(dis);

					this.job = readString(dis);

					this.context = readString(dis);

					this.priority = readInteger(dis);

					this.type = readString(dis);

					this.origin = readString(dis);

					this.message = readString(dis);

					this.code = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.moment, dos);

				// String

				writeString(this.pid, dos);

				// String

				writeString(this.root_pid, dos);

				// String

				writeString(this.father_pid, dos);

				// String

				writeString(this.project, dos);

				// String

				writeString(this.job, dos);

				// String

				writeString(this.context, dos);

				// Integer

				writeInteger(this.priority, dos);

				// String

				writeString(this.type, dos);

				// String

				writeString(this.origin, dos);

				// String

				writeString(this.message, dos);

				// Integer

				writeInteger(this.code, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("moment=" + String.valueOf(moment));
			sb.append(",pid=" + pid);
			sb.append(",root_pid=" + root_pid);
			sb.append(",father_pid=" + father_pid);
			sb.append(",project=" + project);
			sb.append(",job=" + job);
			sb.append(",context=" + context);
			sb.append(",priority=" + String.valueOf(priority));
			sb.append(",type=" + type);
			sb.append(",origin=" + origin);
			sb.append(",message=" + message);
			sb.append(",code=" + String.valueOf(code));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_talendLogs_LOGSStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void talendLogs_LOGSProcess(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("talendLogs_LOGS_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row_talendLogs_LOGSStruct row_talendLogs_LOGS = new row_talendLogs_LOGSStruct();

				/**
				 * [talendLogs_DB begin ] start
				 */

				ok_Hash.put("talendLogs_DB", false);
				start_Hash.put("talendLogs_DB", System.currentTimeMillis());

				currentVirtualComponent = "talendLogs_DB";

				currentComponent = "talendLogs_DB";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("Main" + iterateId, 0, 0);

					}
				}

				int tos_count_talendLogs_DB = 0;

				String dbschema_talendLogs_DB = null;
				dbschema_talendLogs_DB = (String) globalMap.get("schema_"
						+ "connectionStatsLogs");

				String tableName_talendLogs_DB = null;
				if (dbschema_talendLogs_DB == null
						|| dbschema_talendLogs_DB.trim().length() == 0) {
					tableName_talendLogs_DB = "logcatcher";
				} else {
					tableName_talendLogs_DB = dbschema_talendLogs_DB + "\".\""
							+ "logcatcher";
				}

				int nb_line_talendLogs_DB = 0;
				int nb_line_update_talendLogs_DB = 0;
				int nb_line_inserted_talendLogs_DB = 0;
				int nb_line_deleted_talendLogs_DB = 0;
				int nb_line_rejected_talendLogs_DB = 0;

				int deletedCount_talendLogs_DB = 0;
				int updatedCount_talendLogs_DB = 0;
				int insertedCount_talendLogs_DB = 0;
				int rejectedCount_talendLogs_DB = 0;

				boolean whetherReject_talendLogs_DB = false;

				java.sql.Connection conn_talendLogs_DB = null;
				String dbUser_talendLogs_DB = null;

				conn_talendLogs_DB = (java.sql.Connection) globalMap
						.get("conn_connectionStatsLogs");

				int batchSize_talendLogs_DB = 10000;
				int batchSizeCounter_talendLogs_DB = 0;

				int count_talendLogs_DB = 0;

				// [%connection%][checktable][tableName]
				String keyCheckTable_talendLogs_DB = conn_talendLogs_DB
						+ "[checktable]" + "[" + "logcatcher" + "]";

				if (GlobalResource.resourceMap.get(keyCheckTable_talendLogs_DB) == null) {// }

					synchronized (GlobalResource.resourceLockMap
							.get(keyCheckTable_talendLogs_DB)) {// }
						if (GlobalResource.resourceMap
								.get(keyCheckTable_talendLogs_DB) == null) {// }
							java.sql.DatabaseMetaData dbMetaData_talendLogs_DB = conn_talendLogs_DB
									.getMetaData();
							boolean whetherExist_talendLogs_DB = false;
							try (java.sql.ResultSet rsTable_talendLogs_DB = dbMetaData_talendLogs_DB
									.getTables(null, null, null,
											new String[] { "TABLE" })) {
								String defaultSchema_talendLogs_DB = "public";
								if (dbschema_talendLogs_DB == null
										|| dbschema_talendLogs_DB.trim()
												.length() == 0) {
									try (java.sql.Statement stmtSchema_talendLogs_DB = conn_talendLogs_DB
											.createStatement();
											java.sql.ResultSet rsSchema_talendLogs_DB = stmtSchema_talendLogs_DB
													.executeQuery("select current_schema() ")) {
										while (rsSchema_talendLogs_DB.next()) {
											defaultSchema_talendLogs_DB = rsSchema_talendLogs_DB
													.getString("current_schema");
										}
									}
								}
								while (rsTable_talendLogs_DB.next()) {
									String table_talendLogs_DB = rsTable_talendLogs_DB
											.getString("TABLE_NAME");
									String schema_talendLogs_DB = rsTable_talendLogs_DB
											.getString("TABLE_SCHEM");
									if (table_talendLogs_DB
											.equals("logcatcher")
											&& (schema_talendLogs_DB
													.equals(dbschema_talendLogs_DB) || ((dbschema_talendLogs_DB == null || dbschema_talendLogs_DB
													.trim().length() == 0) && defaultSchema_talendLogs_DB
													.equals(schema_talendLogs_DB)))) {
										whetherExist_talendLogs_DB = true;
										break;
									}
								}
							}
							if (!whetherExist_talendLogs_DB) {
								try (java.sql.Statement stmtCreate_talendLogs_DB = conn_talendLogs_DB
										.createStatement()) {
									stmtCreate_talendLogs_DB
											.execute("CREATE TABLE \""
													+ tableName_talendLogs_DB
													+ "\"(\"moment\" TIMESTAMP(0)  ,\"pid\" VARCHAR(20)  ,\"root_pid\" VARCHAR(20)  ,\"father_pid\" VARCHAR(20)  ,\"project\" VARCHAR(50)  ,\"job\" VARCHAR(255)  ,\"context\" VARCHAR(50)  ,\"priority\" INT4 ,\"type\" VARCHAR(255)  ,\"origin\" VARCHAR(255)  ,\"message\" VARCHAR(255)  ,\"code\" INT4 )");
								}
							}
							GlobalResource.resourceMap.put(
									keyCheckTable_talendLogs_DB, true);
							// {{{
						} // end of if
					} // end synchronized
				}
				String insert_talendLogs_DB = "INSERT INTO \""
						+ tableName_talendLogs_DB
						+ "\" (\"moment\",\"pid\",\"root_pid\",\"father_pid\",\"project\",\"job\",\"context\",\"priority\",\"type\",\"origin\",\"message\",\"code\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_talendLogs_DB = null;
				String keyPsmt_talendLogs_DB = conn_talendLogs_DB + "[psmt]"
						+ "[" + "logcatcher" + "]";
				pstmt_talendLogs_DB = SharedDBPreparedStatement
						.getSharedPreparedStatement(conn_talendLogs_DB,
								insert_talendLogs_DB, keyPsmt_talendLogs_DB);
				resourceMap.put("pstmt_talendLogs_DB", pstmt_talendLogs_DB);

				/**
				 * [talendLogs_DB begin ] stop
				 */

				/**
				 * [talendLogs_LOGS begin ] start
				 */

				ok_Hash.put("talendLogs_LOGS", false);
				start_Hash.put("talendLogs_LOGS", System.currentTimeMillis());

				currentVirtualComponent = "talendLogs_LOGS";

				currentComponent = "talendLogs_LOGS";

				int tos_count_talendLogs_LOGS = 0;

				try {
					for (LogCatcherUtils.LogCatcherMessage lcm : talendLogs_LOGS
							.getMessages()) {
						row_talendLogs_LOGS.type = lcm.getType();
						row_talendLogs_LOGS.origin = (lcm.getOrigin() == null
								|| lcm.getOrigin().length() < 1 ? null : lcm
								.getOrigin());
						row_talendLogs_LOGS.priority = lcm.getPriority();
						row_talendLogs_LOGS.message = lcm.getMessage();
						row_talendLogs_LOGS.code = lcm.getCode();

						row_talendLogs_LOGS.moment = java.util.Calendar
								.getInstance().getTime();

						row_talendLogs_LOGS.pid = pid;
						row_talendLogs_LOGS.root_pid = rootPid;
						row_talendLogs_LOGS.father_pid = fatherPid;

						row_talendLogs_LOGS.project = projectName;
						row_talendLogs_LOGS.job = jobName;
						row_talendLogs_LOGS.context = contextStr;

						/**
						 * [talendLogs_LOGS begin ] stop
						 */

						/**
						 * [talendLogs_LOGS main ] start
						 */

						currentVirtualComponent = "talendLogs_LOGS";

						currentComponent = "talendLogs_LOGS";

						tos_count_talendLogs_LOGS++;

						/**
						 * [talendLogs_LOGS main ] stop
						 */

						/**
						 * [talendLogs_LOGS process_data_begin ] start
						 */

						currentVirtualComponent = "talendLogs_LOGS";

						currentComponent = "talendLogs_LOGS";

						/**
						 * [talendLogs_LOGS process_data_begin ] stop
						 */

						/**
						 * [talendLogs_DB main ] start
						 */

						currentVirtualComponent = "talendLogs_DB";

						currentComponent = "talendLogs_DB";

						// Main
						// row_talendLogs_LOGS

						if (execStat) {
							runStat.updateStatOnConnection("Main" + iterateId,
									1, 1);
						}

						whetherReject_talendLogs_DB = false;
						if (row_talendLogs_LOGS.moment != null) {
							pstmt_talendLogs_DB.setTimestamp(
									1,
									new java.sql.Timestamp(
											row_talendLogs_LOGS.moment
													.getTime()));
						} else {
							pstmt_talendLogs_DB.setNull(1,
									java.sql.Types.TIMESTAMP);
						}

						if (row_talendLogs_LOGS.pid == null) {
							pstmt_talendLogs_DB.setNull(2,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_talendLogs_DB.setString(2,
									row_talendLogs_LOGS.pid);
						}

						if (row_talendLogs_LOGS.root_pid == null) {
							pstmt_talendLogs_DB.setNull(3,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_talendLogs_DB.setString(3,
									row_talendLogs_LOGS.root_pid);
						}

						if (row_talendLogs_LOGS.father_pid == null) {
							pstmt_talendLogs_DB.setNull(4,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_talendLogs_DB.setString(4,
									row_talendLogs_LOGS.father_pid);
						}

						if (row_talendLogs_LOGS.project == null) {
							pstmt_talendLogs_DB.setNull(5,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_talendLogs_DB.setString(5,
									row_talendLogs_LOGS.project);
						}

						if (row_talendLogs_LOGS.job == null) {
							pstmt_talendLogs_DB.setNull(6,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_talendLogs_DB.setString(6,
									row_talendLogs_LOGS.job);
						}

						if (row_talendLogs_LOGS.context == null) {
							pstmt_talendLogs_DB.setNull(7,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_talendLogs_DB.setString(7,
									row_talendLogs_LOGS.context);
						}

						if (row_talendLogs_LOGS.priority == null) {
							pstmt_talendLogs_DB.setNull(8,
									java.sql.Types.INTEGER);
						} else {
							pstmt_talendLogs_DB.setInt(8,
									row_talendLogs_LOGS.priority);
						}

						if (row_talendLogs_LOGS.type == null) {
							pstmt_talendLogs_DB.setNull(9,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_talendLogs_DB.setString(9,
									row_talendLogs_LOGS.type);
						}

						if (row_talendLogs_LOGS.origin == null) {
							pstmt_talendLogs_DB.setNull(10,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_talendLogs_DB.setString(10,
									row_talendLogs_LOGS.origin);
						}

						if (row_talendLogs_LOGS.message == null) {
							pstmt_talendLogs_DB.setNull(11,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_talendLogs_DB.setString(11,
									row_talendLogs_LOGS.message);
						}

						if (row_talendLogs_LOGS.code == null) {
							pstmt_talendLogs_DB.setNull(12,
									java.sql.Types.INTEGER);
						} else {
							pstmt_talendLogs_DB.setInt(12,
									row_talendLogs_LOGS.code);
						}

						pstmt_talendLogs_DB.addBatch();
						nb_line_talendLogs_DB++;

						batchSizeCounter_talendLogs_DB++;

						if ((batchSize_talendLogs_DB > 0)
								&& (batchSize_talendLogs_DB <= batchSizeCounter_talendLogs_DB)) {
							try {
								int countSum_talendLogs_DB = 0;

								for (int countEach_talendLogs_DB : pstmt_talendLogs_DB
										.executeBatch()) {
									countSum_talendLogs_DB += (countEach_talendLogs_DB < 0 ? 0
											: countEach_talendLogs_DB);
								}

								insertedCount_talendLogs_DB += countSum_talendLogs_DB;

								batchSizeCounter_talendLogs_DB = 0;
							} catch (java.sql.BatchUpdateException e_talendLogs_DB) {
								java.sql.SQLException ne_talendLogs_DB = e_talendLogs_DB
										.getNextException(), sqle_talendLogs_DB = null;
								String errormessage_talendLogs_DB;
								if (ne_talendLogs_DB != null) {
									// build new exception to provide the
									// original cause
									sqle_talendLogs_DB = new java.sql.SQLException(
											e_talendLogs_DB.getMessage()
													+ "\ncaused by: "
													+ ne_talendLogs_DB
															.getMessage(),
											ne_talendLogs_DB.getSQLState(),
											ne_talendLogs_DB.getErrorCode(),
											ne_talendLogs_DB);
									errormessage_talendLogs_DB = sqle_talendLogs_DB
											.getMessage();
								} else {
									errormessage_talendLogs_DB = e_talendLogs_DB
											.getMessage();
								}

								int countSum_talendLogs_DB = 0;
								for (int countEach_talendLogs_DB : e_talendLogs_DB
										.getUpdateCounts()) {
									countSum_talendLogs_DB += (countEach_talendLogs_DB < 0 ? 0
											: countEach_talendLogs_DB);
								}

								insertedCount_talendLogs_DB += countSum_talendLogs_DB;

								System.err.println(errormessage_talendLogs_DB);

							}
						}

						tos_count_talendLogs_DB++;

						/**
						 * [talendLogs_DB main ] stop
						 */

						/**
						 * [talendLogs_DB process_data_begin ] start
						 */

						currentVirtualComponent = "talendLogs_DB";

						currentComponent = "talendLogs_DB";

						/**
						 * [talendLogs_DB process_data_begin ] stop
						 */

						/**
						 * [talendLogs_DB process_data_end ] start
						 */

						currentVirtualComponent = "talendLogs_DB";

						currentComponent = "talendLogs_DB";

						/**
						 * [talendLogs_DB process_data_end ] stop
						 */

						/**
						 * [talendLogs_LOGS process_data_end ] start
						 */

						currentVirtualComponent = "talendLogs_LOGS";

						currentComponent = "talendLogs_LOGS";

						/**
						 * [talendLogs_LOGS process_data_end ] stop
						 */

						/**
						 * [talendLogs_LOGS end ] start
						 */

						currentVirtualComponent = "talendLogs_LOGS";

						currentComponent = "talendLogs_LOGS";

					}
				} catch (Exception e_talendLogs_LOGS) {
					logIgnoredError(
							String.format(
									"talendLogs_LOGS - tLogCatcher failed to process log message(s) due to internal error: %s",
									e_talendLogs_LOGS), e_talendLogs_LOGS);
				}

				ok_Hash.put("talendLogs_LOGS", true);
				end_Hash.put("talendLogs_LOGS", System.currentTimeMillis());

				/**
				 * [talendLogs_LOGS end ] stop
				 */

				/**
				 * [talendLogs_DB end ] start
				 */

				currentVirtualComponent = "talendLogs_DB";

				currentComponent = "talendLogs_DB";

				try {
					int countSum_talendLogs_DB = 0;
					if (pstmt_talendLogs_DB != null
							&& batchSizeCounter_talendLogs_DB > 0) {

						for (int countEach_talendLogs_DB : pstmt_talendLogs_DB
								.executeBatch()) {
							countSum_talendLogs_DB += (countEach_talendLogs_DB < 0 ? 0
									: countEach_talendLogs_DB);
						}

					}

					insertedCount_talendLogs_DB += countSum_talendLogs_DB;

				} catch (java.sql.BatchUpdateException e_talendLogs_DB) {
					java.sql.SQLException ne_talendLogs_DB = e_talendLogs_DB
							.getNextException(), sqle_talendLogs_DB = null;
					String errormessage_talendLogs_DB;
					if (ne_talendLogs_DB != null) {
						// build new exception to provide the original cause
						sqle_talendLogs_DB = new java.sql.SQLException(
								e_talendLogs_DB.getMessage() + "\ncaused by: "
										+ ne_talendLogs_DB.getMessage(),
								ne_talendLogs_DB.getSQLState(),
								ne_talendLogs_DB.getErrorCode(),
								ne_talendLogs_DB);
						errormessage_talendLogs_DB = sqle_talendLogs_DB
								.getMessage();
					} else {
						errormessage_talendLogs_DB = e_talendLogs_DB
								.getMessage();
					}

					int countSum_talendLogs_DB = 0;
					for (int countEach_talendLogs_DB : e_talendLogs_DB
							.getUpdateCounts()) {
						countSum_talendLogs_DB += (countEach_talendLogs_DB < 0 ? 0
								: countEach_talendLogs_DB);
					}

					insertedCount_talendLogs_DB += countSum_talendLogs_DB;

					System.err.println(errormessage_talendLogs_DB);

				}

				if (pstmt_talendLogs_DB != null) {

					SharedDBPreparedStatement
							.releasePreparedStatement(keyPsmt_talendLogs_DB);
				}
				resourceMap.put("statementClosed_talendLogs_DB", true);

				nb_line_deleted_talendLogs_DB = nb_line_deleted_talendLogs_DB
						+ deletedCount_talendLogs_DB;
				nb_line_update_talendLogs_DB = nb_line_update_talendLogs_DB
						+ updatedCount_talendLogs_DB;
				nb_line_inserted_talendLogs_DB = nb_line_inserted_talendLogs_DB
						+ insertedCount_talendLogs_DB;
				nb_line_rejected_talendLogs_DB = nb_line_rejected_talendLogs_DB
						+ rejectedCount_talendLogs_DB;

				globalMap.put("talendLogs_DB_NB_LINE", nb_line_talendLogs_DB);
				globalMap.put("talendLogs_DB_NB_LINE_UPDATED",
						nb_line_update_talendLogs_DB);
				globalMap.put("talendLogs_DB_NB_LINE_INSERTED",
						nb_line_inserted_talendLogs_DB);
				globalMap.put("talendLogs_DB_NB_LINE_DELETED",
						nb_line_deleted_talendLogs_DB);
				globalMap.put("talendLogs_DB_NB_LINE_REJECTED",
						nb_line_rejected_talendLogs_DB);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("Main" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("talendLogs_DB", true);
				end_Hash.put("talendLogs_DB", System.currentTimeMillis());

				/**
				 * [talendLogs_DB end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:talendLogs_LOGS:sub_ok_talendLogs_connectionStatsLogs_Commit",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection(
						"sub_ok_talendLogs_connectionStatsLogs_Commit", 0, "ok");
			}

			connectionStatsLogs_CommitProcess(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [talendLogs_LOGS finally ] start
				 */

				currentVirtualComponent = "talendLogs_LOGS";

				currentComponent = "talendLogs_LOGS";

				/**
				 * [talendLogs_LOGS finally ] stop
				 */

				/**
				 * [talendLogs_DB finally ] start
				 */

				currentVirtualComponent = "talendLogs_DB";

				currentComponent = "talendLogs_DB";

				if (resourceMap.get("statementClosed_talendLogs_DB") == null) {
					java.sql.PreparedStatement pstmtToClose_talendLogs_DB = null;
					if ((pstmtToClose_talendLogs_DB = (java.sql.PreparedStatement) resourceMap
							.remove("pstmt_talendLogs_DB")) != null) {
						pstmtToClose_talendLogs_DB.close();
					}
				}

				/**
				 * [talendLogs_DB finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("talendLogs_LOGS_SUBPROCESS_STATE", 1);
	}

	public static class row_talendMeter_METTERStruct implements
			routines.system.IPersistableRow<row_talendMeter_METTERStruct> {
		final static byte[] commonByteArrayLock_DMINDICADORES_evaluacion_docente_parcial_temporal = new byte[0];
		static byte[] commonByteArray_DMINDICADORES_evaluacion_docente_parcial_temporal = new byte[0];

		public java.util.Date moment;

		public java.util.Date getMoment() {
			return this.moment;
		}

		public String pid;

		public String getPid() {
			return this.pid;
		}

		public String father_pid;

		public String getFather_pid() {
			return this.father_pid;
		}

		public String root_pid;

		public String getRoot_pid() {
			return this.root_pid;
		}

		public Long system_pid;

		public Long getSystem_pid() {
			return this.system_pid;
		}

		public String project;

		public String getProject() {
			return this.project;
		}

		public String job;

		public String getJob() {
			return this.job;
		}

		public String job_repository_id;

		public String getJob_repository_id() {
			return this.job_repository_id;
		}

		public String job_version;

		public String getJob_version() {
			return this.job_version;
		}

		public String context;

		public String getContext() {
			return this.context;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public String label;

		public String getLabel() {
			return this.label;
		}

		public Integer count;

		public Integer getCount() {
			return this.count;
		}

		public Integer reference;

		public Integer getReference() {
			return this.reference;
		}

		public String thresholds;

		public String getThresholds() {
			return this.thresholds;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DMINDICADORES_evaluacion_docente_parcial_temporal.length) {
					if (length < 1024
							&& commonByteArray_DMINDICADORES_evaluacion_docente_parcial_temporal.length == 0) {
						commonByteArray_DMINDICADORES_evaluacion_docente_parcial_temporal = new byte[1024];
					} else {
						commonByteArray_DMINDICADORES_evaluacion_docente_parcial_temporal = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_DMINDICADORES_evaluacion_docente_parcial_temporal,
						0, length);
				strReturn = new String(
						commonByteArray_DMINDICADORES_evaluacion_docente_parcial_temporal,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DMINDICADORES_evaluacion_docente_parcial_temporal) {

				try {

					int length = 0;

					this.moment = readDate(dis);

					this.pid = readString(dis);

					this.father_pid = readString(dis);

					this.root_pid = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.system_pid = null;
					} else {
						this.system_pid = dis.readLong();
					}

					this.project = readString(dis);

					this.job = readString(dis);

					this.job_repository_id = readString(dis);

					this.job_version = readString(dis);

					this.context = readString(dis);

					this.origin = readString(dis);

					this.label = readString(dis);

					this.count = readInteger(dis);

					this.reference = readInteger(dis);

					this.thresholds = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.moment, dos);

				// String

				writeString(this.pid, dos);

				// String

				writeString(this.father_pid, dos);

				// String

				writeString(this.root_pid, dos);

				// Long

				if (this.system_pid == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.system_pid);
				}

				// String

				writeString(this.project, dos);

				// String

				writeString(this.job, dos);

				// String

				writeString(this.job_repository_id, dos);

				// String

				writeString(this.job_version, dos);

				// String

				writeString(this.context, dos);

				// String

				writeString(this.origin, dos);

				// String

				writeString(this.label, dos);

				// Integer

				writeInteger(this.count, dos);

				// Integer

				writeInteger(this.reference, dos);

				// String

				writeString(this.thresholds, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("moment=" + String.valueOf(moment));
			sb.append(",pid=" + pid);
			sb.append(",father_pid=" + father_pid);
			sb.append(",root_pid=" + root_pid);
			sb.append(",system_pid=" + String.valueOf(system_pid));
			sb.append(",project=" + project);
			sb.append(",job=" + job);
			sb.append(",job_repository_id=" + job_repository_id);
			sb.append(",job_version=" + job_version);
			sb.append(",context=" + context);
			sb.append(",origin=" + origin);
			sb.append(",label=" + label);
			sb.append(",count=" + String.valueOf(count));
			sb.append(",reference=" + String.valueOf(reference));
			sb.append(",thresholds=" + thresholds);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_talendMeter_METTERStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void talendMeter_METTERProcess(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("talendMeter_METTER_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row_talendMeter_METTERStruct row_talendMeter_METTER = new row_talendMeter_METTERStruct();

				/**
				 * [talendMeter_DB begin ] start
				 */

				ok_Hash.put("talendMeter_DB", false);
				start_Hash.put("talendMeter_DB", System.currentTimeMillis());

				currentVirtualComponent = "talendMeter_DB";

				currentComponent = "talendMeter_DB";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("Main" + iterateId, 0, 0);

					}
				}

				int tos_count_talendMeter_DB = 0;

				String dbschema_talendMeter_DB = null;
				dbschema_talendMeter_DB = (String) globalMap.get("schema_"
						+ "connectionStatsLogs");

				String tableName_talendMeter_DB = null;
				if (dbschema_talendMeter_DB == null
						|| dbschema_talendMeter_DB.trim().length() == 0) {
					tableName_talendMeter_DB = "flowmetercatcher";
				} else {
					tableName_talendMeter_DB = dbschema_talendMeter_DB
							+ "\".\"" + "flowmetercatcher";
				}

				int nb_line_talendMeter_DB = 0;
				int nb_line_update_talendMeter_DB = 0;
				int nb_line_inserted_talendMeter_DB = 0;
				int nb_line_deleted_talendMeter_DB = 0;
				int nb_line_rejected_talendMeter_DB = 0;

				int deletedCount_talendMeter_DB = 0;
				int updatedCount_talendMeter_DB = 0;
				int insertedCount_talendMeter_DB = 0;
				int rejectedCount_talendMeter_DB = 0;

				boolean whetherReject_talendMeter_DB = false;

				java.sql.Connection conn_talendMeter_DB = null;
				String dbUser_talendMeter_DB = null;

				conn_talendMeter_DB = (java.sql.Connection) globalMap
						.get("conn_connectionStatsLogs");

				int batchSize_talendMeter_DB = 10000;
				int batchSizeCounter_talendMeter_DB = 0;

				int count_talendMeter_DB = 0;

				// [%connection%][checktable][tableName]
				String keyCheckTable_talendMeter_DB = conn_talendMeter_DB
						+ "[checktable]" + "[" + "flowmetercatcher" + "]";

				if (GlobalResource.resourceMap
						.get(keyCheckTable_talendMeter_DB) == null) {// }

					synchronized (GlobalResource.resourceLockMap
							.get(keyCheckTable_talendMeter_DB)) {// }
						if (GlobalResource.resourceMap
								.get(keyCheckTable_talendMeter_DB) == null) {// }
							java.sql.DatabaseMetaData dbMetaData_talendMeter_DB = conn_talendMeter_DB
									.getMetaData();
							boolean whetherExist_talendMeter_DB = false;
							try (java.sql.ResultSet rsTable_talendMeter_DB = dbMetaData_talendMeter_DB
									.getTables(null, null, null,
											new String[] { "TABLE" })) {
								String defaultSchema_talendMeter_DB = "public";
								if (dbschema_talendMeter_DB == null
										|| dbschema_talendMeter_DB.trim()
												.length() == 0) {
									try (java.sql.Statement stmtSchema_talendMeter_DB = conn_talendMeter_DB
											.createStatement();
											java.sql.ResultSet rsSchema_talendMeter_DB = stmtSchema_talendMeter_DB
													.executeQuery("select current_schema() ")) {
										while (rsSchema_talendMeter_DB.next()) {
											defaultSchema_talendMeter_DB = rsSchema_talendMeter_DB
													.getString("current_schema");
										}
									}
								}
								while (rsTable_talendMeter_DB.next()) {
									String table_talendMeter_DB = rsTable_talendMeter_DB
											.getString("TABLE_NAME");
									String schema_talendMeter_DB = rsTable_talendMeter_DB
											.getString("TABLE_SCHEM");
									if (table_talendMeter_DB
											.equals("flowmetercatcher")
											&& (schema_talendMeter_DB
													.equals(dbschema_talendMeter_DB) || ((dbschema_talendMeter_DB == null || dbschema_talendMeter_DB
													.trim().length() == 0) && defaultSchema_talendMeter_DB
													.equals(schema_talendMeter_DB)))) {
										whetherExist_talendMeter_DB = true;
										break;
									}
								}
							}
							if (!whetherExist_talendMeter_DB) {
								try (java.sql.Statement stmtCreate_talendMeter_DB = conn_talendMeter_DB
										.createStatement()) {
									stmtCreate_talendMeter_DB
											.execute("CREATE TABLE \""
													+ tableName_talendMeter_DB
													+ "\"(\"moment\" TIMESTAMP(0)  ,\"pid\" VARCHAR(20)  ,\"father_pid\" VARCHAR(20)  ,\"root_pid\" VARCHAR(20)  ,\"system_pid\" INT8 ,\"project\" VARCHAR(50)  ,\"job\" VARCHAR(255)  ,\"job_repository_id\" VARCHAR(255)  ,\"job_version\" VARCHAR(255)  ,\"context\" VARCHAR(50)  ,\"origin\" VARCHAR(255)  ,\"label\" VARCHAR(255)  ,\"count\" INT4 ,\"reference\" INT4 ,\"thresholds\" VARCHAR(255)  )");
								}
							}
							GlobalResource.resourceMap.put(
									keyCheckTable_talendMeter_DB, true);
							// {{{
						} // end of if
					} // end synchronized
				}
				String insert_talendMeter_DB = "INSERT INTO \""
						+ tableName_talendMeter_DB
						+ "\" (\"moment\",\"pid\",\"father_pid\",\"root_pid\",\"system_pid\",\"project\",\"job\",\"job_repository_id\",\"job_version\",\"context\",\"origin\",\"label\",\"count\",\"reference\",\"thresholds\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_talendMeter_DB = null;
				String keyPsmt_talendMeter_DB = conn_talendMeter_DB + "[psmt]"
						+ "[" + "flowmetercatcher" + "]";
				pstmt_talendMeter_DB = SharedDBPreparedStatement
						.getSharedPreparedStatement(conn_talendMeter_DB,
								insert_talendMeter_DB, keyPsmt_talendMeter_DB);
				resourceMap.put("pstmt_talendMeter_DB", pstmt_talendMeter_DB);

				/**
				 * [talendMeter_DB begin ] stop
				 */

				/**
				 * [talendMeter_METTER begin ] start
				 */

				ok_Hash.put("talendMeter_METTER", false);
				start_Hash
						.put("talendMeter_METTER", System.currentTimeMillis());

				currentVirtualComponent = "talendMeter_METTER";

				currentComponent = "talendMeter_METTER";

				int tos_count_talendMeter_METTER = 0;

				for (MetterCatcherUtils.MetterCatcherMessage mcm : talendMeter_METTER
						.getMessages()) {
					row_talendMeter_METTER.pid = pid;
					row_talendMeter_METTER.root_pid = rootPid;
					row_talendMeter_METTER.father_pid = fatherPid;
					row_talendMeter_METTER.project = projectName;
					row_talendMeter_METTER.job = jobName;
					row_talendMeter_METTER.context = contextStr;
					row_talendMeter_METTER.origin = (mcm.getOrigin() == null
							|| mcm.getOrigin().length() < 1 ? null : mcm
							.getOrigin());
					row_talendMeter_METTER.moment = mcm.getMoment();
					row_talendMeter_METTER.job_version = mcm.getJobVersion();
					row_talendMeter_METTER.job_repository_id = mcm.getJobId();
					row_talendMeter_METTER.system_pid = mcm.getSystemPid();
					row_talendMeter_METTER.label = mcm.getLabel();
					row_talendMeter_METTER.count = mcm.getCount();
					row_talendMeter_METTER.reference = talendMeter_METTER
							.getConnLinesCount(mcm.getReferense() + "_count");
					row_talendMeter_METTER.thresholds = mcm.getThresholds();

					/**
					 * [talendMeter_METTER begin ] stop
					 */

					/**
					 * [talendMeter_METTER main ] start
					 */

					currentVirtualComponent = "talendMeter_METTER";

					currentComponent = "talendMeter_METTER";

					tos_count_talendMeter_METTER++;

					/**
					 * [talendMeter_METTER main ] stop
					 */

					/**
					 * [talendMeter_METTER process_data_begin ] start
					 */

					currentVirtualComponent = "talendMeter_METTER";

					currentComponent = "talendMeter_METTER";

					/**
					 * [talendMeter_METTER process_data_begin ] stop
					 */

					/**
					 * [talendMeter_DB main ] start
					 */

					currentVirtualComponent = "talendMeter_DB";

					currentComponent = "talendMeter_DB";

					// Main
					// row_talendMeter_METTER

					if (execStat) {
						runStat.updateStatOnConnection("Main" + iterateId, 1, 1);
					}

					whetherReject_talendMeter_DB = false;
					if (row_talendMeter_METTER.moment != null) {
						pstmt_talendMeter_DB
								.setTimestamp(
										1,
										new java.sql.Timestamp(
												row_talendMeter_METTER.moment
														.getTime()));
					} else {
						pstmt_talendMeter_DB.setNull(1,
								java.sql.Types.TIMESTAMP);
					}

					if (row_talendMeter_METTER.pid == null) {
						pstmt_talendMeter_DB.setNull(2, java.sql.Types.VARCHAR);
					} else {
						pstmt_talendMeter_DB.setString(2,
								row_talendMeter_METTER.pid);
					}

					if (row_talendMeter_METTER.father_pid == null) {
						pstmt_talendMeter_DB.setNull(3, java.sql.Types.VARCHAR);
					} else {
						pstmt_talendMeter_DB.setString(3,
								row_talendMeter_METTER.father_pid);
					}

					if (row_talendMeter_METTER.root_pid == null) {
						pstmt_talendMeter_DB.setNull(4, java.sql.Types.VARCHAR);
					} else {
						pstmt_talendMeter_DB.setString(4,
								row_talendMeter_METTER.root_pid);
					}

					if (row_talendMeter_METTER.system_pid == null) {
						pstmt_talendMeter_DB.setNull(5, java.sql.Types.INTEGER);
					} else {
						pstmt_talendMeter_DB.setLong(5,
								row_talendMeter_METTER.system_pid);
					}

					if (row_talendMeter_METTER.project == null) {
						pstmt_talendMeter_DB.setNull(6, java.sql.Types.VARCHAR);
					} else {
						pstmt_talendMeter_DB.setString(6,
								row_talendMeter_METTER.project);
					}

					if (row_talendMeter_METTER.job == null) {
						pstmt_talendMeter_DB.setNull(7, java.sql.Types.VARCHAR);
					} else {
						pstmt_talendMeter_DB.setString(7,
								row_talendMeter_METTER.job);
					}

					if (row_talendMeter_METTER.job_repository_id == null) {
						pstmt_talendMeter_DB.setNull(8, java.sql.Types.VARCHAR);
					} else {
						pstmt_talendMeter_DB.setString(8,
								row_talendMeter_METTER.job_repository_id);
					}

					if (row_talendMeter_METTER.job_version == null) {
						pstmt_talendMeter_DB.setNull(9, java.sql.Types.VARCHAR);
					} else {
						pstmt_talendMeter_DB.setString(9,
								row_talendMeter_METTER.job_version);
					}

					if (row_talendMeter_METTER.context == null) {
						pstmt_talendMeter_DB
								.setNull(10, java.sql.Types.VARCHAR);
					} else {
						pstmt_talendMeter_DB.setString(10,
								row_talendMeter_METTER.context);
					}

					if (row_talendMeter_METTER.origin == null) {
						pstmt_talendMeter_DB
								.setNull(11, java.sql.Types.VARCHAR);
					} else {
						pstmt_talendMeter_DB.setString(11,
								row_talendMeter_METTER.origin);
					}

					if (row_talendMeter_METTER.label == null) {
						pstmt_talendMeter_DB
								.setNull(12, java.sql.Types.VARCHAR);
					} else {
						pstmt_talendMeter_DB.setString(12,
								row_talendMeter_METTER.label);
					}

					if (row_talendMeter_METTER.count == null) {
						pstmt_talendMeter_DB
								.setNull(13, java.sql.Types.INTEGER);
					} else {
						pstmt_talendMeter_DB.setInt(13,
								row_talendMeter_METTER.count);
					}

					if (row_talendMeter_METTER.reference == null) {
						pstmt_talendMeter_DB
								.setNull(14, java.sql.Types.INTEGER);
					} else {
						pstmt_talendMeter_DB.setInt(14,
								row_talendMeter_METTER.reference);
					}

					if (row_talendMeter_METTER.thresholds == null) {
						pstmt_talendMeter_DB
								.setNull(15, java.sql.Types.VARCHAR);
					} else {
						pstmt_talendMeter_DB.setString(15,
								row_talendMeter_METTER.thresholds);
					}

					pstmt_talendMeter_DB.addBatch();
					nb_line_talendMeter_DB++;

					batchSizeCounter_talendMeter_DB++;

					if ((batchSize_talendMeter_DB > 0)
							&& (batchSize_talendMeter_DB <= batchSizeCounter_talendMeter_DB)) {
						try {
							int countSum_talendMeter_DB = 0;

							for (int countEach_talendMeter_DB : pstmt_talendMeter_DB
									.executeBatch()) {
								countSum_talendMeter_DB += (countEach_talendMeter_DB < 0 ? 0
										: countEach_talendMeter_DB);
							}

							insertedCount_talendMeter_DB += countSum_talendMeter_DB;

							batchSizeCounter_talendMeter_DB = 0;
						} catch (java.sql.BatchUpdateException e_talendMeter_DB) {
							java.sql.SQLException ne_talendMeter_DB = e_talendMeter_DB
									.getNextException(), sqle_talendMeter_DB = null;
							String errormessage_talendMeter_DB;
							if (ne_talendMeter_DB != null) {
								// build new exception to provide the original
								// cause
								sqle_talendMeter_DB = new java.sql.SQLException(
										e_talendMeter_DB.getMessage()
												+ "\ncaused by: "
												+ ne_talendMeter_DB
														.getMessage(),
										ne_talendMeter_DB.getSQLState(),
										ne_talendMeter_DB.getErrorCode(),
										ne_talendMeter_DB);
								errormessage_talendMeter_DB = sqle_talendMeter_DB
										.getMessage();
							} else {
								errormessage_talendMeter_DB = e_talendMeter_DB
										.getMessage();
							}

							int countSum_talendMeter_DB = 0;
							for (int countEach_talendMeter_DB : e_talendMeter_DB
									.getUpdateCounts()) {
								countSum_talendMeter_DB += (countEach_talendMeter_DB < 0 ? 0
										: countEach_talendMeter_DB);
							}

							insertedCount_talendMeter_DB += countSum_talendMeter_DB;

							System.err.println(errormessage_talendMeter_DB);

						}
					}

					tos_count_talendMeter_DB++;

					/**
					 * [talendMeter_DB main ] stop
					 */

					/**
					 * [talendMeter_DB process_data_begin ] start
					 */

					currentVirtualComponent = "talendMeter_DB";

					currentComponent = "talendMeter_DB";

					/**
					 * [talendMeter_DB process_data_begin ] stop
					 */

					/**
					 * [talendMeter_DB process_data_end ] start
					 */

					currentVirtualComponent = "talendMeter_DB";

					currentComponent = "talendMeter_DB";

					/**
					 * [talendMeter_DB process_data_end ] stop
					 */

					/**
					 * [talendMeter_METTER process_data_end ] start
					 */

					currentVirtualComponent = "talendMeter_METTER";

					currentComponent = "talendMeter_METTER";

					/**
					 * [talendMeter_METTER process_data_end ] stop
					 */

					/**
					 * [talendMeter_METTER end ] start
					 */

					currentVirtualComponent = "talendMeter_METTER";

					currentComponent = "talendMeter_METTER";

				}

				ok_Hash.put("talendMeter_METTER", true);
				end_Hash.put("talendMeter_METTER", System.currentTimeMillis());

				/**
				 * [talendMeter_METTER end ] stop
				 */

				/**
				 * [talendMeter_DB end ] start
				 */

				currentVirtualComponent = "talendMeter_DB";

				currentComponent = "talendMeter_DB";

				try {
					int countSum_talendMeter_DB = 0;
					if (pstmt_talendMeter_DB != null
							&& batchSizeCounter_talendMeter_DB > 0) {

						for (int countEach_talendMeter_DB : pstmt_talendMeter_DB
								.executeBatch()) {
							countSum_talendMeter_DB += (countEach_talendMeter_DB < 0 ? 0
									: countEach_talendMeter_DB);
						}

					}

					insertedCount_talendMeter_DB += countSum_talendMeter_DB;

				} catch (java.sql.BatchUpdateException e_talendMeter_DB) {
					java.sql.SQLException ne_talendMeter_DB = e_talendMeter_DB
							.getNextException(), sqle_talendMeter_DB = null;
					String errormessage_talendMeter_DB;
					if (ne_talendMeter_DB != null) {
						// build new exception to provide the original cause
						sqle_talendMeter_DB = new java.sql.SQLException(
								e_talendMeter_DB.getMessage() + "\ncaused by: "
										+ ne_talendMeter_DB.getMessage(),
								ne_talendMeter_DB.getSQLState(),
								ne_talendMeter_DB.getErrorCode(),
								ne_talendMeter_DB);
						errormessage_talendMeter_DB = sqle_talendMeter_DB
								.getMessage();
					} else {
						errormessage_talendMeter_DB = e_talendMeter_DB
								.getMessage();
					}

					int countSum_talendMeter_DB = 0;
					for (int countEach_talendMeter_DB : e_talendMeter_DB
							.getUpdateCounts()) {
						countSum_talendMeter_DB += (countEach_talendMeter_DB < 0 ? 0
								: countEach_talendMeter_DB);
					}

					insertedCount_talendMeter_DB += countSum_talendMeter_DB;

					System.err.println(errormessage_talendMeter_DB);

				}

				if (pstmt_talendMeter_DB != null) {

					SharedDBPreparedStatement
							.releasePreparedStatement(keyPsmt_talendMeter_DB);
				}
				resourceMap.put("statementClosed_talendMeter_DB", true);

				nb_line_deleted_talendMeter_DB = nb_line_deleted_talendMeter_DB
						+ deletedCount_talendMeter_DB;
				nb_line_update_talendMeter_DB = nb_line_update_talendMeter_DB
						+ updatedCount_talendMeter_DB;
				nb_line_inserted_talendMeter_DB = nb_line_inserted_talendMeter_DB
						+ insertedCount_talendMeter_DB;
				nb_line_rejected_talendMeter_DB = nb_line_rejected_talendMeter_DB
						+ rejectedCount_talendMeter_DB;

				globalMap.put("talendMeter_DB_NB_LINE", nb_line_talendMeter_DB);
				globalMap.put("talendMeter_DB_NB_LINE_UPDATED",
						nb_line_update_talendMeter_DB);
				globalMap.put("talendMeter_DB_NB_LINE_INSERTED",
						nb_line_inserted_talendMeter_DB);
				globalMap.put("talendMeter_DB_NB_LINE_DELETED",
						nb_line_deleted_talendMeter_DB);
				globalMap.put("talendMeter_DB_NB_LINE_REJECTED",
						nb_line_rejected_talendMeter_DB);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("Main" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("talendMeter_DB", true);
				end_Hash.put("talendMeter_DB", System.currentTimeMillis());

				/**
				 * [talendMeter_DB end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:talendMeter_METTER:sub_ok_talendMeter_connectionStatsLogs_Commit",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection(
						"sub_ok_talendMeter_connectionStatsLogs_Commit", 0,
						"ok");
			}

			connectionStatsLogs_CommitProcess(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [talendMeter_METTER finally ] start
				 */

				currentVirtualComponent = "talendMeter_METTER";

				currentComponent = "talendMeter_METTER";

				/**
				 * [talendMeter_METTER finally ] stop
				 */

				/**
				 * [talendMeter_DB finally ] start
				 */

				currentVirtualComponent = "talendMeter_DB";

				currentComponent = "talendMeter_DB";

				if (resourceMap.get("statementClosed_talendMeter_DB") == null) {
					java.sql.PreparedStatement pstmtToClose_talendMeter_DB = null;
					if ((pstmtToClose_talendMeter_DB = (java.sql.PreparedStatement) resourceMap
							.remove("pstmt_talendMeter_DB")) != null) {
						pstmtToClose_talendMeter_DB.close();
					}
				}

				/**
				 * [talendMeter_DB finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("talendMeter_METTER_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final evaluacion_docente_parcial_temporal evaluacion_docente_parcial_temporalClass = new evaluacion_docente_parcial_temporal();

		int exitCode = evaluacion_docente_parcial_temporalClass
				.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket
				// can't open
				System.err.println("The statistics socket port " + portStats
						+ " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = evaluacion_docente_parcial_temporal.class
					.getClassLoader().getResourceAsStream(
							"dmindicadores/evaluacion_docente_parcial_temporal_0_1/contexts/"
									+ contextStr + ".properties");
			if (inContext == null) {
				inContext = evaluacion_docente_parcial_temporal.class
						.getClassLoader()
						.getResourceAsStream(
								"config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				defaultProps.load(inContext);
				inContext.close();
				context = new ContextProperties(defaultProps);
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param
				// is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param
							.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "",
				resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();
		talendStats_STATS.addMessage("begin");

		this.globalResumeTicket = true;// to run tPreJob

		try {
			errorCode = null;
			preStaLogConProcess(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_preStaLogCon) {
			globalMap.put("preStaLogCon_SUBPROCESS_STATE", -1);

			e_preStaLogCon.printStackTrace();

		}

		try {
			talendStats_STATSProcess(globalMap);
		} catch (java.lang.Exception e) {
			e.printStackTrace();
		}

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tPostgresqlConnection_3Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tPostgresqlConnection_3) {
			globalMap.put("tPostgresqlConnection_3_SUBPROCESS_STATE", -1);

			e_tPostgresqlConnection_3.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		try {
			errorCode = null;
			tPostjob_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tPostjob_1) {
			globalMap.put("tPostjob_1_SUBPROCESS_STATE", -1);

			e_tPostjob_1.printStackTrace();

		}

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out
					.println((endUsedMemory - startUsedMemory)
							+ " bytes memory increase when running : evaluacion_docente_parcial_temporal");
		}
		talendStats_STATS.addMessage(status == "" ? "end" : status,
				(end - startTime));
		try {
			talendStats_STATSProcess(globalMap);
		} catch (java.lang.Exception e) {
			e.printStackTrace();
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {
		closeSqlDbConnections();

	}

	private void closeSqlDbConnections() {
		try {
			Object obj_conn;
			obj_conn = globalMap.remove("conn_tOracleConnection_1");
			if (null != obj_conn) {
				((java.sql.Connection) obj_conn).close();
			}
			obj_conn = globalMap.remove("conn_tPostgresqlConnection_3");
			if (null != obj_conn) {
				((java.sql.Connection) obj_conn).close();
			}
			obj_conn = globalMap.remove("conn_tPostgresqlConnection_2");
			if (null != obj_conn) {
				((java.sql.Connection) obj_conn).close();
			}
			obj_conn = globalMap.remove("conn_tPostgresqlConnection_4");
			if (null != obj_conn) {
				((java.sql.Connection) obj_conn).close();
			}
			obj_conn = globalMap.remove("conn_tPostgresqlConnection_5");
			if (null != obj_conn) {
				((java.sql.Connection) obj_conn).close();
			}
			obj_conn = globalMap.remove("conn_connectionStatsLogs");
			if (null != obj_conn) {
				((java.sql.Connection) obj_conn).close();
			}
		} catch (java.lang.Exception e) {
		}
	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		connections.put("conn_tOracleConnection_1",
				globalMap.get("conn_tOracleConnection_1"));
		connections.put("conn_tPostgresqlConnection_3",
				globalMap.get("conn_tPostgresqlConnection_3"));
		connections.put("conn_tPostgresqlConnection_2",
				globalMap.get("conn_tPostgresqlConnection_2"));
		connections.put("conn_tPostgresqlConnection_4",
				globalMap.get("conn_tPostgresqlConnection_4"));
		connections.put("conn_tPostgresqlConnection_5",
				globalMap.get("conn_tPostgresqlConnection_5"));
		connections.put("conn_connectionStatsLogs",
				globalMap.get("conn_connectionStatsLogs"));

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 339185 characters generated by Talend Open Studio for Data Integration on the
 * 17 de septiembre de 2018 05:00:52 PM COT
 ************************************************************************************************/
