// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package dmindicadores.dependencias_consolidado_0_1;

import routines.DataOperation;
import routines.OpenStreetMap;
import routines.TalendDataGenerator;
import routines.Relational;
import routines.Mathematical;
import routines.SHA;
import routines.GeometryUtility;
import routines.Numeric;
import routines.GeoOperation;
import routines.GeometryOperation;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.TalendDate;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")
/**
 * Job: dependencias_consolidado Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 7.1.1.20180829_1603-M3
 * @status 
 */
public class dependencias_consolidado implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "dependencias_consolidado";
	private final String projectName = "DMINDICADORES";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap
				.put(KEY_DB_DATASOURCES_RAW,
						new java.util.HashMap<String, javax.sql.DataSource>(
								dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent
						+ " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					dependencias_consolidado.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(dependencias_consolidado.this,
									new Object[] { e, currentComponent,
											globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tOracleClose_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tOracleClose_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlClose_4_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlClose_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tOracleConnection_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tOracleConnection_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlConnection_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlConnection_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tPostgresqlConnection_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlConnection_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tPostgresqlConnection_3_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlConnection_3_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tPostgresqlInput_3_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlOutput_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlInput_6_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlOutput_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tOracleInput_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tUnite_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlClose_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlClose_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlClose_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlClose_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlInput_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlInput_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlInput_4_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlInput_5_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostjob_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostjob_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row5_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row8_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row6_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tOracleClose_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlClose_4_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tOracleConnection_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlConnection_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlConnection_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlConnection_3_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlInput_3_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlInput_6_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tOracleInput_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlClose_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlClose_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlInput_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlInput_4_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlInput_5_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostjob_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tOracleClose_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tOracleClose_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tOracleClose_1 begin ] start
				 */

				ok_Hash.put("tOracleClose_1", false);
				start_Hash.put("tOracleClose_1", System.currentTimeMillis());

				currentComponent = "tOracleClose_1";

				int tos_count_tOracleClose_1 = 0;

				/**
				 * [tOracleClose_1 begin ] stop
				 */

				/**
				 * [tOracleClose_1 main ] start
				 */

				currentComponent = "tOracleClose_1";

				java.sql.Connection conn_tOracleClose_1 = (java.sql.Connection) globalMap
						.get("conn_tOracleConnection_1");

				if (conn_tOracleClose_1 != null
						&& !conn_tOracleClose_1.isClosed()) {

					conn_tOracleClose_1.close();

				}

				tos_count_tOracleClose_1++;

				/**
				 * [tOracleClose_1 main ] stop
				 */

				/**
				 * [tOracleClose_1 process_data_begin ] start
				 */

				currentComponent = "tOracleClose_1";

				/**
				 * [tOracleClose_1 process_data_begin ] stop
				 */

				/**
				 * [tOracleClose_1 process_data_end ] start
				 */

				currentComponent = "tOracleClose_1";

				/**
				 * [tOracleClose_1 process_data_end ] stop
				 */

				/**
				 * [tOracleClose_1 end ] start
				 */

				currentComponent = "tOracleClose_1";

				ok_Hash.put("tOracleClose_1", true);
				end_Hash.put("tOracleClose_1", System.currentTimeMillis());

				/**
				 * [tOracleClose_1 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tOracleClose_1:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk9", 0, "ok");
			}

			tPostgresqlClose_4Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tOracleClose_1 finally ] start
				 */

				currentComponent = "tOracleClose_1";

				/**
				 * [tOracleClose_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tOracleClose_1_SUBPROCESS_STATE", 1);
	}

	public void tPostgresqlClose_4Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlClose_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tPostgresqlClose_4 begin ] start
				 */

				ok_Hash.put("tPostgresqlClose_4", false);
				start_Hash
						.put("tPostgresqlClose_4", System.currentTimeMillis());

				currentComponent = "tPostgresqlClose_4";

				int tos_count_tPostgresqlClose_4 = 0;

				/**
				 * [tPostgresqlClose_4 begin ] stop
				 */

				/**
				 * [tPostgresqlClose_4 main ] start
				 */

				currentComponent = "tPostgresqlClose_4";

				java.sql.Connection conn_tPostgresqlClose_4 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_3");
				if (conn_tPostgresqlClose_4 != null
						&& !conn_tPostgresqlClose_4.isClosed()) {
					conn_tPostgresqlClose_4.close();
				}

				tos_count_tPostgresqlClose_4++;

				/**
				 * [tPostgresqlClose_4 main ] stop
				 */

				/**
				 * [tPostgresqlClose_4 process_data_begin ] start
				 */

				currentComponent = "tPostgresqlClose_4";

				/**
				 * [tPostgresqlClose_4 process_data_begin ] stop
				 */

				/**
				 * [tPostgresqlClose_4 process_data_end ] start
				 */

				currentComponent = "tPostgresqlClose_4";

				/**
				 * [tPostgresqlClose_4 process_data_end ] stop
				 */

				/**
				 * [tPostgresqlClose_4 end ] start
				 */

				currentComponent = "tPostgresqlClose_4";

				ok_Hash.put("tPostgresqlClose_4", true);
				end_Hash.put("tPostgresqlClose_4", System.currentTimeMillis());

				/**
				 * [tPostgresqlClose_4 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tPostgresqlClose_4 finally ] start
				 */

				currentComponent = "tPostgresqlClose_4";

				/**
				 * [tPostgresqlClose_4 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostgresqlClose_4_SUBPROCESS_STATE", 1);
	}

	public void tOracleConnection_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tOracleConnection_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tOracleConnection_1 begin ] start
				 */

				ok_Hash.put("tOracleConnection_1", false);
				start_Hash.put("tOracleConnection_1",
						System.currentTimeMillis());

				currentComponent = "tOracleConnection_1";

				int tos_count_tOracleConnection_1 = 0;

				String url_tOracleConnection_1 = "jdbc:oracle:thin:@"
						+ "academicaproduccion.c8an9arwoaua.us-east-1.rds.amazonaws.com"
						+ ":" + "1521" + ":" + "sudd";
				globalMap.put("connectionType_" + "tOracleConnection_1",
						"ORACLE_SID");

				String dbUser_tOracleConnection_1 = "datawarefnl2";

				final String decryptedPassword_tOracleConnection_1 = routines.system.PasswordEncryptUtil
						.decryptPassword("a1a2f764c96a45a6f8d4af7647a4e49f");
				String dbPwd_tOracleConnection_1 = decryptedPassword_tOracleConnection_1;

				java.sql.Connection conn_tOracleConnection_1 = null;

				String driverClass_tOracleConnection_1 = "oracle.jdbc.OracleDriver";
				java.lang.Class.forName(driverClass_tOracleConnection_1);

				conn_tOracleConnection_1 = java.sql.DriverManager
						.getConnection(url_tOracleConnection_1,
								dbUser_tOracleConnection_1,
								dbPwd_tOracleConnection_1);

				globalMap.put("conn_tOracleConnection_1",
						conn_tOracleConnection_1);
				if (null != conn_tOracleConnection_1) {

					conn_tOracleConnection_1.setAutoCommit(false);
				}
				globalMap
						.put("host_" + "tOracleConnection_1",
								"academicaproduccion.c8an9arwoaua.us-east-1.rds.amazonaws.com");
				globalMap.put("port_" + "tOracleConnection_1", "1521");
				globalMap.put("dbname_" + "tOracleConnection_1", "sudd");

				globalMap.put("conn_" + "tOracleConnection_1",
						conn_tOracleConnection_1);
				globalMap.put("dbschema_" + "tOracleConnection_1", "MNTAC");
				globalMap.put("username_" + "tOracleConnection_1",
						"datawarefnl2");
				globalMap.put("password_" + "tOracleConnection_1",
						dbPwd_tOracleConnection_1);

				/**
				 * [tOracleConnection_1 begin ] stop
				 */

				/**
				 * [tOracleConnection_1 main ] start
				 */

				currentComponent = "tOracleConnection_1";

				tos_count_tOracleConnection_1++;

				/**
				 * [tOracleConnection_1 main ] stop
				 */

				/**
				 * [tOracleConnection_1 process_data_begin ] start
				 */

				currentComponent = "tOracleConnection_1";

				/**
				 * [tOracleConnection_1 process_data_begin ] stop
				 */

				/**
				 * [tOracleConnection_1 process_data_end ] start
				 */

				currentComponent = "tOracleConnection_1";

				/**
				 * [tOracleConnection_1 process_data_end ] stop
				 */

				/**
				 * [tOracleConnection_1 end ] start
				 */

				currentComponent = "tOracleConnection_1";

				ok_Hash.put("tOracleConnection_1", true);
				end_Hash.put("tOracleConnection_1", System.currentTimeMillis());

				/**
				 * [tOracleConnection_1 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tOracleConnection_1:OnSubjobOk",
						"", Thread.currentThread().getId() + "", "", "", "",
						"", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk4", 0, "ok");
			}

			tPostgresqlConnection_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tOracleConnection_1 finally ] start
				 */

				currentComponent = "tOracleConnection_1";

				/**
				 * [tOracleConnection_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tOracleConnection_1_SUBPROCESS_STATE", 1);
	}

	public void tPostgresqlConnection_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlConnection_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tPostgresqlConnection_1 begin ] start
				 */

				ok_Hash.put("tPostgresqlConnection_1", false);
				start_Hash.put("tPostgresqlConnection_1",
						System.currentTimeMillis());

				currentComponent = "tPostgresqlConnection_1";

				int tos_count_tPostgresqlConnection_1 = 0;

				String url_tPostgresqlConnection_1 = "jdbc:postgresql://"
						+ "10.20.0.88" + ":" + "5432" + "/" + "DMINDICADORES";

				String dbUser_tPostgresqlConnection_1 = "postgres";

				final String decryptedPassword_tPostgresqlConnection_1 = routines.system.PasswordEncryptUtil
						.decryptPassword("610243e4ca33e325f4f7aba1746784ea");
				String dbPwd_tPostgresqlConnection_1 = decryptedPassword_tPostgresqlConnection_1;

				java.sql.Connection conn_tPostgresqlConnection_1 = null;

				java.util.Enumeration<java.sql.Driver> drivers_tPostgresqlConnection_1 = java.sql.DriverManager
						.getDrivers();
				while (drivers_tPostgresqlConnection_1.hasMoreElements()) {
					java.sql.Driver d_tPostgresqlConnection_1 = drivers_tPostgresqlConnection_1
							.nextElement();
					java.util.List<String> driverList_tPostgresqlConnection_1 = java.util.Arrays
							.<String> asList("com.amazon.redshift.jdbc.Driver",
									"com.amazon.redshift.jdbc41.Driver");
					if (driverList_tPostgresqlConnection_1
							.contains(d_tPostgresqlConnection_1.getClass()
									.getName())) {
						try {
							java.sql.DriverManager
									.deregisterDriver(d_tPostgresqlConnection_1);
							java.sql.DriverManager
									.registerDriver(d_tPostgresqlConnection_1);
						} catch (java.lang.Exception e_tPostgresqlConnection_1) {
							// do nothing
						}
					}
				}
				String driverClass_tPostgresqlConnection_1 = "org.postgresql.Driver";
				java.lang.Class.forName(driverClass_tPostgresqlConnection_1);

				conn_tPostgresqlConnection_1 = java.sql.DriverManager
						.getConnection(url_tPostgresqlConnection_1,
								dbUser_tPostgresqlConnection_1,
								dbPwd_tPostgresqlConnection_1);

				globalMap.put("conn_tPostgresqlConnection_1",
						conn_tPostgresqlConnection_1);
				if (null != conn_tPostgresqlConnection_1) {

					conn_tPostgresqlConnection_1.setAutoCommit(true);
				}

				globalMap.put("schema_" + "tPostgresqlConnection_1", "public");

				globalMap.put("conn_" + "tPostgresqlConnection_1",
						conn_tPostgresqlConnection_1);

				/**
				 * [tPostgresqlConnection_1 begin ] stop
				 */

				/**
				 * [tPostgresqlConnection_1 main ] start
				 */

				currentComponent = "tPostgresqlConnection_1";

				tos_count_tPostgresqlConnection_1++;

				/**
				 * [tPostgresqlConnection_1 main ] stop
				 */

				/**
				 * [tPostgresqlConnection_1 process_data_begin ] start
				 */

				currentComponent = "tPostgresqlConnection_1";

				/**
				 * [tPostgresqlConnection_1 process_data_begin ] stop
				 */

				/**
				 * [tPostgresqlConnection_1 process_data_end ] start
				 */

				currentComponent = "tPostgresqlConnection_1";

				/**
				 * [tPostgresqlConnection_1 process_data_end ] stop
				 */

				/**
				 * [tPostgresqlConnection_1 end ] start
				 */

				currentComponent = "tPostgresqlConnection_1";

				ok_Hash.put("tPostgresqlConnection_1", true);
				end_Hash.put("tPostgresqlConnection_1",
						System.currentTimeMillis());

				/**
				 * [tPostgresqlConnection_1 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tPostgresqlConnection_1:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
			}

			tPostgresqlConnection_2Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tPostgresqlConnection_1 finally ] start
				 */

				currentComponent = "tPostgresqlConnection_1";

				/**
				 * [tPostgresqlConnection_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostgresqlConnection_1_SUBPROCESS_STATE", 1);
	}

	public void tPostgresqlConnection_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlConnection_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tPostgresqlConnection_2 begin ] start
				 */

				ok_Hash.put("tPostgresqlConnection_2", false);
				start_Hash.put("tPostgresqlConnection_2",
						System.currentTimeMillis());

				currentComponent = "tPostgresqlConnection_2";

				int tos_count_tPostgresqlConnection_2 = 0;

				String url_tPostgresqlConnection_2 = "jdbc:postgresql://"
						+ "10.20.0.88" + ":" + "5432" + "/" + "oikos";

				String dbUser_tPostgresqlConnection_2 = "postgres";

				final String decryptedPassword_tPostgresqlConnection_2 = routines.system.PasswordEncryptUtil
						.decryptPassword("610243e4ca33e325f4f7aba1746784ea");
				String dbPwd_tPostgresqlConnection_2 = decryptedPassword_tPostgresqlConnection_2;

				java.sql.Connection conn_tPostgresqlConnection_2 = null;

				java.util.Enumeration<java.sql.Driver> drivers_tPostgresqlConnection_2 = java.sql.DriverManager
						.getDrivers();
				while (drivers_tPostgresqlConnection_2.hasMoreElements()) {
					java.sql.Driver d_tPostgresqlConnection_2 = drivers_tPostgresqlConnection_2
							.nextElement();
					java.util.List<String> driverList_tPostgresqlConnection_2 = java.util.Arrays
							.<String> asList("com.amazon.redshift.jdbc.Driver",
									"com.amazon.redshift.jdbc41.Driver");
					if (driverList_tPostgresqlConnection_2
							.contains(d_tPostgresqlConnection_2.getClass()
									.getName())) {
						try {
							java.sql.DriverManager
									.deregisterDriver(d_tPostgresqlConnection_2);
							java.sql.DriverManager
									.registerDriver(d_tPostgresqlConnection_2);
						} catch (java.lang.Exception e_tPostgresqlConnection_2) {
							// do nothing
						}
					}
				}
				String driverClass_tPostgresqlConnection_2 = "org.postgresql.Driver";
				java.lang.Class.forName(driverClass_tPostgresqlConnection_2);

				conn_tPostgresqlConnection_2 = java.sql.DriverManager
						.getConnection(url_tPostgresqlConnection_2,
								dbUser_tPostgresqlConnection_2,
								dbPwd_tPostgresqlConnection_2);

				globalMap.put("conn_tPostgresqlConnection_2",
						conn_tPostgresqlConnection_2);
				if (null != conn_tPostgresqlConnection_2) {

					conn_tPostgresqlConnection_2.setAutoCommit(true);
				}

				globalMap.put("schema_" + "tPostgresqlConnection_2", "");

				globalMap.put("conn_" + "tPostgresqlConnection_2",
						conn_tPostgresqlConnection_2);

				/**
				 * [tPostgresqlConnection_2 begin ] stop
				 */

				/**
				 * [tPostgresqlConnection_2 main ] start
				 */

				currentComponent = "tPostgresqlConnection_2";

				tos_count_tPostgresqlConnection_2++;

				/**
				 * [tPostgresqlConnection_2 main ] stop
				 */

				/**
				 * [tPostgresqlConnection_2 process_data_begin ] start
				 */

				currentComponent = "tPostgresqlConnection_2";

				/**
				 * [tPostgresqlConnection_2 process_data_begin ] stop
				 */

				/**
				 * [tPostgresqlConnection_2 process_data_end ] start
				 */

				currentComponent = "tPostgresqlConnection_2";

				/**
				 * [tPostgresqlConnection_2 process_data_end ] stop
				 */

				/**
				 * [tPostgresqlConnection_2 end ] start
				 */

				currentComponent = "tPostgresqlConnection_2";

				ok_Hash.put("tPostgresqlConnection_2", true);
				end_Hash.put("tPostgresqlConnection_2",
						System.currentTimeMillis());

				/**
				 * [tPostgresqlConnection_2 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tPostgresqlConnection_2:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk8", 0, "ok");
			}

			tPostgresqlConnection_3Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tPostgresqlConnection_2 finally ] start
				 */

				currentComponent = "tPostgresqlConnection_2";

				/**
				 * [tPostgresqlConnection_2 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostgresqlConnection_2_SUBPROCESS_STATE", 1);
	}

	public void tPostgresqlConnection_3Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlConnection_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tPostgresqlConnection_3 begin ] start
				 */

				ok_Hash.put("tPostgresqlConnection_3", false);
				start_Hash.put("tPostgresqlConnection_3",
						System.currentTimeMillis());

				currentComponent = "tPostgresqlConnection_3";

				int tos_count_tPostgresqlConnection_3 = 0;

				String url_tPostgresqlConnection_3 = "jdbc:postgresql://"
						+ "postgresproduccion.c8an9arwoaua.us-east-1.rds.amazonaws.com"
						+ ":" + "5432" + "/" + "udistrital";

				String dbUser_tPostgresqlConnection_3 = "directorio_unico";

				final String decryptedPassword_tPostgresqlConnection_3 = routines.system.PasswordEncryptUtil
						.decryptPassword("1abe64a0cd854b0ef4f7aba1746784ea");
				String dbPwd_tPostgresqlConnection_3 = decryptedPassword_tPostgresqlConnection_3;

				java.sql.Connection conn_tPostgresqlConnection_3 = null;

				java.util.Enumeration<java.sql.Driver> drivers_tPostgresqlConnection_3 = java.sql.DriverManager
						.getDrivers();
				while (drivers_tPostgresqlConnection_3.hasMoreElements()) {
					java.sql.Driver d_tPostgresqlConnection_3 = drivers_tPostgresqlConnection_3
							.nextElement();
					java.util.List<String> driverList_tPostgresqlConnection_3 = java.util.Arrays
							.<String> asList("com.amazon.redshift.jdbc.Driver",
									"com.amazon.redshift.jdbc41.Driver");
					if (driverList_tPostgresqlConnection_3
							.contains(d_tPostgresqlConnection_3.getClass()
									.getName())) {
						try {
							java.sql.DriverManager
									.deregisterDriver(d_tPostgresqlConnection_3);
							java.sql.DriverManager
									.registerDriver(d_tPostgresqlConnection_3);
						} catch (java.lang.Exception e_tPostgresqlConnection_3) {
							// do nothing
						}
					}
				}
				String driverClass_tPostgresqlConnection_3 = "org.postgresql.Driver";
				java.lang.Class.forName(driverClass_tPostgresqlConnection_3);

				conn_tPostgresqlConnection_3 = java.sql.DriverManager
						.getConnection(url_tPostgresqlConnection_3,
								dbUser_tPostgresqlConnection_3,
								dbPwd_tPostgresqlConnection_3);

				globalMap.put("conn_tPostgresqlConnection_3",
						conn_tPostgresqlConnection_3);
				if (null != conn_tPostgresqlConnection_3) {

					conn_tPostgresqlConnection_3.setAutoCommit(false);
				}

				globalMap.put("schema_" + "tPostgresqlConnection_3", "argo");

				globalMap.put("conn_" + "tPostgresqlConnection_3",
						conn_tPostgresqlConnection_3);

				/**
				 * [tPostgresqlConnection_3 begin ] stop
				 */

				/**
				 * [tPostgresqlConnection_3 main ] start
				 */

				currentComponent = "tPostgresqlConnection_3";

				tos_count_tPostgresqlConnection_3++;

				/**
				 * [tPostgresqlConnection_3 main ] stop
				 */

				/**
				 * [tPostgresqlConnection_3 process_data_begin ] start
				 */

				currentComponent = "tPostgresqlConnection_3";

				/**
				 * [tPostgresqlConnection_3 process_data_begin ] stop
				 */

				/**
				 * [tPostgresqlConnection_3 process_data_end ] start
				 */

				currentComponent = "tPostgresqlConnection_3";

				/**
				 * [tPostgresqlConnection_3 process_data_end ] stop
				 */

				/**
				 * [tPostgresqlConnection_3 end ] start
				 */

				currentComponent = "tPostgresqlConnection_3";

				ok_Hash.put("tPostgresqlConnection_3", true);
				end_Hash.put("tPostgresqlConnection_3",
						System.currentTimeMillis());

				/**
				 * [tPostgresqlConnection_3 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tPostgresqlConnection_3:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk6", 0, "ok");
			}

			tPostgresqlInput_3Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tPostgresqlConnection_3 finally ] start
				 */

				currentComponent = "tPostgresqlConnection_3";

				/**
				 * [tPostgresqlConnection_3 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostgresqlConnection_3_SUBPROCESS_STATE", 1);
	}

	public static class funcionarios_dependenciaStruct implements
			routines.system.IPersistableRow<funcionarios_dependenciaStruct> {
		final static byte[] commonByteArrayLock_DMINDICADORES_dependencias_consolidado = new byte[0];
		static byte[] commonByteArray_DMINDICADORES_dependencias_consolidado = new byte[0];

		public int id_master;

		public int getId_master() {
			return this.id_master;
		}

		public String nombre;

		public String getNombre() {
			return this.nombre;
		}

		public String telefono_dependencia;

		public String getTelefono_dependencia() {
			return this.telefono_dependencia;
		}

		public String correo_electronico;

		public String getCorreo_electronico() {
			return this.correo_electronico;
		}

		public String funcionario;

		public String getFuncionario() {
			return this.funcionario;
		}

		public String tipo_contrato;

		public String getTipo_contrato() {
			return this.tipo_contrato;
		}

		public String cargo;

		public String getCargo() {
			return this.cargo;
		}

		public Double sueldo;

		public Double getSueldo() {
			return this.sueldo;
		}

		public String objeto_contrato;

		public String getObjeto_contrato() {
			return this.objeto_contrato;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DMINDICADORES_dependencias_consolidado.length) {
					if (length < 1024
							&& commonByteArray_DMINDICADORES_dependencias_consolidado.length == 0) {
						commonByteArray_DMINDICADORES_dependencias_consolidado = new byte[1024];
					} else {
						commonByteArray_DMINDICADORES_dependencias_consolidado = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_DMINDICADORES_dependencias_consolidado,
						0, length);
				strReturn = new String(
						commonByteArray_DMINDICADORES_dependencias_consolidado,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DMINDICADORES_dependencias_consolidado) {

				try {

					int length = 0;

					this.id_master = dis.readInt();

					this.nombre = readString(dis);

					this.telefono_dependencia = readString(dis);

					this.correo_electronico = readString(dis);

					this.funcionario = readString(dis);

					this.tipo_contrato = readString(dis);

					this.cargo = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.sueldo = null;
					} else {
						this.sueldo = dis.readDouble();
					}

					this.objeto_contrato = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id_master);

				// String

				writeString(this.nombre, dos);

				// String

				writeString(this.telefono_dependencia, dos);

				// String

				writeString(this.correo_electronico, dos);

				// String

				writeString(this.funcionario, dos);

				// String

				writeString(this.tipo_contrato, dos);

				// String

				writeString(this.cargo, dos);

				// Double

				if (this.sueldo == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.sueldo);
				}

				// String

				writeString(this.objeto_contrato, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_master=" + String.valueOf(id_master));
			sb.append(",nombre=" + nombre);
			sb.append(",telefono_dependencia=" + telefono_dependencia);
			sb.append(",correo_electronico=" + correo_electronico);
			sb.append(",funcionario=" + funcionario);
			sb.append(",tipo_contrato=" + tipo_contrato);
			sb.append(",cargo=" + cargo);
			sb.append(",sueldo=" + String.valueOf(sueldo));
			sb.append(",objeto_contrato=" + objeto_contrato);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(funcionarios_dependenciaStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_DMINDICADORES_dependencias_consolidado = new byte[0];
		static byte[] commonByteArray_DMINDICADORES_dependencias_consolidado = new byte[0];

		public int id_master;

		public int getId_master() {
			return this.id_master;
		}

		public String id_gedep;

		public String getId_gedep() {
			return this.id_gedep;
		}

		public String id_acad;

		public String getId_acad() {
			return this.id_acad;
		}

		public String id_argo;

		public String getId_argo() {
			return this.id_argo;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DMINDICADORES_dependencias_consolidado.length) {
					if (length < 1024
							&& commonByteArray_DMINDICADORES_dependencias_consolidado.length == 0) {
						commonByteArray_DMINDICADORES_dependencias_consolidado = new byte[1024];
					} else {
						commonByteArray_DMINDICADORES_dependencias_consolidado = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_DMINDICADORES_dependencias_consolidado,
						0, length);
				strReturn = new String(
						commonByteArray_DMINDICADORES_dependencias_consolidado,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DMINDICADORES_dependencias_consolidado) {

				try {

					int length = 0;

					this.id_master = dis.readInt();

					this.id_gedep = readString(dis);

					this.id_acad = readString(dis);

					this.id_argo = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id_master);

				// String

				writeString(this.id_gedep, dos);

				// String

				writeString(this.id_acad, dos);

				// String

				writeString(this.id_argo, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_master=" + String.valueOf(id_master));
			sb.append(",id_gedep=" + id_gedep);
			sb.append(",id_acad=" + id_acad);
			sb.append(",id_argo=" + id_argo);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tPostgresqlInput_3Struct implements
			routines.system.IPersistableRow<after_tPostgresqlInput_3Struct> {
		final static byte[] commonByteArrayLock_DMINDICADORES_dependencias_consolidado = new byte[0];
		static byte[] commonByteArray_DMINDICADORES_dependencias_consolidado = new byte[0];

		public int id_master;

		public int getId_master() {
			return this.id_master;
		}

		public String id_gedep;

		public String getId_gedep() {
			return this.id_gedep;
		}

		public String id_acad;

		public String getId_acad() {
			return this.id_acad;
		}

		public String id_argo;

		public String getId_argo() {
			return this.id_argo;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DMINDICADORES_dependencias_consolidado.length) {
					if (length < 1024
							&& commonByteArray_DMINDICADORES_dependencias_consolidado.length == 0) {
						commonByteArray_DMINDICADORES_dependencias_consolidado = new byte[1024];
					} else {
						commonByteArray_DMINDICADORES_dependencias_consolidado = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_DMINDICADORES_dependencias_consolidado,
						0, length);
				strReturn = new String(
						commonByteArray_DMINDICADORES_dependencias_consolidado,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DMINDICADORES_dependencias_consolidado) {

				try {

					int length = 0;

					this.id_master = dis.readInt();

					this.id_gedep = readString(dis);

					this.id_acad = readString(dis);

					this.id_argo = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id_master);

				// String

				writeString(this.id_gedep, dos);

				// String

				writeString(this.id_acad, dos);

				// String

				writeString(this.id_argo, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_master=" + String.valueOf(id_master));
			sb.append(",id_gedep=" + id_gedep);
			sb.append(",id_acad=" + id_acad);
			sb.append(",id_argo=" + id_argo);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tPostgresqlInput_3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tPostgresqlInput_3Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlInput_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				tOracleInput_1Process(globalMap);
				tPostgresqlInput_1Process(globalMap);

				row1Struct row1 = new row1Struct();
				funcionarios_dependenciaStruct funcionarios_dependencia = new funcionarios_dependenciaStruct();

				/**
				 * [tPostgresqlOutput_1 begin ] start
				 */

				ok_Hash.put("tPostgresqlOutput_1", false);
				start_Hash.put("tPostgresqlOutput_1",
						System.currentTimeMillis());

				currentComponent = "tPostgresqlOutput_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection(
								"funcionarios_dependencia" + iterateId, 0, 0);

					}
				}

				int tos_count_tPostgresqlOutput_1 = 0;

				String dbschema_tPostgresqlOutput_1 = null;
				dbschema_tPostgresqlOutput_1 = (String) globalMap.get("schema_"
						+ "tPostgresqlConnection_1");

				String tableName_tPostgresqlOutput_1 = null;
				if (dbschema_tPostgresqlOutput_1 == null
						|| dbschema_tPostgresqlOutput_1.trim().length() == 0) {
					tableName_tPostgresqlOutput_1 = "funcionarios_dependencias";
				} else {
					tableName_tPostgresqlOutput_1 = dbschema_tPostgresqlOutput_1
							+ "\".\"" + "funcionarios_dependencias";
				}

				int nb_line_tPostgresqlOutput_1 = 0;
				int nb_line_update_tPostgresqlOutput_1 = 0;
				int nb_line_inserted_tPostgresqlOutput_1 = 0;
				int nb_line_deleted_tPostgresqlOutput_1 = 0;
				int nb_line_rejected_tPostgresqlOutput_1 = 0;

				int deletedCount_tPostgresqlOutput_1 = 0;
				int updatedCount_tPostgresqlOutput_1 = 0;
				int insertedCount_tPostgresqlOutput_1 = 0;
				int rejectedCount_tPostgresqlOutput_1 = 0;

				boolean whetherReject_tPostgresqlOutput_1 = false;

				java.sql.Connection conn_tPostgresqlOutput_1 = null;
				String dbUser_tPostgresqlOutput_1 = null;

				conn_tPostgresqlOutput_1 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_1");

				int count_tPostgresqlOutput_1 = 0;
				java.sql.DatabaseMetaData dbMetaData_tPostgresqlOutput_1 = conn_tPostgresqlOutput_1
						.getMetaData();
				boolean whetherExist_tPostgresqlOutput_1 = false;
				try (java.sql.ResultSet rsTable_tPostgresqlOutput_1 = dbMetaData_tPostgresqlOutput_1
						.getTables(null, null, null, new String[] { "TABLE" })) {
					String defaultSchema_tPostgresqlOutput_1 = "public";
					if (dbschema_tPostgresqlOutput_1 == null
							|| dbschema_tPostgresqlOutput_1.trim().length() == 0) {
						try (java.sql.Statement stmtSchema_tPostgresqlOutput_1 = conn_tPostgresqlOutput_1
								.createStatement();
								java.sql.ResultSet rsSchema_tPostgresqlOutput_1 = stmtSchema_tPostgresqlOutput_1
										.executeQuery("select current_schema() ")) {
							while (rsSchema_tPostgresqlOutput_1.next()) {
								defaultSchema_tPostgresqlOutput_1 = rsSchema_tPostgresqlOutput_1
										.getString("current_schema");
							}
						}
					}
					while (rsTable_tPostgresqlOutput_1.next()) {
						String table_tPostgresqlOutput_1 = rsTable_tPostgresqlOutput_1
								.getString("TABLE_NAME");
						String schema_tPostgresqlOutput_1 = rsTable_tPostgresqlOutput_1
								.getString("TABLE_SCHEM");
						if (table_tPostgresqlOutput_1
								.equals("funcionarios_dependencias")
								&& (schema_tPostgresqlOutput_1
										.equals(dbschema_tPostgresqlOutput_1) || ((dbschema_tPostgresqlOutput_1 == null || dbschema_tPostgresqlOutput_1
										.trim().length() == 0) && defaultSchema_tPostgresqlOutput_1
										.equals(schema_tPostgresqlOutput_1)))) {
							whetherExist_tPostgresqlOutput_1 = true;
							break;
						}
					}
				}
				if (whetherExist_tPostgresqlOutput_1) {
					try (java.sql.Statement stmtDrop_tPostgresqlOutput_1 = conn_tPostgresqlOutput_1
							.createStatement()) {
						stmtDrop_tPostgresqlOutput_1.execute("DROP TABLE \""
								+ tableName_tPostgresqlOutput_1 + "\"");
					}
				}
				try (java.sql.Statement stmtCreate_tPostgresqlOutput_1 = conn_tPostgresqlOutput_1
						.createStatement()) {
					stmtCreate_tPostgresqlOutput_1
							.execute("CREATE TABLE \""
									+ tableName_tPostgresqlOutput_1
									+ "\"(\"id_master\" INT4  not null ,\"nombre\" VARCHAR(10485760)   not null ,\"telefono_dependencia\" VARCHAR(500)   not null ,\"correo_electronico\" VARCHAR(10485760)  ,\"funcionario\" VARCHAR(255)  ,\"tipo_contrato\" VARCHAR(255)  ,\"cargo\" VARCHAR(255)  ,\"sueldo\" FLOAT8 ,\"objeto_contrato\" VARCHAR )");
				}
				String insert_tPostgresqlOutput_1 = "INSERT INTO \""
						+ tableName_tPostgresqlOutput_1
						+ "\" (\"id_master\",\"nombre\",\"telefono_dependencia\",\"correo_electronico\",\"funcionario\",\"tipo_contrato\",\"cargo\",\"sueldo\",\"objeto_contrato\") VALUES (?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tPostgresqlOutput_1 = conn_tPostgresqlOutput_1
						.prepareStatement(insert_tPostgresqlOutput_1);
				resourceMap.put("pstmt_tPostgresqlOutput_1",
						pstmt_tPostgresqlOutput_1);

				/**
				 * [tPostgresqlOutput_1 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row1" + iterateId, 0, 0);

					}
				}

				int tos_count_tMap_1 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) globalMap
						.get("tHash_Lookup_row2"));

				row2Struct row2HashKey = new row2Struct();
				row2Struct row2Default = new row2Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct> tHash_Lookup_row5 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct>) globalMap
						.get("tHash_Lookup_row5"));

				row5Struct row5HashKey = new row5Struct();
				row5Struct row5Default = new row5Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				funcionarios_dependenciaStruct funcionarios_dependencia_tmp = new funcionarios_dependenciaStruct();
				// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tPostgresqlInput_3 begin ] start
				 */

				ok_Hash.put("tPostgresqlInput_3", false);
				start_Hash
						.put("tPostgresqlInput_3", System.currentTimeMillis());

				currentComponent = "tPostgresqlInput_3";

				int tos_count_tPostgresqlInput_3 = 0;

				int nb_line_tPostgresqlInput_3 = 0;
				java.sql.Connection conn_tPostgresqlInput_3 = null;
				conn_tPostgresqlInput_3 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_1");

				java.sql.Statement stmt_tPostgresqlInput_3 = conn_tPostgresqlInput_3
						.createStatement();

				String dbquery_tPostgresqlInput_3 = "SELECT id_master, id_gedep, id_acad, id_argo\n  FROM mapeo_dependencias where id_master>5 and id_master<174";

				globalMap.put("tPostgresqlInput_3_QUERY",
						dbquery_tPostgresqlInput_3);
				java.sql.ResultSet rs_tPostgresqlInput_3 = null;

				try {
					rs_tPostgresqlInput_3 = stmt_tPostgresqlInput_3
							.executeQuery(dbquery_tPostgresqlInput_3);
					java.sql.ResultSetMetaData rsmd_tPostgresqlInput_3 = rs_tPostgresqlInput_3
							.getMetaData();
					int colQtyInRs_tPostgresqlInput_3 = rsmd_tPostgresqlInput_3
							.getColumnCount();

					String tmpContent_tPostgresqlInput_3 = null;

					while (rs_tPostgresqlInput_3.next()) {
						nb_line_tPostgresqlInput_3++;

						if (colQtyInRs_tPostgresqlInput_3 < 1) {
							row1.id_master = 0;
						} else {

							if (rs_tPostgresqlInput_3.getObject(1) != null) {
								row1.id_master = rs_tPostgresqlInput_3
										.getInt(1);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tPostgresqlInput_3 < 2) {
							row1.id_gedep = null;
						} else {

							row1.id_gedep = routines.system.JDBCUtil.getString(
									rs_tPostgresqlInput_3, 2, false);
						}
						if (colQtyInRs_tPostgresqlInput_3 < 3) {
							row1.id_acad = null;
						} else {

							row1.id_acad = routines.system.JDBCUtil.getString(
									rs_tPostgresqlInput_3, 3, false);
						}
						if (colQtyInRs_tPostgresqlInput_3 < 4) {
							row1.id_argo = null;
						} else {

							row1.id_argo = routines.system.JDBCUtil.getString(
									rs_tPostgresqlInput_3, 4, false);
						}

						/**
						 * [tPostgresqlInput_3 begin ] stop
						 */

						/**
						 * [tPostgresqlInput_3 main ] start
						 */

						currentComponent = "tPostgresqlInput_3";

						tos_count_tPostgresqlInput_3++;

						/**
						 * [tPostgresqlInput_3 main ] stop
						 */

						/**
						 * [tPostgresqlInput_3 process_data_begin ] start
						 */

						currentComponent = "tPostgresqlInput_3";

						/**
						 * [tPostgresqlInput_3 process_data_begin ] stop
						 */

						/**
						 * [tMap_1 main ] start
						 */

						currentComponent = "tMap_1";

						// row1
						// row1

						if (execStat) {
							runStat.updateStatOnConnection("row1" + iterateId,
									1, 1);
						}

						boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_1 = false;
						boolean mainRowRejected_tMap_1 = false;

						// /////////////////////////////////////////////
						// Starting Lookup Table "row2"
						// /////////////////////////////////////////////

						boolean forceLooprow2 = false;

						row2Struct row2ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_1 = false;

							Object exprKeyValue_row2__id = row1.id_master;
							if (exprKeyValue_row2__id == null) {
								hasCasePrimitiveKeyWithNull_tMap_1 = true;
							} else {
								row2HashKey.id = (int) (Integer) exprKeyValue_row2__id;
							}

							row2HashKey.hashCodeDirty = true;

							if (!hasCasePrimitiveKeyWithNull_tMap_1) { // G_TM_M_091

								tHash_Lookup_row2.lookup(row2HashKey);

							} // G_TM_M_091

						} // G_TM_M_020

						if (tHash_Lookup_row2 != null
								&& tHash_Lookup_row2.getCount(row2HashKey) > 1) { // G
																					// 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row2' and it contains more one result from keys :  row2.id = '"
							// + row2HashKey.id + "'");
						} // G 071

						row2Struct row2 = null;

						row2Struct fromLookup_row2 = null;
						row2 = row2Default;

						if (tHash_Lookup_row2 != null
								&& tHash_Lookup_row2.hasNext()) { // G 099

							fromLookup_row2 = tHash_Lookup_row2.next();

						} // G 099

						if (fromLookup_row2 != null) {
							row2 = fromLookup_row2;
						}

						// /////////////////////////////////////////////
						// Starting Lookup Table "row5"
						// /////////////////////////////////////////////

						boolean forceLooprow5 = false;

						row5Struct row5ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_1 = false;

							row5HashKey.codigo_dependencia = row1.id_gedep != null ? row1.id_gedep
									: row1.id_acad != null ? row1.id_acad
											: row1.id_argo != null ? row1.id_argo
													: "0";

							row5HashKey.hashCodeDirty = true;

							tHash_Lookup_row5.lookup(row5HashKey);

							if (!tHash_Lookup_row5.hasNext()) { // G_TM_M_090

								forceLooprow5 = true;

							} // G_TM_M_090

						} // G_TM_M_020

						else { // G 20 - G 21
							forceLooprow5 = true;
						} // G 21

						row5Struct row5 = null;

						while ((tHash_Lookup_row5 != null && tHash_Lookup_row5
								.hasNext()) || forceLooprow5) { // G_TM_M_043

							// CALL close loop of lookup 'row5'

							row5Struct fromLookup_row5 = null;
							row5 = row5Default;

							if (!forceLooprow5) { // G 46

								fromLookup_row5 = tHash_Lookup_row5.next();

								if (fromLookup_row5 != null) {
									row5 = fromLookup_row5;
								}

							} // G 46

							forceLooprow5 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
								// ###############################
								// # Output tables

								funcionarios_dependencia = null;

								// # Output table : 'funcionarios_dependencia'
								funcionarios_dependencia_tmp.id_master = row1.id_master;
								funcionarios_dependencia_tmp.nombre = row2.nombre;
								funcionarios_dependencia_tmp.telefono_dependencia = row2.telefono_dependencia;
								funcionarios_dependencia_tmp.correo_electronico = row2.correo_electronico;
								funcionarios_dependencia_tmp.funcionario = row5.funcionario;
								funcionarios_dependencia_tmp.tipo_contrato = row5.tipo_contrato;
								funcionarios_dependencia_tmp.cargo = row5.cargo;
								funcionarios_dependencia_tmp.sueldo = row5.sueldo;
								funcionarios_dependencia_tmp.objeto_contrato = null;
								funcionarios_dependencia = funcionarios_dependencia_tmp;
								// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_1 = false;

							tos_count_tMap_1++;

							/**
							 * [tMap_1 main ] stop
							 */

							/**
							 * [tMap_1 process_data_begin ] start
							 */

							currentComponent = "tMap_1";

							/**
							 * [tMap_1 process_data_begin ] stop
							 */
							// Start of branch "funcionarios_dependencia"
							if (funcionarios_dependencia != null) {

								/**
								 * [tPostgresqlOutput_1 main ] start
								 */

								currentComponent = "tPostgresqlOutput_1";

								// funcionarios_dependencia
								// funcionarios_dependencia

								if (execStat) {
									runStat.updateStatOnConnection(
											"funcionarios_dependencia"
													+ iterateId, 1, 1);
								}

								whetherReject_tPostgresqlOutput_1 = false;
								pstmt_tPostgresqlOutput_1.setInt(1,
										funcionarios_dependencia.id_master);

								if (funcionarios_dependencia.nombre == null) {
									pstmt_tPostgresqlOutput_1.setNull(2,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tPostgresqlOutput_1.setString(2,
											funcionarios_dependencia.nombre);
								}

								if (funcionarios_dependencia.telefono_dependencia == null) {
									pstmt_tPostgresqlOutput_1.setNull(3,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tPostgresqlOutput_1
											.setString(
													3,
													funcionarios_dependencia.telefono_dependencia);
								}

								if (funcionarios_dependencia.correo_electronico == null) {
									pstmt_tPostgresqlOutput_1.setNull(4,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tPostgresqlOutput_1
											.setString(
													4,
													funcionarios_dependencia.correo_electronico);
								}

								if (funcionarios_dependencia.funcionario == null) {
									pstmt_tPostgresqlOutput_1.setNull(5,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tPostgresqlOutput_1
											.setString(
													5,
													funcionarios_dependencia.funcionario);
								}

								if (funcionarios_dependencia.tipo_contrato == null) {
									pstmt_tPostgresqlOutput_1.setNull(6,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tPostgresqlOutput_1
											.setString(
													6,
													funcionarios_dependencia.tipo_contrato);
								}

								if (funcionarios_dependencia.cargo == null) {
									pstmt_tPostgresqlOutput_1.setNull(7,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tPostgresqlOutput_1.setString(7,
											funcionarios_dependencia.cargo);
								}

								if (funcionarios_dependencia.sueldo == null) {
									pstmt_tPostgresqlOutput_1.setNull(8,
											java.sql.Types.DOUBLE);
								} else {
									pstmt_tPostgresqlOutput_1.setDouble(8,
											funcionarios_dependencia.sueldo);
								}

								if (funcionarios_dependencia.objeto_contrato == null) {
									pstmt_tPostgresqlOutput_1.setNull(9,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tPostgresqlOutput_1
											.setString(
													9,
													funcionarios_dependencia.objeto_contrato);
								}

								try {
									nb_line_tPostgresqlOutput_1++;

									insertedCount_tPostgresqlOutput_1 = insertedCount_tPostgresqlOutput_1
											+ pstmt_tPostgresqlOutput_1
													.executeUpdate();

								} catch (java.lang.Exception e) {

									whetherReject_tPostgresqlOutput_1 = true;
									throw (e);
								}
								if (!whetherReject_tPostgresqlOutput_1) {
								}

								tos_count_tPostgresqlOutput_1++;

								/**
								 * [tPostgresqlOutput_1 main ] stop
								 */

								/**
								 * [tPostgresqlOutput_1 process_data_begin ]
								 * start
								 */

								currentComponent = "tPostgresqlOutput_1";

								/**
								 * [tPostgresqlOutput_1 process_data_begin ]
								 * stop
								 */

								/**
								 * [tPostgresqlOutput_1 process_data_end ] start
								 */

								currentComponent = "tPostgresqlOutput_1";

								/**
								 * [tPostgresqlOutput_1 process_data_end ] stop
								 */

							} // End of branch "funcionarios_dependencia"

						} // close loop of lookup 'row5' // G_TM_M_043

						/**
						 * [tMap_1 process_data_end ] start
						 */

						currentComponent = "tMap_1";

						/**
						 * [tMap_1 process_data_end ] stop
						 */

						/**
						 * [tPostgresqlInput_3 process_data_end ] start
						 */

						currentComponent = "tPostgresqlInput_3";

						/**
						 * [tPostgresqlInput_3 process_data_end ] stop
						 */

						/**
						 * [tPostgresqlInput_3 end ] start
						 */

						currentComponent = "tPostgresqlInput_3";

					}
				} finally {
					if (rs_tPostgresqlInput_3 != null) {
						rs_tPostgresqlInput_3.close();
					}
					if (stmt_tPostgresqlInput_3 != null) {
						stmt_tPostgresqlInput_3.close();
					}
				}
				globalMap.put("tPostgresqlInput_3_NB_LINE",
						nb_line_tPostgresqlInput_3);

				ok_Hash.put("tPostgresqlInput_3", true);
				end_Hash.put("tPostgresqlInput_3", System.currentTimeMillis());

				/**
				 * [tPostgresqlInput_3 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row2 != null) {
					tHash_Lookup_row2.endGet();
				}
				globalMap.remove("tHash_Lookup_row2");

				if (tHash_Lookup_row5 != null) {
					tHash_Lookup_row5.endGet();
				}
				globalMap.remove("tHash_Lookup_row5");

				// ###############################

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row1" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tPostgresqlOutput_1 end ] start
				 */

				currentComponent = "tPostgresqlOutput_1";

				if (pstmt_tPostgresqlOutput_1 != null) {

					pstmt_tPostgresqlOutput_1.close();
					resourceMap.remove("pstmt_tPostgresqlOutput_1");
				}
				resourceMap.put("statementClosed_tPostgresqlOutput_1", true);

				nb_line_deleted_tPostgresqlOutput_1 = nb_line_deleted_tPostgresqlOutput_1
						+ deletedCount_tPostgresqlOutput_1;
				nb_line_update_tPostgresqlOutput_1 = nb_line_update_tPostgresqlOutput_1
						+ updatedCount_tPostgresqlOutput_1;
				nb_line_inserted_tPostgresqlOutput_1 = nb_line_inserted_tPostgresqlOutput_1
						+ insertedCount_tPostgresqlOutput_1;
				nb_line_rejected_tPostgresqlOutput_1 = nb_line_rejected_tPostgresqlOutput_1
						+ rejectedCount_tPostgresqlOutput_1;

				globalMap.put("tPostgresqlOutput_1_NB_LINE",
						nb_line_tPostgresqlOutput_1);
				globalMap.put("tPostgresqlOutput_1_NB_LINE_UPDATED",
						nb_line_update_tPostgresqlOutput_1);
				globalMap.put("tPostgresqlOutput_1_NB_LINE_INSERTED",
						nb_line_inserted_tPostgresqlOutput_1);
				globalMap.put("tPostgresqlOutput_1_NB_LINE_DELETED",
						nb_line_deleted_tPostgresqlOutput_1);
				globalMap.put("tPostgresqlOutput_1_NB_LINE_REJECTED",
						nb_line_rejected_tPostgresqlOutput_1);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection(
								"funcionarios_dependencia" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tPostgresqlOutput_1", true);
				end_Hash.put("tPostgresqlOutput_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tPostgresqlInput_6Process(globalMap);

				/**
				 * [tPostgresqlOutput_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_row5");

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_row2");

			try {

				/**
				 * [tPostgresqlInput_3 finally ] start
				 */

				currentComponent = "tPostgresqlInput_3";

				/**
				 * [tPostgresqlInput_3 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tPostgresqlOutput_1 finally ] start
				 */

				currentComponent = "tPostgresqlOutput_1";

				if (resourceMap.get("statementClosed_tPostgresqlOutput_1") == null) {
					java.sql.PreparedStatement pstmtToClose_tPostgresqlOutput_1 = null;
					if ((pstmtToClose_tPostgresqlOutput_1 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmt_tPostgresqlOutput_1")) != null) {
						pstmtToClose_tPostgresqlOutput_1.close();
					}
				}

				/**
				 * [tPostgresqlOutput_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostgresqlInput_3_SUBPROCESS_STATE", 1);
	}

	public static class copyOffuncionarios_dependenciaStruct
			implements
			routines.system.IPersistableRow<copyOffuncionarios_dependenciaStruct> {
		final static byte[] commonByteArrayLock_DMINDICADORES_dependencias_consolidado = new byte[0];
		static byte[] commonByteArray_DMINDICADORES_dependencias_consolidado = new byte[0];

		public int id_master;

		public int getId_master() {
			return this.id_master;
		}

		public String nombre;

		public String getNombre() {
			return this.nombre;
		}

		public String telefono_dependencia;

		public String getTelefono_dependencia() {
			return this.telefono_dependencia;
		}

		public String correo_electronico;

		public String getCorreo_electronico() {
			return this.correo_electronico;
		}

		public String funcionario;

		public String getFuncionario() {
			return this.funcionario;
		}

		public String tipo_contrato;

		public String getTipo_contrato() {
			return this.tipo_contrato;
		}

		public String cargo;

		public String getCargo() {
			return this.cargo;
		}

		public Double sueldo;

		public Double getSueldo() {
			return this.sueldo;
		}

		public String objeto_contrato;

		public String getObjeto_contrato() {
			return this.objeto_contrato;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DMINDICADORES_dependencias_consolidado.length) {
					if (length < 1024
							&& commonByteArray_DMINDICADORES_dependencias_consolidado.length == 0) {
						commonByteArray_DMINDICADORES_dependencias_consolidado = new byte[1024];
					} else {
						commonByteArray_DMINDICADORES_dependencias_consolidado = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_DMINDICADORES_dependencias_consolidado,
						0, length);
				strReturn = new String(
						commonByteArray_DMINDICADORES_dependencias_consolidado,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DMINDICADORES_dependencias_consolidado) {

				try {

					int length = 0;

					this.id_master = dis.readInt();

					this.nombre = readString(dis);

					this.telefono_dependencia = readString(dis);

					this.correo_electronico = readString(dis);

					this.funcionario = readString(dis);

					this.tipo_contrato = readString(dis);

					this.cargo = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.sueldo = null;
					} else {
						this.sueldo = dis.readDouble();
					}

					this.objeto_contrato = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id_master);

				// String

				writeString(this.nombre, dos);

				// String

				writeString(this.telefono_dependencia, dos);

				// String

				writeString(this.correo_electronico, dos);

				// String

				writeString(this.funcionario, dos);

				// String

				writeString(this.tipo_contrato, dos);

				// String

				writeString(this.cargo, dos);

				// Double

				if (this.sueldo == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.sueldo);
				}

				// String

				writeString(this.objeto_contrato, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_master=" + String.valueOf(id_master));
			sb.append(",nombre=" + nombre);
			sb.append(",telefono_dependencia=" + telefono_dependencia);
			sb.append(",correo_electronico=" + correo_electronico);
			sb.append(",funcionario=" + funcionario);
			sb.append(",tipo_contrato=" + tipo_contrato);
			sb.append(",cargo=" + cargo);
			sb.append(",sueldo=" + String.valueOf(sueldo));
			sb.append(",objeto_contrato=" + objeto_contrato);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOffuncionarios_dependenciaStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row7Struct implements
			routines.system.IPersistableRow<row7Struct> {
		final static byte[] commonByteArrayLock_DMINDICADORES_dependencias_consolidado = new byte[0];
		static byte[] commonByteArray_DMINDICADORES_dependencias_consolidado = new byte[0];

		public int id_master;

		public int getId_master() {
			return this.id_master;
		}

		public String id_gedep;

		public String getId_gedep() {
			return this.id_gedep;
		}

		public String id_acad;

		public String getId_acad() {
			return this.id_acad;
		}

		public String id_argo;

		public String getId_argo() {
			return this.id_argo;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DMINDICADORES_dependencias_consolidado.length) {
					if (length < 1024
							&& commonByteArray_DMINDICADORES_dependencias_consolidado.length == 0) {
						commonByteArray_DMINDICADORES_dependencias_consolidado = new byte[1024];
					} else {
						commonByteArray_DMINDICADORES_dependencias_consolidado = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_DMINDICADORES_dependencias_consolidado,
						0, length);
				strReturn = new String(
						commonByteArray_DMINDICADORES_dependencias_consolidado,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DMINDICADORES_dependencias_consolidado) {

				try {

					int length = 0;

					this.id_master = dis.readInt();

					this.id_gedep = readString(dis);

					this.id_acad = readString(dis);

					this.id_argo = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id_master);

				// String

				writeString(this.id_gedep, dos);

				// String

				writeString(this.id_acad, dos);

				// String

				writeString(this.id_argo, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_master=" + String.valueOf(id_master));
			sb.append(",id_gedep=" + id_gedep);
			sb.append(",id_acad=" + id_acad);
			sb.append(",id_argo=" + id_argo);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row7Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tPostgresqlInput_6Struct implements
			routines.system.IPersistableRow<after_tPostgresqlInput_6Struct> {
		final static byte[] commonByteArrayLock_DMINDICADORES_dependencias_consolidado = new byte[0];
		static byte[] commonByteArray_DMINDICADORES_dependencias_consolidado = new byte[0];

		public int id_master;

		public int getId_master() {
			return this.id_master;
		}

		public String id_gedep;

		public String getId_gedep() {
			return this.id_gedep;
		}

		public String id_acad;

		public String getId_acad() {
			return this.id_acad;
		}

		public String id_argo;

		public String getId_argo() {
			return this.id_argo;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DMINDICADORES_dependencias_consolidado.length) {
					if (length < 1024
							&& commonByteArray_DMINDICADORES_dependencias_consolidado.length == 0) {
						commonByteArray_DMINDICADORES_dependencias_consolidado = new byte[1024];
					} else {
						commonByteArray_DMINDICADORES_dependencias_consolidado = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_DMINDICADORES_dependencias_consolidado,
						0, length);
				strReturn = new String(
						commonByteArray_DMINDICADORES_dependencias_consolidado,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DMINDICADORES_dependencias_consolidado) {

				try {

					int length = 0;

					this.id_master = dis.readInt();

					this.id_gedep = readString(dis);

					this.id_acad = readString(dis);

					this.id_argo = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id_master);

				// String

				writeString(this.id_gedep, dos);

				// String

				writeString(this.id_acad, dos);

				// String

				writeString(this.id_argo, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_master=" + String.valueOf(id_master));
			sb.append(",id_gedep=" + id_gedep);
			sb.append(",id_acad=" + id_acad);
			sb.append(",id_argo=" + id_argo);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tPostgresqlInput_6Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tPostgresqlInput_6Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlInput_6_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				tPostgresqlInput_4Process(globalMap);
				tPostgresqlInput_5Process(globalMap);

				row7Struct row7 = new row7Struct();
				copyOffuncionarios_dependenciaStruct copyOffuncionarios_dependencia = new copyOffuncionarios_dependenciaStruct();

				/**
				 * [tPostgresqlOutput_2 begin ] start
				 */

				ok_Hash.put("tPostgresqlOutput_2", false);
				start_Hash.put("tPostgresqlOutput_2",
						System.currentTimeMillis());

				currentComponent = "tPostgresqlOutput_2";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection(
								"copyOffuncionarios_dependencia" + iterateId,
								0, 0);

					}
				}

				int tos_count_tPostgresqlOutput_2 = 0;

				String dbschema_tPostgresqlOutput_2 = null;
				dbschema_tPostgresqlOutput_2 = (String) globalMap.get("schema_"
						+ "tPostgresqlConnection_1");

				String tableName_tPostgresqlOutput_2 = null;
				if (dbschema_tPostgresqlOutput_2 == null
						|| dbschema_tPostgresqlOutput_2.trim().length() == 0) {
					tableName_tPostgresqlOutput_2 = "funcionarios_dependencias";
				} else {
					tableName_tPostgresqlOutput_2 = dbschema_tPostgresqlOutput_2
							+ "\".\"" + "funcionarios_dependencias";
				}

				int nb_line_tPostgresqlOutput_2 = 0;
				int nb_line_update_tPostgresqlOutput_2 = 0;
				int nb_line_inserted_tPostgresqlOutput_2 = 0;
				int nb_line_deleted_tPostgresqlOutput_2 = 0;
				int nb_line_rejected_tPostgresqlOutput_2 = 0;

				int deletedCount_tPostgresqlOutput_2 = 0;
				int updatedCount_tPostgresqlOutput_2 = 0;
				int insertedCount_tPostgresqlOutput_2 = 0;
				int rejectedCount_tPostgresqlOutput_2 = 0;

				boolean whetherReject_tPostgresqlOutput_2 = false;

				java.sql.Connection conn_tPostgresqlOutput_2 = null;
				String dbUser_tPostgresqlOutput_2 = null;

				conn_tPostgresqlOutput_2 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_1");

				int count_tPostgresqlOutput_2 = 0;
				java.sql.DatabaseMetaData dbMetaData_tPostgresqlOutput_2 = conn_tPostgresqlOutput_2
						.getMetaData();
				boolean whetherExist_tPostgresqlOutput_2 = false;
				try (java.sql.ResultSet rsTable_tPostgresqlOutput_2 = dbMetaData_tPostgresqlOutput_2
						.getTables(null, null, null, new String[] { "TABLE" })) {
					String defaultSchema_tPostgresqlOutput_2 = "public";
					if (dbschema_tPostgresqlOutput_2 == null
							|| dbschema_tPostgresqlOutput_2.trim().length() == 0) {
						try (java.sql.Statement stmtSchema_tPostgresqlOutput_2 = conn_tPostgresqlOutput_2
								.createStatement();
								java.sql.ResultSet rsSchema_tPostgresqlOutput_2 = stmtSchema_tPostgresqlOutput_2
										.executeQuery("select current_schema() ")) {
							while (rsSchema_tPostgresqlOutput_2.next()) {
								defaultSchema_tPostgresqlOutput_2 = rsSchema_tPostgresqlOutput_2
										.getString("current_schema");
							}
						}
					}
					while (rsTable_tPostgresqlOutput_2.next()) {
						String table_tPostgresqlOutput_2 = rsTable_tPostgresqlOutput_2
								.getString("TABLE_NAME");
						String schema_tPostgresqlOutput_2 = rsTable_tPostgresqlOutput_2
								.getString("TABLE_SCHEM");
						if (table_tPostgresqlOutput_2
								.equals("funcionarios_dependencias")
								&& (schema_tPostgresqlOutput_2
										.equals(dbschema_tPostgresqlOutput_2) || ((dbschema_tPostgresqlOutput_2 == null || dbschema_tPostgresqlOutput_2
										.trim().length() == 0) && defaultSchema_tPostgresqlOutput_2
										.equals(schema_tPostgresqlOutput_2)))) {
							whetherExist_tPostgresqlOutput_2 = true;
							break;
						}
					}
				}
				if (!whetherExist_tPostgresqlOutput_2) {
					try (java.sql.Statement stmtCreate_tPostgresqlOutput_2 = conn_tPostgresqlOutput_2
							.createStatement()) {
						stmtCreate_tPostgresqlOutput_2
								.execute("CREATE TABLE \""
										+ tableName_tPostgresqlOutput_2
										+ "\"(\"id_master\" INT4  not null ,\"nombre\" VARCHAR(10485760)   not null ,\"telefono_dependencia\" VARCHAR(500)   not null ,\"correo_electronico\" VARCHAR(10485760)  ,\"funcionario\" VARCHAR(255)  ,\"tipo_contrato\" VARCHAR(255)  ,\"cargo\" VARCHAR(255)  ,\"sueldo\" FLOAT8 ,\"objeto_contrato\" VARCHAR(0)  )");
					}
				}
				String insert_tPostgresqlOutput_2 = "INSERT INTO \""
						+ tableName_tPostgresqlOutput_2
						+ "\" (\"id_master\",\"nombre\",\"telefono_dependencia\",\"correo_electronico\",\"funcionario\",\"tipo_contrato\",\"cargo\",\"sueldo\",\"objeto_contrato\") VALUES (?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tPostgresqlOutput_2 = conn_tPostgresqlOutput_2
						.prepareStatement(insert_tPostgresqlOutput_2);
				resourceMap.put("pstmt_tPostgresqlOutput_2",
						pstmt_tPostgresqlOutput_2);

				/**
				 * [tPostgresqlOutput_2 begin ] stop
				 */

				/**
				 * [tMap_2 begin ] start
				 */

				ok_Hash.put("tMap_2", false);
				start_Hash.put("tMap_2", System.currentTimeMillis());

				currentComponent = "tMap_2";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row7" + iterateId, 0, 0);

					}
				}

				int tos_count_tMap_2 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct> tHash_Lookup_row6 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct>) globalMap
						.get("tHash_Lookup_row6"));

				row6Struct row6HashKey = new row6Struct();
				row6Struct row6Default = new row6Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct> tHash_Lookup_row8 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct>) globalMap
						.get("tHash_Lookup_row8"));

				row8Struct row8HashKey = new row8Struct();
				row8Struct row8Default = new row8Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_2__Struct {
				}
				Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				copyOffuncionarios_dependenciaStruct copyOffuncionarios_dependencia_tmp = new copyOffuncionarios_dependenciaStruct();
				// ###############################

				/**
				 * [tMap_2 begin ] stop
				 */

				/**
				 * [tPostgresqlInput_6 begin ] start
				 */

				ok_Hash.put("tPostgresqlInput_6", false);
				start_Hash
						.put("tPostgresqlInput_6", System.currentTimeMillis());

				currentComponent = "tPostgresqlInput_6";

				int tos_count_tPostgresqlInput_6 = 0;

				int nb_line_tPostgresqlInput_6 = 0;
				java.sql.Connection conn_tPostgresqlInput_6 = null;
				conn_tPostgresqlInput_6 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_1");

				java.sql.Statement stmt_tPostgresqlInput_6 = conn_tPostgresqlInput_6
						.createStatement();

				String dbquery_tPostgresqlInput_6 = "SELECT id_master, id_gedep, id_acad, id_argo\n  FROM mapeo_dependencias";

				globalMap.put("tPostgresqlInput_6_QUERY",
						dbquery_tPostgresqlInput_6);
				java.sql.ResultSet rs_tPostgresqlInput_6 = null;

				try {
					rs_tPostgresqlInput_6 = stmt_tPostgresqlInput_6
							.executeQuery(dbquery_tPostgresqlInput_6);
					java.sql.ResultSetMetaData rsmd_tPostgresqlInput_6 = rs_tPostgresqlInput_6
							.getMetaData();
					int colQtyInRs_tPostgresqlInput_6 = rsmd_tPostgresqlInput_6
							.getColumnCount();

					String tmpContent_tPostgresqlInput_6 = null;

					while (rs_tPostgresqlInput_6.next()) {
						nb_line_tPostgresqlInput_6++;

						if (colQtyInRs_tPostgresqlInput_6 < 1) {
							row7.id_master = 0;
						} else {

							if (rs_tPostgresqlInput_6.getObject(1) != null) {
								row7.id_master = rs_tPostgresqlInput_6
										.getInt(1);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tPostgresqlInput_6 < 2) {
							row7.id_gedep = null;
						} else {

							row7.id_gedep = routines.system.JDBCUtil.getString(
									rs_tPostgresqlInput_6, 2, false);
						}
						if (colQtyInRs_tPostgresqlInput_6 < 3) {
							row7.id_acad = null;
						} else {

							row7.id_acad = routines.system.JDBCUtil.getString(
									rs_tPostgresqlInput_6, 3, false);
						}
						if (colQtyInRs_tPostgresqlInput_6 < 4) {
							row7.id_argo = null;
						} else {

							row7.id_argo = routines.system.JDBCUtil.getString(
									rs_tPostgresqlInput_6, 4, false);
						}

						/**
						 * [tPostgresqlInput_6 begin ] stop
						 */

						/**
						 * [tPostgresqlInput_6 main ] start
						 */

						currentComponent = "tPostgresqlInput_6";

						tos_count_tPostgresqlInput_6++;

						/**
						 * [tPostgresqlInput_6 main ] stop
						 */

						/**
						 * [tPostgresqlInput_6 process_data_begin ] start
						 */

						currentComponent = "tPostgresqlInput_6";

						/**
						 * [tPostgresqlInput_6 process_data_begin ] stop
						 */

						/**
						 * [tMap_2 main ] start
						 */

						currentComponent = "tMap_2";

						// row7
						// row7

						if (execStat) {
							runStat.updateStatOnConnection("row7" + iterateId,
									1, 1);
						}

						boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_2 = false;
						boolean mainRowRejected_tMap_2 = false;

						// /////////////////////////////////////////////
						// Starting Lookup Table "row6"
						// /////////////////////////////////////////////

						boolean forceLooprow6 = false;

						row6Struct row6ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_2) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_2 = false;

							Object exprKeyValue_row6__id = row7.id_master;
							if (exprKeyValue_row6__id == null) {
								hasCasePrimitiveKeyWithNull_tMap_2 = true;
							} else {
								row6HashKey.id = (int) (Integer) exprKeyValue_row6__id;
							}

							row6HashKey.hashCodeDirty = true;

							if (!hasCasePrimitiveKeyWithNull_tMap_2) { // G_TM_M_091

								tHash_Lookup_row6.lookup(row6HashKey);

							} // G_TM_M_091

						} // G_TM_M_020

						if (tHash_Lookup_row6 != null
								&& tHash_Lookup_row6.getCount(row6HashKey) > 1) { // G
																					// 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row6' and it contains more one result from keys :  row6.id = '"
							// + row6HashKey.id + "'");
						} // G 071

						row6Struct row6 = null;

						row6Struct fromLookup_row6 = null;
						row6 = row6Default;

						if (tHash_Lookup_row6 != null
								&& tHash_Lookup_row6.hasNext()) { // G 099

							fromLookup_row6 = tHash_Lookup_row6.next();

						} // G 099

						if (fromLookup_row6 != null) {
							row6 = fromLookup_row6;
						}

						// /////////////////////////////////////////////
						// Starting Lookup Table "row8"
						// /////////////////////////////////////////////

						boolean forceLooprow8 = false;

						row8Struct row8ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_2) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_2 = false;

							row8HashKey.codigo_dependencia = row7.id_argo;

							row8HashKey.hashCodeDirty = true;

							tHash_Lookup_row8.lookup(row8HashKey);

							if (!tHash_Lookup_row8.hasNext()) { // G_TM_M_090

								rejectedInnerJoin_tMap_2 = true;

								forceLooprow8 = true;

							} // G_TM_M_090

						} // G_TM_M_020

						else { // G 20 - G 21
							forceLooprow8 = true;
						} // G 21

						row8Struct row8 = null;

						while ((tHash_Lookup_row8 != null && tHash_Lookup_row8
								.hasNext()) || forceLooprow8) { // G_TM_M_043

							// CALL close loop of lookup 'row8'

							row8Struct fromLookup_row8 = null;
							row8 = row8Default;

							if (!forceLooprow8) { // G 46

								fromLookup_row8 = tHash_Lookup_row8.next();

								if (fromLookup_row8 != null) {
									row8 = fromLookup_row8;
								}

							} // G 46

							forceLooprow8 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
								// ###############################
								// # Output tables

								copyOffuncionarios_dependencia = null;

								if (!rejectedInnerJoin_tMap_2) {

									// # Output table :
									// 'copyOffuncionarios_dependencia'
									copyOffuncionarios_dependencia_tmp.id_master = row7.id_master;
									copyOffuncionarios_dependencia_tmp.nombre = row6.nombre;
									copyOffuncionarios_dependencia_tmp.telefono_dependencia = row6.telefono_dependencia;
									copyOffuncionarios_dependencia_tmp.correo_electronico = row6.correo_electronico;
									copyOffuncionarios_dependencia_tmp.funcionario = row8.funcionario;
									copyOffuncionarios_dependencia_tmp.tipo_contrato = StringHandling
											.UPCASE(row8.tipo_contrato);
									copyOffuncionarios_dependencia_tmp.cargo = row8.cargo;
									copyOffuncionarios_dependencia_tmp.sueldo = row8.sueldo;
									copyOffuncionarios_dependencia_tmp.objeto_contrato = row8.objeto_contrato;
									copyOffuncionarios_dependencia = copyOffuncionarios_dependencia_tmp;
								} // closing inner join bracket (2)
									// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_2 = false;

							tos_count_tMap_2++;

							/**
							 * [tMap_2 main ] stop
							 */

							/**
							 * [tMap_2 process_data_begin ] start
							 */

							currentComponent = "tMap_2";

							/**
							 * [tMap_2 process_data_begin ] stop
							 */
							// Start of branch "copyOffuncionarios_dependencia"
							if (copyOffuncionarios_dependencia != null) {

								/**
								 * [tPostgresqlOutput_2 main ] start
								 */

								currentComponent = "tPostgresqlOutput_2";

								// copyOffuncionarios_dependencia
								// copyOffuncionarios_dependencia

								if (execStat) {
									runStat.updateStatOnConnection(
											"copyOffuncionarios_dependencia"
													+ iterateId, 1, 1);
								}

								whetherReject_tPostgresqlOutput_2 = false;
								pstmt_tPostgresqlOutput_2
										.setInt(1,
												copyOffuncionarios_dependencia.id_master);

								if (copyOffuncionarios_dependencia.nombre == null) {
									pstmt_tPostgresqlOutput_2.setNull(2,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tPostgresqlOutput_2
											.setString(
													2,
													copyOffuncionarios_dependencia.nombre);
								}

								if (copyOffuncionarios_dependencia.telefono_dependencia == null) {
									pstmt_tPostgresqlOutput_2.setNull(3,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tPostgresqlOutput_2
											.setString(
													3,
													copyOffuncionarios_dependencia.telefono_dependencia);
								}

								if (copyOffuncionarios_dependencia.correo_electronico == null) {
									pstmt_tPostgresqlOutput_2.setNull(4,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tPostgresqlOutput_2
											.setString(
													4,
													copyOffuncionarios_dependencia.correo_electronico);
								}

								if (copyOffuncionarios_dependencia.funcionario == null) {
									pstmt_tPostgresqlOutput_2.setNull(5,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tPostgresqlOutput_2
											.setString(
													5,
													copyOffuncionarios_dependencia.funcionario);
								}

								if (copyOffuncionarios_dependencia.tipo_contrato == null) {
									pstmt_tPostgresqlOutput_2.setNull(6,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tPostgresqlOutput_2
											.setString(
													6,
													copyOffuncionarios_dependencia.tipo_contrato);
								}

								if (copyOffuncionarios_dependencia.cargo == null) {
									pstmt_tPostgresqlOutput_2.setNull(7,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tPostgresqlOutput_2
											.setString(
													7,
													copyOffuncionarios_dependencia.cargo);
								}

								if (copyOffuncionarios_dependencia.sueldo == null) {
									pstmt_tPostgresqlOutput_2.setNull(8,
											java.sql.Types.DOUBLE);
								} else {
									pstmt_tPostgresqlOutput_2
											.setDouble(
													8,
													copyOffuncionarios_dependencia.sueldo);
								}

								if (copyOffuncionarios_dependencia.objeto_contrato == null) {
									pstmt_tPostgresqlOutput_2.setNull(9,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tPostgresqlOutput_2
											.setString(
													9,
													copyOffuncionarios_dependencia.objeto_contrato);
								}

								try {
									nb_line_tPostgresqlOutput_2++;

									insertedCount_tPostgresqlOutput_2 = insertedCount_tPostgresqlOutput_2
											+ pstmt_tPostgresqlOutput_2
													.executeUpdate();

								} catch (java.lang.Exception e) {

									whetherReject_tPostgresqlOutput_2 = true;
									throw (e);
								}

								tos_count_tPostgresqlOutput_2++;

								/**
								 * [tPostgresqlOutput_2 main ] stop
								 */

								/**
								 * [tPostgresqlOutput_2 process_data_begin ]
								 * start
								 */

								currentComponent = "tPostgresqlOutput_2";

								/**
								 * [tPostgresqlOutput_2 process_data_begin ]
								 * stop
								 */

								/**
								 * [tPostgresqlOutput_2 process_data_end ] start
								 */

								currentComponent = "tPostgresqlOutput_2";

								/**
								 * [tPostgresqlOutput_2 process_data_end ] stop
								 */

							} // End of branch "copyOffuncionarios_dependencia"

						} // close loop of lookup 'row8' // G_TM_M_043

						/**
						 * [tMap_2 process_data_end ] start
						 */

						currentComponent = "tMap_2";

						/**
						 * [tMap_2 process_data_end ] stop
						 */

						/**
						 * [tPostgresqlInput_6 process_data_end ] start
						 */

						currentComponent = "tPostgresqlInput_6";

						/**
						 * [tPostgresqlInput_6 process_data_end ] stop
						 */

						/**
						 * [tPostgresqlInput_6 end ] start
						 */

						currentComponent = "tPostgresqlInput_6";

					}
				} finally {
					if (rs_tPostgresqlInput_6 != null) {
						rs_tPostgresqlInput_6.close();
					}
					if (stmt_tPostgresqlInput_6 != null) {
						stmt_tPostgresqlInput_6.close();
					}
				}
				globalMap.put("tPostgresqlInput_6_NB_LINE",
						nb_line_tPostgresqlInput_6);

				ok_Hash.put("tPostgresqlInput_6", true);
				end_Hash.put("tPostgresqlInput_6", System.currentTimeMillis());

				/**
				 * [tPostgresqlInput_6 end ] stop
				 */

				/**
				 * [tMap_2 end ] start
				 */

				currentComponent = "tMap_2";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row6 != null) {
					tHash_Lookup_row6.endGet();
				}
				globalMap.remove("tHash_Lookup_row6");

				if (tHash_Lookup_row8 != null) {
					tHash_Lookup_row8.endGet();
				}
				globalMap.remove("tHash_Lookup_row8");

				// ###############################

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row7" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tMap_2", true);
				end_Hash.put("tMap_2", System.currentTimeMillis());

				/**
				 * [tMap_2 end ] stop
				 */

				/**
				 * [tPostgresqlOutput_2 end ] start
				 */

				currentComponent = "tPostgresqlOutput_2";

				if (pstmt_tPostgresqlOutput_2 != null) {

					pstmt_tPostgresqlOutput_2.close();
					resourceMap.remove("pstmt_tPostgresqlOutput_2");
				}
				resourceMap.put("statementClosed_tPostgresqlOutput_2", true);

				nb_line_deleted_tPostgresqlOutput_2 = nb_line_deleted_tPostgresqlOutput_2
						+ deletedCount_tPostgresqlOutput_2;
				nb_line_update_tPostgresqlOutput_2 = nb_line_update_tPostgresqlOutput_2
						+ updatedCount_tPostgresqlOutput_2;
				nb_line_inserted_tPostgresqlOutput_2 = nb_line_inserted_tPostgresqlOutput_2
						+ insertedCount_tPostgresqlOutput_2;
				nb_line_rejected_tPostgresqlOutput_2 = nb_line_rejected_tPostgresqlOutput_2
						+ rejectedCount_tPostgresqlOutput_2;

				globalMap.put("tPostgresqlOutput_2_NB_LINE",
						nb_line_tPostgresqlOutput_2);
				globalMap.put("tPostgresqlOutput_2_NB_LINE_UPDATED",
						nb_line_update_tPostgresqlOutput_2);
				globalMap.put("tPostgresqlOutput_2_NB_LINE_INSERTED",
						nb_line_inserted_tPostgresqlOutput_2);
				globalMap.put("tPostgresqlOutput_2_NB_LINE_DELETED",
						nb_line_deleted_tPostgresqlOutput_2);
				globalMap.put("tPostgresqlOutput_2_NB_LINE_REJECTED",
						nb_line_rejected_tPostgresqlOutput_2);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection(
								"copyOffuncionarios_dependencia" + iterateId,
								2, 0);
					}
				}

				ok_Hash.put("tPostgresqlOutput_2", true);
				end_Hash.put("tPostgresqlOutput_2", System.currentTimeMillis());

				/**
				 * [tPostgresqlOutput_2 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tMap_2"
			globalMap.remove("tHash_Lookup_row8");

			// free memory for "tMap_2"
			globalMap.remove("tHash_Lookup_row6");

			try {

				/**
				 * [tPostgresqlInput_6 finally ] start
				 */

				currentComponent = "tPostgresqlInput_6";

				/**
				 * [tPostgresqlInput_6 finally ] stop
				 */

				/**
				 * [tMap_2 finally ] start
				 */

				currentComponent = "tMap_2";

				/**
				 * [tMap_2 finally ] stop
				 */

				/**
				 * [tPostgresqlOutput_2 finally ] start
				 */

				currentComponent = "tPostgresqlOutput_2";

				if (resourceMap.get("statementClosed_tPostgresqlOutput_2") == null) {
					java.sql.PreparedStatement pstmtToClose_tPostgresqlOutput_2 = null;
					if ((pstmtToClose_tPostgresqlOutput_2 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmt_tPostgresqlOutput_2")) != null) {
						pstmtToClose_tPostgresqlOutput_2.close();
					}
				}

				/**
				 * [tPostgresqlOutput_2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostgresqlInput_6_SUBPROCESS_STATE", 1);
	}

	public static class row5Struct implements
			routines.system.IPersistableComparableLookupRow<row5Struct> {
		final static byte[] commonByteArrayLock_DMINDICADORES_dependencias_consolidado = new byte[0];
		static byte[] commonByteArray_DMINDICADORES_dependencias_consolidado = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String codigo_dependencia;

		public String getCodigo_dependencia() {
			return this.codigo_dependencia;
		}

		public String tipo_contrato;

		public String getTipo_contrato() {
			return this.tipo_contrato;
		}

		public String funcionario;

		public String getFuncionario() {
			return this.funcionario;
		}

		public String cargo;

		public String getCargo() {
			return this.cargo;
		}

		public Double sueldo;

		public Double getSueldo() {
			return this.sueldo;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.codigo_dependencia == null) ? 0
								: this.codigo_dependencia.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row5Struct other = (row5Struct) obj;

			if (this.codigo_dependencia == null) {
				if (other.codigo_dependencia != null)
					return false;

			} else if (!this.codigo_dependencia
					.equals(other.codigo_dependencia))

				return false;

			return true;
		}

		public void copyDataTo(row5Struct other) {

			other.codigo_dependencia = this.codigo_dependencia;
			other.tipo_contrato = this.tipo_contrato;
			other.funcionario = this.funcionario;
			other.cargo = this.cargo;
			other.sueldo = this.sueldo;

		}

		public void copyKeysDataTo(row5Struct other) {

			other.codigo_dependencia = this.codigo_dependencia;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DMINDICADORES_dependencias_consolidado.length) {
					if (length < 1024
							&& commonByteArray_DMINDICADORES_dependencias_consolidado.length == 0) {
						commonByteArray_DMINDICADORES_dependencias_consolidado = new byte[1024];
					} else {
						commonByteArray_DMINDICADORES_dependencias_consolidado = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_DMINDICADORES_dependencias_consolidado,
						0, length);
				strReturn = new String(
						commonByteArray_DMINDICADORES_dependencias_consolidado,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DMINDICADORES_dependencias_consolidado) {

				try {

					int length = 0;

					this.codigo_dependencia = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.codigo_dependencia, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.tipo_contrato = readString(dis, ois);

				this.funcionario = readString(dis, ois);

				this.cargo = readString(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.sueldo = null;
				} else {
					this.sueldo = dis.readDouble();
				}

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.tipo_contrato, dos, oos);

				writeString(this.funcionario, dos, oos);

				writeString(this.cargo, dos, oos);

				if (this.sueldo == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.sueldo);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("codigo_dependencia=" + codigo_dependencia);
			sb.append(",tipo_contrato=" + tipo_contrato);
			sb.append(",funcionario=" + funcionario);
			sb.append(",cargo=" + cargo);
			sb.append(",sueldo=" + String.valueOf(sueldo));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.codigo_dependencia,
					other.codigo_dependencia);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row4Struct implements
			routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_DMINDICADORES_dependencias_consolidado = new byte[0];
		static byte[] commonByteArray_DMINDICADORES_dependencias_consolidado = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String codigo_dependencia;

		public String getCodigo_dependencia() {
			return this.codigo_dependencia;
		}

		public String tipo_contrato;

		public String getTipo_contrato() {
			return this.tipo_contrato;
		}

		public String funcionario;

		public String getFuncionario() {
			return this.funcionario;
		}

		public String cargo;

		public String getCargo() {
			return this.cargo;
		}

		public Double sueldo;

		public Double getSueldo() {
			return this.sueldo;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.codigo_dependencia == null) ? 0
								: this.codigo_dependencia.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row4Struct other = (row4Struct) obj;

			if (this.codigo_dependencia == null) {
				if (other.codigo_dependencia != null)
					return false;

			} else if (!this.codigo_dependencia
					.equals(other.codigo_dependencia))

				return false;

			return true;
		}

		public void copyDataTo(row4Struct other) {

			other.codigo_dependencia = this.codigo_dependencia;
			other.tipo_contrato = this.tipo_contrato;
			other.funcionario = this.funcionario;
			other.cargo = this.cargo;
			other.sueldo = this.sueldo;

		}

		public void copyKeysDataTo(row4Struct other) {

			other.codigo_dependencia = this.codigo_dependencia;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DMINDICADORES_dependencias_consolidado.length) {
					if (length < 1024
							&& commonByteArray_DMINDICADORES_dependencias_consolidado.length == 0) {
						commonByteArray_DMINDICADORES_dependencias_consolidado = new byte[1024];
					} else {
						commonByteArray_DMINDICADORES_dependencias_consolidado = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_DMINDICADORES_dependencias_consolidado,
						0, length);
				strReturn = new String(
						commonByteArray_DMINDICADORES_dependencias_consolidado,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DMINDICADORES_dependencias_consolidado) {

				try {

					int length = 0;

					this.codigo_dependencia = readString(dis);

					this.tipo_contrato = readString(dis);

					this.funcionario = readString(dis);

					this.cargo = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.sueldo = null;
					} else {
						this.sueldo = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.codigo_dependencia, dos);

				// String

				writeString(this.tipo_contrato, dos);

				// String

				writeString(this.funcionario, dos);

				// String

				writeString(this.cargo, dos);

				// Double

				if (this.sueldo == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.sueldo);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("codigo_dependencia=" + codigo_dependencia);
			sb.append(",tipo_contrato=" + tipo_contrato);
			sb.append(",funcionario=" + funcionario);
			sb.append(",cargo=" + cargo);
			sb.append(",sueldo=" + String.valueOf(sueldo));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.codigo_dependencia,
					other.codigo_dependencia);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row3Struct implements
			routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_DMINDICADORES_dependencias_consolidado = new byte[0];
		static byte[] commonByteArray_DMINDICADORES_dependencias_consolidado = new byte[0];

		public String codigo_dependencia;

		public String getCodigo_dependencia() {
			return this.codigo_dependencia;
		}

		public String tipo_contrato;

		public String getTipo_contrato() {
			return this.tipo_contrato;
		}

		public String funcionario;

		public String getFuncionario() {
			return this.funcionario;
		}

		public String cargo;

		public String getCargo() {
			return this.cargo;
		}

		public Double sueldo;

		public Double getSueldo() {
			return this.sueldo;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DMINDICADORES_dependencias_consolidado.length) {
					if (length < 1024
							&& commonByteArray_DMINDICADORES_dependencias_consolidado.length == 0) {
						commonByteArray_DMINDICADORES_dependencias_consolidado = new byte[1024];
					} else {
						commonByteArray_DMINDICADORES_dependencias_consolidado = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_DMINDICADORES_dependencias_consolidado,
						0, length);
				strReturn = new String(
						commonByteArray_DMINDICADORES_dependencias_consolidado,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DMINDICADORES_dependencias_consolidado) {

				try {

					int length = 0;

					this.codigo_dependencia = readString(dis);

					this.tipo_contrato = readString(dis);

					this.funcionario = readString(dis);

					this.cargo = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.sueldo = null;
					} else {
						this.sueldo = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.codigo_dependencia, dos);

				// String

				writeString(this.tipo_contrato, dos);

				// String

				writeString(this.funcionario, dos);

				// String

				writeString(this.cargo, dos);

				// Double

				if (this.sueldo == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.sueldo);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("codigo_dependencia=" + codigo_dependencia);
			sb.append(",tipo_contrato=" + tipo_contrato);
			sb.append(",funcionario=" + funcionario);
			sb.append(",cargo=" + cargo);
			sb.append(",sueldo=" + String.valueOf(sueldo));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tOracleInput_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tOracleInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row4Struct row4 = new row4Struct();

				row3Struct row3 = new row3Struct();

				row5Struct row5 = new row5Struct();

				/**
				 * [tAdvancedHash_row5 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row5", false);
				start_Hash
						.put("tAdvancedHash_row5", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row5";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row5" + iterateId, 0, 0);

					}
				}

				int tos_count_tAdvancedHash_row5 = 0;

				// connection name:row5
				// source node:tUnite_1 - inputs:(row4,row3) outputs:(row5,row5)
				// | target node:tAdvancedHash_row5 - inputs:(row5) outputs:()
				// linked node: tMap_1 - inputs:(row1,row5,row2)
				// outputs:(funcionarios_dependencia)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row5 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct> tHash_Lookup_row5 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row5Struct> getLookup(matchingModeEnum_row5);

				globalMap.put("tHash_Lookup_row5", tHash_Lookup_row5);

				/**
				 * [tAdvancedHash_row5 begin ] stop
				 */

				/**
				 * [tUnite_1 begin ] start
				 */

				ok_Hash.put("tUnite_1", false);
				start_Hash.put("tUnite_1", System.currentTimeMillis());

				currentComponent = "tUnite_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row4" + iterateId, 0, 0);

					}
				}

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row3" + iterateId, 0, 0);

					}
				}

				int tos_count_tUnite_1 = 0;

				int nb_line_tUnite_1 = 0;

				/**
				 * [tUnite_1 begin ] stop
				 */

				/**
				 * [tOracleInput_1 begin ] start
				 */

				ok_Hash.put("tOracleInput_1", false);
				start_Hash.put("tOracleInput_1", System.currentTimeMillis());

				currentComponent = "tOracleInput_1";

				int tos_count_tOracleInput_1 = 0;

				int nb_line_tOracleInput_1 = 0;
				java.sql.Connection conn_tOracleInput_1 = null;
				conn_tOracleInput_1 = (java.sql.Connection) globalMap
						.get("conn_tOracleConnection_1");

				boolean isTimeZoneNull_tOracleInput_1 = false;
				boolean isConnectionWrapped_tOracleInput_1 = !(conn_tOracleInput_1 instanceof oracle.jdbc.OracleConnection)
						&& conn_tOracleInput_1
								.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_1 = null;
				if (isConnectionWrapped_tOracleInput_1) {
					unwrappedOraConn_tOracleInput_1 = conn_tOracleInput_1
							.unwrap(oracle.jdbc.OracleConnection.class);
					if (unwrappedOraConn_tOracleInput_1 != null) {
						isTimeZoneNull_tOracleInput_1 = (unwrappedOraConn_tOracleInput_1
								.getSessionTimeZone() == null);
					}
				} else {
					isTimeZoneNull_tOracleInput_1 = (((oracle.jdbc.OracleConnection) conn_tOracleInput_1)
							.getSessionTimeZone() == null);
				}

				if (isTimeZoneNull_tOracleInput_1) {
					java.sql.Statement stmtGetTZ_tOracleInput_1 = conn_tOracleInput_1
							.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_1 = stmtGetTZ_tOracleInput_1
							.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_1 = java.util.TimeZone
							.getDefault().getID();
					while (rsGetTZ_tOracleInput_1.next()) {
						sessionTimezone_tOracleInput_1 = rsGetTZ_tOracleInput_1
								.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_1
							&& unwrappedOraConn_tOracleInput_1 != null) {
						unwrappedOraConn_tOracleInput_1
								.setSessionTimeZone(sessionTimezone_tOracleInput_1);
					} else {
						((oracle.jdbc.OracleConnection) conn_tOracleInput_1)
								.setSessionTimeZone(sessionTimezone_tOracleInput_1);
					}
				}

				java.sql.Statement stmt_tOracleInput_1 = conn_tOracleInput_1
						.createStatement();

				String dbquery_tOracleInput_1 = "select distinct\ndep_cod codigo_dependencia,\n   des_descripcion tipo_contrato,\n   emp_nombre funcionario,\n   car_nombre "
						+ "cargo,\n   esa_sueldo sueldo\nfrom  gedep, pecargo, peemp, pecargodes, prempsal\nwhere\n   car_tc_cod not in ('PA','PD')\n   "
						+ "\n   and dep_cod = emp_dep_cod\n   and car_cod = emp_car_cod\n   and emp_estado_e <> 'R'\n   and car_tc_cod=des_tc_cod\n   an"
						+ "d esa_cod=emp_cod\n   ";

				globalMap.put("tOracleInput_1_QUERY", dbquery_tOracleInput_1);
				java.sql.ResultSet rs_tOracleInput_1 = null;

				try {
					rs_tOracleInput_1 = stmt_tOracleInput_1
							.executeQuery(dbquery_tOracleInput_1);
					java.sql.ResultSetMetaData rsmd_tOracleInput_1 = rs_tOracleInput_1
							.getMetaData();
					int colQtyInRs_tOracleInput_1 = rsmd_tOracleInput_1
							.getColumnCount();

					String tmpContent_tOracleInput_1 = null;

					while (rs_tOracleInput_1.next()) {
						nb_line_tOracleInput_1++;

						if (colQtyInRs_tOracleInput_1 < 1) {
							row4.codigo_dependencia = null;
						} else {

							row4.codigo_dependencia = routines.system.JDBCUtil
									.getString(rs_tOracleInput_1, 1, false);
						}
						if (colQtyInRs_tOracleInput_1 < 2) {
							row4.tipo_contrato = null;
						} else {

							row4.tipo_contrato = routines.system.JDBCUtil
									.getString(rs_tOracleInput_1, 2, false);
						}
						if (colQtyInRs_tOracleInput_1 < 3) {
							row4.funcionario = null;
						} else {

							row4.funcionario = routines.system.JDBCUtil
									.getString(rs_tOracleInput_1, 3, false);
						}
						if (colQtyInRs_tOracleInput_1 < 4) {
							row4.cargo = null;
						} else {

							row4.cargo = routines.system.JDBCUtil.getString(
									rs_tOracleInput_1, 4, false);
						}
						if (colQtyInRs_tOracleInput_1 < 5) {
							row4.sueldo = null;
						} else {

							row4.sueldo = routines.system.JDBCUtil
									.getDoubleObject(rs_tOracleInput_1, 5);
						}

						/**
						 * [tOracleInput_1 begin ] stop
						 */

						/**
						 * [tOracleInput_1 main ] start
						 */

						currentComponent = "tOracleInput_1";

						tos_count_tOracleInput_1++;

						/**
						 * [tOracleInput_1 main ] stop
						 */

						/**
						 * [tOracleInput_1 process_data_begin ] start
						 */

						currentComponent = "tOracleInput_1";

						/**
						 * [tOracleInput_1 process_data_begin ] stop
						 */

						/**
						 * [tUnite_1 main ] start
						 */

						currentComponent = "tUnite_1";

						// row4
						// row4

						if (execStat) {
							runStat.updateStatOnConnection("row4" + iterateId,
									1, 1);
						}

						// row3
						// row4

						// ////////

						// for output
						row5 = new row5Struct();

						row5.codigo_dependencia = row4.codigo_dependencia;
						row5.tipo_contrato = row4.tipo_contrato;
						row5.funcionario = row4.funcionario;
						row5.cargo = row4.cargo;
						row5.sueldo = row4.sueldo;

						nb_line_tUnite_1++;

						// ////////

						tos_count_tUnite_1++;

						/**
						 * [tUnite_1 main ] stop
						 */

						/**
						 * [tUnite_1 process_data_begin ] start
						 */

						currentComponent = "tUnite_1";

						/**
						 * [tUnite_1 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row5 main ] start
						 */

						currentComponent = "tAdvancedHash_row5";

						// row5
						// row5

						if (execStat) {
							runStat.updateStatOnConnection("row5" + iterateId,
									1, 1);
						}

						row5Struct row5_HashRow = new row5Struct();

						row5_HashRow.codigo_dependencia = row5.codigo_dependencia;

						row5_HashRow.tipo_contrato = row5.tipo_contrato;

						row5_HashRow.funcionario = row5.funcionario;

						row5_HashRow.cargo = row5.cargo;

						row5_HashRow.sueldo = row5.sueldo;

						tHash_Lookup_row5.put(row5_HashRow);

						tos_count_tAdvancedHash_row5++;

						/**
						 * [tAdvancedHash_row5 main ] stop
						 */

						/**
						 * [tAdvancedHash_row5 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_row5";

						/**
						 * [tAdvancedHash_row5 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row5 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_row5";

						/**
						 * [tAdvancedHash_row5 process_data_end ] stop
						 */

						/**
						 * [tUnite_1 process_data_end ] start
						 */

						currentComponent = "tUnite_1";

						/**
						 * [tUnite_1 process_data_end ] stop
						 */

						/**
						 * [tOracleInput_1 process_data_end ] start
						 */

						currentComponent = "tOracleInput_1";

						/**
						 * [tOracleInput_1 process_data_end ] stop
						 */

						/**
						 * [tOracleInput_1 end ] start
						 */

						currentComponent = "tOracleInput_1";

					}
				} finally {
					if (rs_tOracleInput_1 != null) {
						rs_tOracleInput_1.close();
					}
					if (stmt_tOracleInput_1 != null) {
						stmt_tOracleInput_1.close();
					}
				}

				globalMap.put("tOracleInput_1_NB_LINE", nb_line_tOracleInput_1);

				ok_Hash.put("tOracleInput_1", true);
				end_Hash.put("tOracleInput_1", System.currentTimeMillis());

				/**
				 * [tOracleInput_1 end ] stop
				 */

				/**
				 * [tPostgresqlInput_2 begin ] start
				 */

				ok_Hash.put("tPostgresqlInput_2", false);
				start_Hash
						.put("tPostgresqlInput_2", System.currentTimeMillis());

				currentComponent = "tPostgresqlInput_2";

				int tos_count_tPostgresqlInput_2 = 0;

				int nb_line_tPostgresqlInput_2 = 0;
				java.sql.Connection conn_tPostgresqlInput_2 = null;
				conn_tPostgresqlInput_2 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_1");

				java.sql.Statement stmt_tPostgresqlInput_2 = conn_tPostgresqlInput_2
						.createStatement();

				String dbquery_tPostgresqlInput_2 = "SELECT codigo_proyecto_snies codigo_dependencia,\n   vinculacion tipo_contrato, docente funcionario,\n        'DOCENTE' c"
						+ "argo, 0 sueldo\n  FROM docentes_proyecto where anno=2018 and semestre = 3 and codigo_vinculacion not in (1,6)";

				globalMap.put("tPostgresqlInput_2_QUERY",
						dbquery_tPostgresqlInput_2);
				java.sql.ResultSet rs_tPostgresqlInput_2 = null;

				try {
					rs_tPostgresqlInput_2 = stmt_tPostgresqlInput_2
							.executeQuery(dbquery_tPostgresqlInput_2);
					java.sql.ResultSetMetaData rsmd_tPostgresqlInput_2 = rs_tPostgresqlInput_2
							.getMetaData();
					int colQtyInRs_tPostgresqlInput_2 = rsmd_tPostgresqlInput_2
							.getColumnCount();

					String tmpContent_tPostgresqlInput_2 = null;

					while (rs_tPostgresqlInput_2.next()) {
						nb_line_tPostgresqlInput_2++;

						if (colQtyInRs_tPostgresqlInput_2 < 1) {
							row3.codigo_dependencia = null;
						} else {

							row3.codigo_dependencia = routines.system.JDBCUtil
									.getString(rs_tPostgresqlInput_2, 1, false);
						}
						if (colQtyInRs_tPostgresqlInput_2 < 2) {
							row3.tipo_contrato = null;
						} else {

							row3.tipo_contrato = routines.system.JDBCUtil
									.getString(rs_tPostgresqlInput_2, 2, false);
						}
						if (colQtyInRs_tPostgresqlInput_2 < 3) {
							row3.funcionario = null;
						} else {

							row3.funcionario = routines.system.JDBCUtil
									.getString(rs_tPostgresqlInput_2, 3, false);
						}
						if (colQtyInRs_tPostgresqlInput_2 < 4) {
							row3.cargo = null;
						} else {

							row3.cargo = routines.system.JDBCUtil.getString(
									rs_tPostgresqlInput_2, 4, false);
						}
						if (colQtyInRs_tPostgresqlInput_2 < 5) {
							row3.sueldo = null;
						} else {

							if (rs_tPostgresqlInput_2.getObject(5) != null) {
								row3.sueldo = rs_tPostgresqlInput_2
										.getDouble(5);
							} else {
								row3.sueldo = null;
							}
						}

						/**
						 * [tPostgresqlInput_2 begin ] stop
						 */

						/**
						 * [tPostgresqlInput_2 main ] start
						 */

						currentComponent = "tPostgresqlInput_2";

						tos_count_tPostgresqlInput_2++;

						/**
						 * [tPostgresqlInput_2 main ] stop
						 */

						/**
						 * [tPostgresqlInput_2 process_data_begin ] start
						 */

						currentComponent = "tPostgresqlInput_2";

						/**
						 * [tPostgresqlInput_2 process_data_begin ] stop
						 */

						/**
						 * [tUnite_1 main ] start
						 */

						currentComponent = "tUnite_1";

						// row4
						// row3

						// row3
						// row3

						if (execStat) {
							runStat.updateStatOnConnection("row3" + iterateId,
									1, 1);
						}

						// ////////

						// for output
						row5 = new row5Struct();

						row5.codigo_dependencia = row3.codigo_dependencia;
						row5.tipo_contrato = row3.tipo_contrato;
						row5.funcionario = row3.funcionario;
						row5.cargo = row3.cargo;
						row5.sueldo = row3.sueldo;

						nb_line_tUnite_1++;

						// ////////

						tos_count_tUnite_1++;

						/**
						 * [tUnite_1 main ] stop
						 */

						/**
						 * [tUnite_1 process_data_begin ] start
						 */

						currentComponent = "tUnite_1";

						/**
						 * [tUnite_1 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row5 main ] start
						 */

						currentComponent = "tAdvancedHash_row5";

						// row5
						// row5

						if (execStat) {
							runStat.updateStatOnConnection("row5" + iterateId,
									1, 1);
						}

						row5Struct row5_HashRow = new row5Struct();

						row5_HashRow.codigo_dependencia = row5.codigo_dependencia;

						row5_HashRow.tipo_contrato = row5.tipo_contrato;

						row5_HashRow.funcionario = row5.funcionario;

						row5_HashRow.cargo = row5.cargo;

						row5_HashRow.sueldo = row5.sueldo;

						tHash_Lookup_row5.put(row5_HashRow);

						tos_count_tAdvancedHash_row5++;

						/**
						 * [tAdvancedHash_row5 main ] stop
						 */

						/**
						 * [tAdvancedHash_row5 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_row5";

						/**
						 * [tAdvancedHash_row5 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row5 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_row5";

						/**
						 * [tAdvancedHash_row5 process_data_end ] stop
						 */

						/**
						 * [tUnite_1 process_data_end ] start
						 */

						currentComponent = "tUnite_1";

						/**
						 * [tUnite_1 process_data_end ] stop
						 */

						/**
						 * [tPostgresqlInput_2 process_data_end ] start
						 */

						currentComponent = "tPostgresqlInput_2";

						/**
						 * [tPostgresqlInput_2 process_data_end ] stop
						 */

						/**
						 * [tPostgresqlInput_2 end ] start
						 */

						currentComponent = "tPostgresqlInput_2";

					}
				} finally {
					if (rs_tPostgresqlInput_2 != null) {
						rs_tPostgresqlInput_2.close();
					}
					if (stmt_tPostgresqlInput_2 != null) {
						stmt_tPostgresqlInput_2.close();
					}
				}
				globalMap.put("tPostgresqlInput_2_NB_LINE",
						nb_line_tPostgresqlInput_2);

				ok_Hash.put("tPostgresqlInput_2", true);
				end_Hash.put("tPostgresqlInput_2", System.currentTimeMillis());

				/**
				 * [tPostgresqlInput_2 end ] stop
				 */

				/**
				 * [tUnite_1 end ] start
				 */

				currentComponent = "tUnite_1";

				globalMap.put("tUnite_1_NB_LINE", nb_line_tUnite_1);
				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row4" + iterateId, 2, 0);
					}
				}

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row3" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tUnite_1", true);
				end_Hash.put("tUnite_1", System.currentTimeMillis());

				/**
				 * [tUnite_1 end ] stop
				 */

				/**
				 * [tAdvancedHash_row5 end ] start
				 */

				currentComponent = "tAdvancedHash_row5";

				tHash_Lookup_row5.endPut();

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row5" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tAdvancedHash_row5", true);
				end_Hash.put("tAdvancedHash_row5", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row5 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tOracleInput_1 finally ] start
				 */

				currentComponent = "tOracleInput_1";

				/**
				 * [tOracleInput_1 finally ] stop
				 */

				/**
				 * [tPostgresqlInput_2 finally ] start
				 */

				currentComponent = "tPostgresqlInput_2";

				/**
				 * [tPostgresqlInput_2 finally ] stop
				 */

				/**
				 * [tUnite_1 finally ] start
				 */

				currentComponent = "tUnite_1";

				/**
				 * [tUnite_1 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row5 finally ] start
				 */

				currentComponent = "tAdvancedHash_row5";

				/**
				 * [tAdvancedHash_row5 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tOracleInput_1_SUBPROCESS_STATE", 1);
	}

	public void tPostgresqlClose_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlClose_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tPostgresqlClose_1 begin ] start
				 */

				ok_Hash.put("tPostgresqlClose_1", false);
				start_Hash
						.put("tPostgresqlClose_1", System.currentTimeMillis());

				currentComponent = "tPostgresqlClose_1";

				int tos_count_tPostgresqlClose_1 = 0;

				/**
				 * [tPostgresqlClose_1 begin ] stop
				 */

				/**
				 * [tPostgresqlClose_1 main ] start
				 */

				currentComponent = "tPostgresqlClose_1";

				java.sql.Connection conn_tPostgresqlClose_1 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_1");
				if (conn_tPostgresqlClose_1 != null
						&& !conn_tPostgresqlClose_1.isClosed()) {
					conn_tPostgresqlClose_1.close();
				}

				tos_count_tPostgresqlClose_1++;

				/**
				 * [tPostgresqlClose_1 main ] stop
				 */

				/**
				 * [tPostgresqlClose_1 process_data_begin ] start
				 */

				currentComponent = "tPostgresqlClose_1";

				/**
				 * [tPostgresqlClose_1 process_data_begin ] stop
				 */

				/**
				 * [tPostgresqlClose_1 process_data_end ] start
				 */

				currentComponent = "tPostgresqlClose_1";

				/**
				 * [tPostgresqlClose_1 process_data_end ] stop
				 */

				/**
				 * [tPostgresqlClose_1 end ] start
				 */

				currentComponent = "tPostgresqlClose_1";

				ok_Hash.put("tPostgresqlClose_1", true);
				end_Hash.put("tPostgresqlClose_1", System.currentTimeMillis());

				/**
				 * [tPostgresqlClose_1 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tPostgresqlClose_1:OnSubjobOk",
						"", Thread.currentThread().getId() + "", "", "", "",
						"", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk5", 0, "ok");
			}

			tPostgresqlClose_2Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tPostgresqlClose_1 finally ] start
				 */

				currentComponent = "tPostgresqlClose_1";

				/**
				 * [tPostgresqlClose_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostgresqlClose_1_SUBPROCESS_STATE", 1);
	}

	public void tPostgresqlClose_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlClose_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tPostgresqlClose_2 begin ] start
				 */

				ok_Hash.put("tPostgresqlClose_2", false);
				start_Hash
						.put("tPostgresqlClose_2", System.currentTimeMillis());

				currentComponent = "tPostgresqlClose_2";

				int tos_count_tPostgresqlClose_2 = 0;

				/**
				 * [tPostgresqlClose_2 begin ] stop
				 */

				/**
				 * [tPostgresqlClose_2 main ] start
				 */

				currentComponent = "tPostgresqlClose_2";

				java.sql.Connection conn_tPostgresqlClose_2 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_2");
				if (conn_tPostgresqlClose_2 != null
						&& !conn_tPostgresqlClose_2.isClosed()) {
					conn_tPostgresqlClose_2.close();
				}

				tos_count_tPostgresqlClose_2++;

				/**
				 * [tPostgresqlClose_2 main ] stop
				 */

				/**
				 * [tPostgresqlClose_2 process_data_begin ] start
				 */

				currentComponent = "tPostgresqlClose_2";

				/**
				 * [tPostgresqlClose_2 process_data_begin ] stop
				 */

				/**
				 * [tPostgresqlClose_2 process_data_end ] start
				 */

				currentComponent = "tPostgresqlClose_2";

				/**
				 * [tPostgresqlClose_2 process_data_end ] stop
				 */

				/**
				 * [tPostgresqlClose_2 end ] start
				 */

				currentComponent = "tPostgresqlClose_2";

				ok_Hash.put("tPostgresqlClose_2", true);
				end_Hash.put("tPostgresqlClose_2", System.currentTimeMillis());

				/**
				 * [tPostgresqlClose_2 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tPostgresqlClose_2:OnSubjobOk",
						"", Thread.currentThread().getId() + "", "", "", "",
						"", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk7", 0, "ok");
			}

			tOracleClose_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tPostgresqlClose_2 finally ] start
				 */

				currentComponent = "tPostgresqlClose_2";

				/**
				 * [tPostgresqlClose_2 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostgresqlClose_2_SUBPROCESS_STATE", 1);
	}

	public static class row2Struct implements
			routines.system.IPersistableComparableLookupRow<row2Struct> {
		final static byte[] commonByteArrayLock_DMINDICADORES_dependencias_consolidado = new byte[0];
		static byte[] commonByteArray_DMINDICADORES_dependencias_consolidado = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id;

		public int getId() {
			return this.id;
		}

		public String nombre;

		public String getNombre() {
			return this.nombre;
		}

		public String telefono_dependencia;

		public String getTelefono_dependencia() {
			return this.telefono_dependencia;
		}

		public String correo_electronico;

		public String getCorreo_electronico() {
			return this.correo_electronico;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row2Struct other = (row2Struct) obj;

			if (this.id != other.id)
				return false;

			return true;
		}

		public void copyDataTo(row2Struct other) {

			other.id = this.id;
			other.nombre = this.nombre;
			other.telefono_dependencia = this.telefono_dependencia;
			other.correo_electronico = this.correo_electronico;

		}

		public void copyKeysDataTo(row2Struct other) {

			other.id = this.id;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DMINDICADORES_dependencias_consolidado) {

				try {

					int length = 0;

					this.id = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.nombre = readString(dis, ois);

				this.telefono_dependencia = readString(dis, ois);

				this.correo_electronico = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.nombre, dos, oos);

				writeString(this.telefono_dependencia, dos, oos);

				writeString(this.correo_electronico, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",nombre=" + nombre);
			sb.append(",telefono_dependencia=" + telefono_dependencia);
			sb.append(",correo_electronico=" + correo_electronico);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id, other.id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tPostgresqlInput_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row2Struct row2 = new row2Struct();

				/**
				 * [tAdvancedHash_row2 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row2", false);
				start_Hash
						.put("tAdvancedHash_row2", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row2";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row2" + iterateId, 0, 0);

					}
				}

				int tos_count_tAdvancedHash_row2 = 0;

				// connection name:row2
				// source node:tPostgresqlInput_1 -
				// inputs:(after_tPostgresqlInput_3) outputs:(row2,row2) |
				// target node:tAdvancedHash_row2 - inputs:(row2) outputs:()
				// linked node: tMap_1 - inputs:(row1,row5,row2)
				// outputs:(funcionarios_dependencia)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row2 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row2Struct> getLookup(matchingModeEnum_row2);

				globalMap.put("tHash_Lookup_row2", tHash_Lookup_row2);

				/**
				 * [tAdvancedHash_row2 begin ] stop
				 */

				/**
				 * [tPostgresqlInput_1 begin ] start
				 */

				ok_Hash.put("tPostgresqlInput_1", false);
				start_Hash
						.put("tPostgresqlInput_1", System.currentTimeMillis());

				currentComponent = "tPostgresqlInput_1";

				int tos_count_tPostgresqlInput_1 = 0;

				int nb_line_tPostgresqlInput_1 = 0;
				java.sql.Connection conn_tPostgresqlInput_1 = null;
				conn_tPostgresqlInput_1 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_2");

				java.sql.Statement stmt_tPostgresqlInput_1 = conn_tPostgresqlInput_1
						.createStatement();

				String dbquery_tPostgresqlInput_1 = "SELECT id, nombre, telefono_dependencia, correo_electronico\n  FROM dependencia where id <>174";

				globalMap.put("tPostgresqlInput_1_QUERY",
						dbquery_tPostgresqlInput_1);
				java.sql.ResultSet rs_tPostgresqlInput_1 = null;

				try {
					rs_tPostgresqlInput_1 = stmt_tPostgresqlInput_1
							.executeQuery(dbquery_tPostgresqlInput_1);
					java.sql.ResultSetMetaData rsmd_tPostgresqlInput_1 = rs_tPostgresqlInput_1
							.getMetaData();
					int colQtyInRs_tPostgresqlInput_1 = rsmd_tPostgresqlInput_1
							.getColumnCount();

					String tmpContent_tPostgresqlInput_1 = null;

					while (rs_tPostgresqlInput_1.next()) {
						nb_line_tPostgresqlInput_1++;

						if (colQtyInRs_tPostgresqlInput_1 < 1) {
							row2.id = 0;
						} else {

							if (rs_tPostgresqlInput_1.getObject(1) != null) {
								row2.id = rs_tPostgresqlInput_1.getInt(1);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tPostgresqlInput_1 < 2) {
							row2.nombre = null;
						} else {

							row2.nombre = routines.system.JDBCUtil.getString(
									rs_tPostgresqlInput_1, 2, false);
						}
						if (colQtyInRs_tPostgresqlInput_1 < 3) {
							row2.telefono_dependencia = null;
						} else {

							row2.telefono_dependencia = routines.system.JDBCUtil
									.getString(rs_tPostgresqlInput_1, 3, false);
						}
						if (colQtyInRs_tPostgresqlInput_1 < 4) {
							row2.correo_electronico = null;
						} else {

							row2.correo_electronico = routines.system.JDBCUtil
									.getString(rs_tPostgresqlInput_1, 4, false);
						}

						/**
						 * [tPostgresqlInput_1 begin ] stop
						 */

						/**
						 * [tPostgresqlInput_1 main ] start
						 */

						currentComponent = "tPostgresqlInput_1";

						tos_count_tPostgresqlInput_1++;

						/**
						 * [tPostgresqlInput_1 main ] stop
						 */

						/**
						 * [tPostgresqlInput_1 process_data_begin ] start
						 */

						currentComponent = "tPostgresqlInput_1";

						/**
						 * [tPostgresqlInput_1 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row2 main ] start
						 */

						currentComponent = "tAdvancedHash_row2";

						// row2
						// row2

						if (execStat) {
							runStat.updateStatOnConnection("row2" + iterateId,
									1, 1);
						}

						row2Struct row2_HashRow = new row2Struct();

						row2_HashRow.id = row2.id;

						row2_HashRow.nombre = row2.nombre;

						row2_HashRow.telefono_dependencia = row2.telefono_dependencia;

						row2_HashRow.correo_electronico = row2.correo_electronico;

						tHash_Lookup_row2.put(row2_HashRow);

						tos_count_tAdvancedHash_row2++;

						/**
						 * [tAdvancedHash_row2 main ] stop
						 */

						/**
						 * [tAdvancedHash_row2 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_row2";

						/**
						 * [tAdvancedHash_row2 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row2 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_row2";

						/**
						 * [tAdvancedHash_row2 process_data_end ] stop
						 */

						/**
						 * [tPostgresqlInput_1 process_data_end ] start
						 */

						currentComponent = "tPostgresqlInput_1";

						/**
						 * [tPostgresqlInput_1 process_data_end ] stop
						 */

						/**
						 * [tPostgresqlInput_1 end ] start
						 */

						currentComponent = "tPostgresqlInput_1";

					}
				} finally {
					if (rs_tPostgresqlInput_1 != null) {
						rs_tPostgresqlInput_1.close();
					}
					if (stmt_tPostgresqlInput_1 != null) {
						stmt_tPostgresqlInput_1.close();
					}
				}
				globalMap.put("tPostgresqlInput_1_NB_LINE",
						nb_line_tPostgresqlInput_1);

				ok_Hash.put("tPostgresqlInput_1", true);
				end_Hash.put("tPostgresqlInput_1", System.currentTimeMillis());

				/**
				 * [tPostgresqlInput_1 end ] stop
				 */

				/**
				 * [tAdvancedHash_row2 end ] start
				 */

				currentComponent = "tAdvancedHash_row2";

				tHash_Lookup_row2.endPut();

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row2" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tAdvancedHash_row2", true);
				end_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row2 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tPostgresqlInput_1 finally ] start
				 */

				currentComponent = "tPostgresqlInput_1";

				/**
				 * [tPostgresqlInput_1 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row2 finally ] start
				 */

				currentComponent = "tAdvancedHash_row2";

				/**
				 * [tAdvancedHash_row2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostgresqlInput_1_SUBPROCESS_STATE", 1);
	}

	public static class row8Struct implements
			routines.system.IPersistableComparableLookupRow<row8Struct> {
		final static byte[] commonByteArrayLock_DMINDICADORES_dependencias_consolidado = new byte[0];
		static byte[] commonByteArray_DMINDICADORES_dependencias_consolidado = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String numero_contrato_suscrito;

		public String getNumero_contrato_suscrito() {
			return this.numero_contrato_suscrito;
		}

		public Integer vigencia;

		public Integer getVigencia() {
			return this.vigencia;
		}

		public String codigo_dependencia;

		public String getCodigo_dependencia() {
			return this.codigo_dependencia;
		}

		public String tipo_contrato;

		public String getTipo_contrato() {
			return this.tipo_contrato;
		}

		public String funcionario;

		public String getFuncionario() {
			return this.funcionario;
		}

		public String cargo;

		public String getCargo() {
			return this.cargo;
		}

		public String objeto_contrato;

		public String getObjeto_contrato() {
			return this.objeto_contrato;
		}

		public Double sueldo;

		public Double getSueldo() {
			return this.sueldo;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.codigo_dependencia == null) ? 0
								: this.codigo_dependencia.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row8Struct other = (row8Struct) obj;

			if (this.codigo_dependencia == null) {
				if (other.codigo_dependencia != null)
					return false;

			} else if (!this.codigo_dependencia
					.equals(other.codigo_dependencia))

				return false;

			return true;
		}

		public void copyDataTo(row8Struct other) {

			other.numero_contrato_suscrito = this.numero_contrato_suscrito;
			other.vigencia = this.vigencia;
			other.codigo_dependencia = this.codigo_dependencia;
			other.tipo_contrato = this.tipo_contrato;
			other.funcionario = this.funcionario;
			other.cargo = this.cargo;
			other.objeto_contrato = this.objeto_contrato;
			other.sueldo = this.sueldo;

		}

		public void copyKeysDataTo(row8Struct other) {

			other.codigo_dependencia = this.codigo_dependencia;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DMINDICADORES_dependencias_consolidado.length) {
					if (length < 1024
							&& commonByteArray_DMINDICADORES_dependencias_consolidado.length == 0) {
						commonByteArray_DMINDICADORES_dependencias_consolidado = new byte[1024];
					} else {
						commonByteArray_DMINDICADORES_dependencias_consolidado = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_DMINDICADORES_dependencias_consolidado,
						0, length);
				strReturn = new String(
						commonByteArray_DMINDICADORES_dependencias_consolidado,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DMINDICADORES_dependencias_consolidado) {

				try {

					int length = 0;

					this.codigo_dependencia = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.codigo_dependencia, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.numero_contrato_suscrito = readString(dis, ois);

				this.vigencia = readInteger(dis, ois);

				this.tipo_contrato = readString(dis, ois);

				this.funcionario = readString(dis, ois);

				this.cargo = readString(dis, ois);

				this.objeto_contrato = readString(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.sueldo = null;
				} else {
					this.sueldo = dis.readDouble();
				}

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.numero_contrato_suscrito, dos, oos);

				writeInteger(this.vigencia, dos, oos);

				writeString(this.tipo_contrato, dos, oos);

				writeString(this.funcionario, dos, oos);

				writeString(this.cargo, dos, oos);

				writeString(this.objeto_contrato, dos, oos);

				if (this.sueldo == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.sueldo);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("numero_contrato_suscrito=" + numero_contrato_suscrito);
			sb.append(",vigencia=" + String.valueOf(vigencia));
			sb.append(",codigo_dependencia=" + codigo_dependencia);
			sb.append(",tipo_contrato=" + tipo_contrato);
			sb.append(",funcionario=" + funcionario);
			sb.append(",cargo=" + cargo);
			sb.append(",objeto_contrato=" + objeto_contrato);
			sb.append(",sueldo=" + String.valueOf(sueldo));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row8Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.codigo_dependencia,
					other.codigo_dependencia);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tPostgresqlInput_4Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlInput_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row8Struct row8 = new row8Struct();

				/**
				 * [tAdvancedHash_row8 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row8", false);
				start_Hash
						.put("tAdvancedHash_row8", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row8";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row8" + iterateId, 0, 0);

					}
				}

				int tos_count_tAdvancedHash_row8 = 0;

				// connection name:row8
				// source node:tPostgresqlInput_4 -
				// inputs:(after_tPostgresqlInput_6) outputs:(row8,row8) |
				// target node:tAdvancedHash_row8 - inputs:(row8) outputs:()
				// linked node: tMap_2 - inputs:(row7,row8,row6)
				// outputs:(copyOffuncionarios_dependencia)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row8 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct> tHash_Lookup_row8 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row8Struct> getLookup(matchingModeEnum_row8);

				globalMap.put("tHash_Lookup_row8", tHash_Lookup_row8);

				/**
				 * [tAdvancedHash_row8 begin ] stop
				 */

				/**
				 * [tPostgresqlInput_4 begin ] start
				 */

				ok_Hash.put("tPostgresqlInput_4", false);
				start_Hash
						.put("tPostgresqlInput_4", System.currentTimeMillis());

				currentComponent = "tPostgresqlInput_4";

				int tos_count_tPostgresqlInput_4 = 0;

				int nb_line_tPostgresqlInput_4 = 0;
				java.sql.Connection conn_tPostgresqlInput_4 = null;
				conn_tPostgresqlInput_4 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_3");

				java.sql.Statement stmt_tPostgresqlInput_4 = conn_tPostgresqlInput_4
						.createStatement();

				String dbquery_tPostgresqlInput_4 = "SELECT DISTINCT ON (cs.numero_contrato_suscrito)  cs.numero_contrato_suscrito, cs.vigencia,\nCASE WHEN  cg.dependencia_s"
						+ "olicitante ='' THEN 'DEP39' ELSE cg.dependencia_solicitante END AS codigo_dependencia, tc.tipo_contrato AS tipo_contrato"
						+ ", \nip.nom_proveedor AS funcionario,  valor_parametro AS cargo, cg.objeto_contrato, CASE WHEN cg.unidad_ejecucion=205 THE"
						+ "N (cg.valor_contrato/cg.plazo_ejecucion)*30\nWHEN cg.unidad_ejecucion=206 THEN cg.valor_contrato/cg.plazo_ejecucion WHEN "
						+ "cg.unidad_ejecucion=207 THEN cg.valor_contrato/(cg.plazo_ejecucion*12) ELSE NULL END AS sueldo\nFROM argo.contrato_genera"
						+ "l cg INNER JOIN argo.contrato_suscrito cs ON (cg.numero_contrato=cs.numero_contrato AND cg.vigencia=cs.vigencia) INNER J"
						+ "OIN agora.informacion_proveedor ip ON cg.contratista=ip.id_proveedor\nINNER JOIN argo.contrato_cps cps ON (cg.numero_cont"
						+ "rato=cps.numero_contrato AND cg.vigencia=cps.vigencia) INNER JOIN agora.parametro_estandar pe ON cps.perfil=pe.id_parame"
						+ "tro\nINNER JOIN argo.lugar_ejecucion le ON cg.lugar_ejecucion=le.id INNER JOIN argo.tipo_contrato tc ON cg.tipo_contrato="
						+ "tc.id LEFT JOIN argo.\"sedes_SIC\" sede ON le.sede=sede.\"ESF_ID_SEDE\"\nINNER JOIN argo.contrato_estado ce ON (cg.numero"
						+ "_contrato=ce.numero_contrato AND cg.vigencia=ce.vigencia)\nLEFT JOIN argo.\"dependencia_SIC\" dep ON le.dependencia=dep."
						+ "\"ESF_CODIGO_DEP\"\nWHERE ce.fecha_registro = (SELECT MAX(cee.fecha_registro) from argo.contrato_estado cee where cg.nume"
						+ "ro_contrato = cee.numero_contrato and cg.vigencia = cee.vigencia) \n AND cg.tipo_contrato=6\nAND (ce.estado BETWEEN 3 AND "
						+ "4)\n";

				globalMap.put("tPostgresqlInput_4_QUERY",
						dbquery_tPostgresqlInput_4);
				java.sql.ResultSet rs_tPostgresqlInput_4 = null;

				try {
					rs_tPostgresqlInput_4 = stmt_tPostgresqlInput_4
							.executeQuery(dbquery_tPostgresqlInput_4);
					java.sql.ResultSetMetaData rsmd_tPostgresqlInput_4 = rs_tPostgresqlInput_4
							.getMetaData();
					int colQtyInRs_tPostgresqlInput_4 = rsmd_tPostgresqlInput_4
							.getColumnCount();

					String tmpContent_tPostgresqlInput_4 = null;

					while (rs_tPostgresqlInput_4.next()) {
						nb_line_tPostgresqlInput_4++;

						if (colQtyInRs_tPostgresqlInput_4 < 1) {
							row8.numero_contrato_suscrito = null;
						} else {

							row8.numero_contrato_suscrito = routines.system.JDBCUtil
									.getString(rs_tPostgresqlInput_4, 1, false);
						}
						if (colQtyInRs_tPostgresqlInput_4 < 2) {
							row8.vigencia = null;
						} else {

							if (rs_tPostgresqlInput_4.getObject(2) != null) {
								row8.vigencia = rs_tPostgresqlInput_4.getInt(2);
							} else {
								row8.vigencia = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_4 < 3) {
							row8.codigo_dependencia = null;
						} else {

							row8.codigo_dependencia = routines.system.JDBCUtil
									.getString(rs_tPostgresqlInput_4, 3, false);
						}
						if (colQtyInRs_tPostgresqlInput_4 < 4) {
							row8.tipo_contrato = null;
						} else {

							row8.tipo_contrato = routines.system.JDBCUtil
									.getString(rs_tPostgresqlInput_4, 4, false);
						}
						if (colQtyInRs_tPostgresqlInput_4 < 5) {
							row8.funcionario = null;
						} else {

							row8.funcionario = routines.system.JDBCUtil
									.getString(rs_tPostgresqlInput_4, 5, false);
						}
						if (colQtyInRs_tPostgresqlInput_4 < 6) {
							row8.cargo = null;
						} else {

							row8.cargo = routines.system.JDBCUtil.getString(
									rs_tPostgresqlInput_4, 6, false);
						}
						if (colQtyInRs_tPostgresqlInput_4 < 7) {
							row8.objeto_contrato = null;
						} else {

							row8.objeto_contrato = routines.system.JDBCUtil
									.getString(rs_tPostgresqlInput_4, 7, false);
						}
						if (colQtyInRs_tPostgresqlInput_4 < 8) {
							row8.sueldo = null;
						} else {

							if (rs_tPostgresqlInput_4.getObject(8) != null) {
								row8.sueldo = rs_tPostgresqlInput_4
										.getDouble(8);
							} else {
								row8.sueldo = null;
							}
						}

						/**
						 * [tPostgresqlInput_4 begin ] stop
						 */

						/**
						 * [tPostgresqlInput_4 main ] start
						 */

						currentComponent = "tPostgresqlInput_4";

						tos_count_tPostgresqlInput_4++;

						/**
						 * [tPostgresqlInput_4 main ] stop
						 */

						/**
						 * [tPostgresqlInput_4 process_data_begin ] start
						 */

						currentComponent = "tPostgresqlInput_4";

						/**
						 * [tPostgresqlInput_4 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row8 main ] start
						 */

						currentComponent = "tAdvancedHash_row8";

						// row8
						// row8

						if (execStat) {
							runStat.updateStatOnConnection("row8" + iterateId,
									1, 1);
						}

						row8Struct row8_HashRow = new row8Struct();

						row8_HashRow.numero_contrato_suscrito = row8.numero_contrato_suscrito;

						row8_HashRow.vigencia = row8.vigencia;

						row8_HashRow.codigo_dependencia = row8.codigo_dependencia;

						row8_HashRow.tipo_contrato = row8.tipo_contrato;

						row8_HashRow.funcionario = row8.funcionario;

						row8_HashRow.cargo = row8.cargo;

						row8_HashRow.objeto_contrato = row8.objeto_contrato;

						row8_HashRow.sueldo = row8.sueldo;

						tHash_Lookup_row8.put(row8_HashRow);

						tos_count_tAdvancedHash_row8++;

						/**
						 * [tAdvancedHash_row8 main ] stop
						 */

						/**
						 * [tAdvancedHash_row8 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_row8";

						/**
						 * [tAdvancedHash_row8 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row8 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_row8";

						/**
						 * [tAdvancedHash_row8 process_data_end ] stop
						 */

						/**
						 * [tPostgresqlInput_4 process_data_end ] start
						 */

						currentComponent = "tPostgresqlInput_4";

						/**
						 * [tPostgresqlInput_4 process_data_end ] stop
						 */

						/**
						 * [tPostgresqlInput_4 end ] start
						 */

						currentComponent = "tPostgresqlInput_4";

					}
				} finally {
					if (rs_tPostgresqlInput_4 != null) {
						rs_tPostgresqlInput_4.close();
					}
					if (stmt_tPostgresqlInput_4 != null) {
						stmt_tPostgresqlInput_4.close();
					}
				}
				globalMap.put("tPostgresqlInput_4_NB_LINE",
						nb_line_tPostgresqlInput_4);

				ok_Hash.put("tPostgresqlInput_4", true);
				end_Hash.put("tPostgresqlInput_4", System.currentTimeMillis());

				/**
				 * [tPostgresqlInput_4 end ] stop
				 */

				/**
				 * [tAdvancedHash_row8 end ] start
				 */

				currentComponent = "tAdvancedHash_row8";

				tHash_Lookup_row8.endPut();

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row8" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tAdvancedHash_row8", true);
				end_Hash.put("tAdvancedHash_row8", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row8 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tPostgresqlInput_4 finally ] start
				 */

				currentComponent = "tPostgresqlInput_4";

				/**
				 * [tPostgresqlInput_4 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row8 finally ] start
				 */

				currentComponent = "tAdvancedHash_row8";

				/**
				 * [tAdvancedHash_row8 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostgresqlInput_4_SUBPROCESS_STATE", 1);
	}

	public static class row6Struct implements
			routines.system.IPersistableComparableLookupRow<row6Struct> {
		final static byte[] commonByteArrayLock_DMINDICADORES_dependencias_consolidado = new byte[0];
		static byte[] commonByteArray_DMINDICADORES_dependencias_consolidado = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id;

		public int getId() {
			return this.id;
		}

		public String nombre;

		public String getNombre() {
			return this.nombre;
		}

		public String telefono_dependencia;

		public String getTelefono_dependencia() {
			return this.telefono_dependencia;
		}

		public String correo_electronico;

		public String getCorreo_electronico() {
			return this.correo_electronico;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row6Struct other = (row6Struct) obj;

			if (this.id != other.id)
				return false;

			return true;
		}

		public void copyDataTo(row6Struct other) {

			other.id = this.id;
			other.nombre = this.nombre;
			other.telefono_dependencia = this.telefono_dependencia;
			other.correo_electronico = this.correo_electronico;

		}

		public void copyKeysDataTo(row6Struct other) {

			other.id = this.id;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DMINDICADORES_dependencias_consolidado) {

				try {

					int length = 0;

					this.id = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.nombre = readString(dis, ois);

				this.telefono_dependencia = readString(dis, ois);

				this.correo_electronico = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.nombre, dos, oos);

				writeString(this.telefono_dependencia, dos, oos);

				writeString(this.correo_electronico, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",nombre=" + nombre);
			sb.append(",telefono_dependencia=" + telefono_dependencia);
			sb.append(",correo_electronico=" + correo_electronico);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id, other.id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tPostgresqlInput_5Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlInput_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row6Struct row6 = new row6Struct();

				/**
				 * [tAdvancedHash_row6 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row6", false);
				start_Hash
						.put("tAdvancedHash_row6", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row6";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row6" + iterateId, 0, 0);

					}
				}

				int tos_count_tAdvancedHash_row6 = 0;

				// connection name:row6
				// source node:tPostgresqlInput_5 -
				// inputs:(after_tPostgresqlInput_6) outputs:(row6,row6) |
				// target node:tAdvancedHash_row6 - inputs:(row6) outputs:()
				// linked node: tMap_2 - inputs:(row7,row8,row6)
				// outputs:(copyOffuncionarios_dependencia)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row6 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct> tHash_Lookup_row6 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row6Struct> getLookup(matchingModeEnum_row6);

				globalMap.put("tHash_Lookup_row6", tHash_Lookup_row6);

				/**
				 * [tAdvancedHash_row6 begin ] stop
				 */

				/**
				 * [tPostgresqlInput_5 begin ] start
				 */

				ok_Hash.put("tPostgresqlInput_5", false);
				start_Hash
						.put("tPostgresqlInput_5", System.currentTimeMillis());

				currentComponent = "tPostgresqlInput_5";

				int tos_count_tPostgresqlInput_5 = 0;

				int nb_line_tPostgresqlInput_5 = 0;
				java.sql.Connection conn_tPostgresqlInput_5 = null;
				conn_tPostgresqlInput_5 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_2");

				java.sql.Statement stmt_tPostgresqlInput_5 = conn_tPostgresqlInput_5
						.createStatement();

				String dbquery_tPostgresqlInput_5 = "SELECT id, nombre, telefono_dependencia, correo_electronico\n  FROM dependencia";

				globalMap.put("tPostgresqlInput_5_QUERY",
						dbquery_tPostgresqlInput_5);
				java.sql.ResultSet rs_tPostgresqlInput_5 = null;

				try {
					rs_tPostgresqlInput_5 = stmt_tPostgresqlInput_5
							.executeQuery(dbquery_tPostgresqlInput_5);
					java.sql.ResultSetMetaData rsmd_tPostgresqlInput_5 = rs_tPostgresqlInput_5
							.getMetaData();
					int colQtyInRs_tPostgresqlInput_5 = rsmd_tPostgresqlInput_5
							.getColumnCount();

					String tmpContent_tPostgresqlInput_5 = null;

					while (rs_tPostgresqlInput_5.next()) {
						nb_line_tPostgresqlInput_5++;

						if (colQtyInRs_tPostgresqlInput_5 < 1) {
							row6.id = 0;
						} else {

							if (rs_tPostgresqlInput_5.getObject(1) != null) {
								row6.id = rs_tPostgresqlInput_5.getInt(1);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tPostgresqlInput_5 < 2) {
							row6.nombre = null;
						} else {

							row6.nombre = routines.system.JDBCUtil.getString(
									rs_tPostgresqlInput_5, 2, false);
						}
						if (colQtyInRs_tPostgresqlInput_5 < 3) {
							row6.telefono_dependencia = null;
						} else {

							row6.telefono_dependencia = routines.system.JDBCUtil
									.getString(rs_tPostgresqlInput_5, 3, false);
						}
						if (colQtyInRs_tPostgresqlInput_5 < 4) {
							row6.correo_electronico = null;
						} else {

							row6.correo_electronico = routines.system.JDBCUtil
									.getString(rs_tPostgresqlInput_5, 4, false);
						}

						/**
						 * [tPostgresqlInput_5 begin ] stop
						 */

						/**
						 * [tPostgresqlInput_5 main ] start
						 */

						currentComponent = "tPostgresqlInput_5";

						tos_count_tPostgresqlInput_5++;

						/**
						 * [tPostgresqlInput_5 main ] stop
						 */

						/**
						 * [tPostgresqlInput_5 process_data_begin ] start
						 */

						currentComponent = "tPostgresqlInput_5";

						/**
						 * [tPostgresqlInput_5 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row6 main ] start
						 */

						currentComponent = "tAdvancedHash_row6";

						// row6
						// row6

						if (execStat) {
							runStat.updateStatOnConnection("row6" + iterateId,
									1, 1);
						}

						row6Struct row6_HashRow = new row6Struct();

						row6_HashRow.id = row6.id;

						row6_HashRow.nombre = row6.nombre;

						row6_HashRow.telefono_dependencia = row6.telefono_dependencia;

						row6_HashRow.correo_electronico = row6.correo_electronico;

						tHash_Lookup_row6.put(row6_HashRow);

						tos_count_tAdvancedHash_row6++;

						/**
						 * [tAdvancedHash_row6 main ] stop
						 */

						/**
						 * [tAdvancedHash_row6 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_row6";

						/**
						 * [tAdvancedHash_row6 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row6 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_row6";

						/**
						 * [tAdvancedHash_row6 process_data_end ] stop
						 */

						/**
						 * [tPostgresqlInput_5 process_data_end ] start
						 */

						currentComponent = "tPostgresqlInput_5";

						/**
						 * [tPostgresqlInput_5 process_data_end ] stop
						 */

						/**
						 * [tPostgresqlInput_5 end ] start
						 */

						currentComponent = "tPostgresqlInput_5";

					}
				} finally {
					if (rs_tPostgresqlInput_5 != null) {
						rs_tPostgresqlInput_5.close();
					}
					if (stmt_tPostgresqlInput_5 != null) {
						stmt_tPostgresqlInput_5.close();
					}
				}
				globalMap.put("tPostgresqlInput_5_NB_LINE",
						nb_line_tPostgresqlInput_5);

				ok_Hash.put("tPostgresqlInput_5", true);
				end_Hash.put("tPostgresqlInput_5", System.currentTimeMillis());

				/**
				 * [tPostgresqlInput_5 end ] stop
				 */

				/**
				 * [tAdvancedHash_row6 end ] start
				 */

				currentComponent = "tAdvancedHash_row6";

				tHash_Lookup_row6.endPut();

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row6" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tAdvancedHash_row6", true);
				end_Hash.put("tAdvancedHash_row6", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row6 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tPostgresqlInput_5 finally ] start
				 */

				currentComponent = "tPostgresqlInput_5";

				/**
				 * [tPostgresqlInput_5 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row6 finally ] start
				 */

				currentComponent = "tAdvancedHash_row6";

				/**
				 * [tAdvancedHash_row6 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostgresqlInput_5_SUBPROCESS_STATE", 1);
	}

	public void tPostjob_2Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostjob_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tPostjob_2 begin ] start
				 */

				ok_Hash.put("tPostjob_2", false);
				start_Hash.put("tPostjob_2", System.currentTimeMillis());

				currentComponent = "tPostjob_2";

				int tos_count_tPostjob_2 = 0;

				/**
				 * [tPostjob_2 begin ] stop
				 */

				/**
				 * [tPostjob_2 main ] start
				 */

				currentComponent = "tPostjob_2";

				tos_count_tPostjob_2++;

				/**
				 * [tPostjob_2 main ] stop
				 */

				/**
				 * [tPostjob_2 process_data_begin ] start
				 */

				currentComponent = "tPostjob_2";

				/**
				 * [tPostjob_2 process_data_begin ] stop
				 */

				/**
				 * [tPostjob_2 process_data_end ] start
				 */

				currentComponent = "tPostjob_2";

				/**
				 * [tPostjob_2 process_data_end ] stop
				 */

				/**
				 * [tPostjob_2 end ] start
				 */

				currentComponent = "tPostjob_2";

				ok_Hash.put("tPostjob_2", true);
				end_Hash.put("tPostjob_2", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tPostgresqlClose_1Process(globalMap);

				/**
				 * [tPostjob_2 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tPostjob_2 finally ] start
				 */

				currentComponent = "tPostjob_2";

				/**
				 * [tPostjob_2 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostjob_2_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final dependencias_consolidado dependencias_consolidadoClass = new dependencias_consolidado();

		int exitCode = dependencias_consolidadoClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket
				// can't open
				System.err.println("The statistics socket port " + portStats
						+ " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = dependencias_consolidado.class
					.getClassLoader().getResourceAsStream(
							"dmindicadores/dependencias_consolidado_0_1/contexts/"
									+ contextStr + ".properties");
			if (inContext == null) {
				inContext = dependencias_consolidado.class
						.getClassLoader()
						.getResourceAsStream(
								"config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				defaultProps.load(inContext);
				inContext.close();
				context = new ContextProperties(defaultProps);
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param
				// is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param
							.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "",
				resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tOracleConnection_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tOracleConnection_1) {
			globalMap.put("tOracleConnection_1_SUBPROCESS_STATE", -1);

			e_tOracleConnection_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		try {
			errorCode = null;
			tPostjob_2Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tPostjob_2) {
			globalMap.put("tPostjob_2_SUBPROCESS_STATE", -1);

			e_tPostjob_2.printStackTrace();

		}

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out
					.println((endUsedMemory - startUsedMemory)
							+ " bytes memory increase when running : dependencias_consolidado");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {
		closeSqlDbConnections();

	}

	private void closeSqlDbConnections() {
		try {
			Object obj_conn;
			obj_conn = globalMap.remove("conn_tOracleConnection_1");
			if (null != obj_conn) {
				((java.sql.Connection) obj_conn).close();
			}
			obj_conn = globalMap.remove("conn_tPostgresqlConnection_1");
			if (null != obj_conn) {
				((java.sql.Connection) obj_conn).close();
			}
			obj_conn = globalMap.remove("conn_tPostgresqlConnection_2");
			if (null != obj_conn) {
				((java.sql.Connection) obj_conn).close();
			}
			obj_conn = globalMap.remove("conn_tPostgresqlConnection_3");
			if (null != obj_conn) {
				((java.sql.Connection) obj_conn).close();
			}
		} catch (java.lang.Exception e) {
		}
	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		connections.put("conn_tOracleConnection_1",
				globalMap.get("conn_tOracleConnection_1"));
		connections.put("conn_tPostgresqlConnection_1",
				globalMap.get("conn_tPostgresqlConnection_1"));
		connections.put("conn_tPostgresqlConnection_2",
				globalMap.get("conn_tPostgresqlConnection_2"));
		connections.put("conn_tPostgresqlConnection_3",
				globalMap.get("conn_tPostgresqlConnection_3"));

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 231709 characters generated by Talend Open Studio for Data Integration on the
 * 20 de septiembre de 2018 07:31:16 PM COT
 ************************************************************************************************/
